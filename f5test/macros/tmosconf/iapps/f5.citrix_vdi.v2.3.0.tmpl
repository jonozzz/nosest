cli script f5.iapp.1.4.0.cli [BEGIN]
 
#  Initialization proc for all templates.
#  Parameters "start" and "stop" or "end".
proc iapp_template { action } {
    switch $action {
        start {
            catch { tmsh::modify sys scriptd log-level debug }
            set ::clock_clicks [clock clicks]
            puts "\nStarting iApp $tmsh::app_template_name [clock format \
                [clock seconds] -format {%m/%d/%Y %T}]\n"
            tmsh::log info "Starting iApp template $tmsh::app_template_name"
        }
        stop -
        end {
            if { [info exists ::substa_debug] } {
                puts $::substa_debug
            }
            puts "\nEnding iApp $tmsh::app_template_name [clock format \
                [clock seconds] -format {%m/%d/%Y %T}]\nRun time [expr \
                { ([clock clicks] - $::clock_clicks) / 1000 }] msec\n"
            tmsh::log info "Ending iApp template $tmsh::app_template_name"
        }
    }
    set ::HTTP_CONTENT_TYPES { application/(css\|css-stylesheet\|doc\|excel\|javascript\|json\|lotus123\|mdb\|mpp\|msaccess\|msexcel\|ms-excel\|mspowerpoint\|ms-powerpoint\|msproject\|msword\|ms-word\|photoshop\|postscript\|powerpoint\|ps\|psd\|quarkexpress\|rtf\|txt\|visio\|vnd\\.excel\|vnd\\.msaccess\|vnd\\.ms-access\|vnd\\.msexcel\|vnd\\.ms-excel\|vnd\\.mspowerpoint\|vnd\\.ms-powerpoint\|vnd\\.ms-pps\|vnd\\.ms-project\|vnd\\.msword\|vnd\\.ms-word\|vnd\\.ms-works\|vnd\\.ms-works-db\|vnd\\.powerpoint\|vnd\\.visio\|vnd\\.wap\\.cmlscriptc\|vnd\\.wap\\.wmlc\|vnd\\.wap\\.xhtml\\+xml\|vnd\\.word\|vsd\|winword\|wks\|word\|x-excel\|xhtml\\+xml\|x-java-jnlp-file\|x-javascript\|x-json\|x-lotus123\|xls\|x-mdb\|xml\|x-mscardfile\|x-msclip\|x-msexcel\|x-ms-excel\|x-mspowerpoint\|x-msproject\|x-ms-project\|x-msword\|x-msworks-db\|x-msworks-wps\|x-photoshop\|x-postscript\|x-powerpoint\|x-ps\|x-quark-express\|x-rtf\|x-vermeer-rpc\|x-visio\|x-vsd\|x-wks\|x-word\|x-xls\|x-xml) image/(photoshop\|psd\|x-photoshop\|x-vsd) text/(css\|html\|javascript\|json\|plain\|postscript\|richtext\|rtf\|vnd\\.wap\\.wml\|vnd\\.wap\\.wmlscript\|wap\|wml\|x-component\|xml\|x-vcalendar\|x-vcard) }
}

proc iapp_is { args } {
    set up_var [lindex $args 0]
    upvar $up_var var
    if { [info exists var] } {
        foreach val [lrange $args 1 end] {
            if { [subst $var] eq $val } {
                return 1
            }
        }
    }
    return 0
}

proc iapp_substa { args } {
    upvar substa_in  argx \
          substa_out rval
    set   argx $args

    # check the explicit value first.
    # multiple layers of variable substitution requires multiple subst.
    # error occurs here if any of the substituted variables do not exist
    # valid wildcard (*) array entries will fail here first.
    uplevel {
        append ::substa_debug "\n$substa_in"
        if { [info exists [set substa_in]] } {
            set substa_out [subst $$substa_in]
            set substa_out [subst $substa_out]
        } else {
            # since explicit value did not exist, try a wildcard value.
            # substitute "*" as the array key and repeat.
            set substa_tmp [split $substa_in "()"]
            set substa_in "[lindex $substa_tmp 0](*)"
            append ::substa_debug "*"
            if { [info exists [set substa_in]] } {
                set substa_out [subst $$substa_in]
                set substa_out [subst $substa_out]
            } else {
                error "substa \"$substa_in\" array value not found"
            }
        }
    }
    return $rval
}

proc iapp_conf { args } {

    # Return value $object_name is set to the first word in $arg that
    # contains an underscore, since the position of the object name in
    # tmsh syntax is not consistent.
    set args [join $args]
    set object_name [lindex $args [lsearch -glob $args "*_*"]]

    # Global array ::tmsh_history persists between calls to iapp_conf
    # in order to suppress duplicate commands.
    if { ![info exists ::tmsh_history($args)] } {
        set ::tmsh_history($args) 1
        iapp_debug $args
        switch -exact -- [string range $args 0 5] {
            create { tmsh::create [string range $args 7 end] }
            modify { tmsh::modify [string range $args 7 end] }
            delete { tmsh::delete [string range $args 7 end] }
            default { error "iapp_conf illegal parameter" }
        }
    }
    return $object_name
}

proc iapp_make_safe_password { password } {
    return [string map { \' \\\' \" \\\" \{ \\\{ \} \\\} \; \\\; \| \\\| \# \\\# \  \\\  \\ \\\\ } $password]
}

proc iapp_pull { loc items_list } {
    upvar $items_list items
    if { [set item [lindex $items $loc]] != "" } {
        set items [lreplace $items $loc $loc]
    }
    return $item
}

proc iapp_process_flags { flags_array args_list } {
    upvar $flags_array flags
    upvar $args_list args

    if { [set dubdash [lsearch $args "--"]] != -1 } {
        set args [lreplace $args $dubdash $dubdash];
    } else {
        set dubdash end
    }

    foreach flag [array names flags] {
        while { [set ptr [lsearch [lrange $args 0 $dubdash] $flag]] != -1 } {
            set args [lreplace $args $ptr $ptr];

            # we want to run the code in the flags_array at the calling
            # proc's level so that the variables that it sets up are
            # available there.
            set access_var [format "$%s(%s)" $flags_array $flag]
            set command [subst -nocommands { set ptr $ptr ; subst $access_var }]

            uplevel 1 $command
        }
    }
    return $args
}

proc iapp_tmos_version { args } {
    set cversion [tmsh::version]
    if { $cversion eq "" } {
        tmsh::log err "unable to determine TMOS version"
        error "unable to determine TMOS version"
    }

    # if no op+version was specified, just return the version
    if { $args eq "" } { return $cversion }
    if { [llength $args] > 2 } {
        error "Too many arguments"
    }

    set op [lindex $args 0]; # operator
    set NOTFOUND -1
    # constrain to valid operators - adding more is fine as long as
    # they are supported by [expr] (and makes sense)
    if { [lsearch -exact { < > <= >= == != } $op] == $NOTFOUND } {
        tmsh::log err "illegal operator: $op"
        error "illegal operator: $op"
    }

    set tversion [lindex $args 1]; # target version
    # one or two decimal digits, optionally followed by 0-2 complete groups of
    # dots followed by one or two decimal digits with nothing before or after
    set regex {^\d{1,2}(\.\d{1,2}){0,2}$}
    if { ! [regexp -- $regex $tversion] } {
        tmsh::log err "cannot parse version from: $tversion"
        error "cannot parse version from: $tversion"
    }

    # p=>prefix, c=>current, t=>target
    foreach p { c t } {
        # extract major/minor/point components
        scan [set [set p]version] "%d.%d.%d" [set p]mjr [set p]mnr [set p]pnt
        # ensure that these are each set to at least 0
        foreach level { mjr mnr pnt } {
            if { ! [info exists [set p]${level}] } { set [set p]${level} 0 }
        }
        # turn them into one big number that we can compare
        # leave room in-between just to be safe
        set [set p]num [expr {
            [set [set p]mjr]*1000000 +
            [set [set p]mnr]*10000 +
            [set [set p]pnt]*100
        }]
    }
    # a simple numeric comparison is all that is needed at this point
    return [eval expr $cnum $op $tnum ]
}

proc iapp_safe_display { args } {
    # strings sent to APL must be truncated to 65535 bytes, see BZ435592
    if { [string length [set [set args]]] > 65535 } {
        set last_newline [string last "\n" [set [set args]] 65500]
        return "[string range [set [set args]] 0 $last_newline]Error: Too many items for display"
    } else {
        return [set [set args]]
    }
}

proc iapp_get_items { args } {

    # Set default values.
    set error_msg  "iapp_get_items $args:"
    set do_binary  0
    set nocomplain 0
    set items      ""
    set join_char  "\n"
    set recursive  "recursive"
    set com_dir    "/Common"
    set loc_dir    "[tmsh::pwd]"

    # Set up flag-related work.
    array set flags  {
        -exists      { [set do_binary 1] }
        -nocomplain  { [set nocomplain 1] }
        -list        { [set join_char " "] }
        -norecursive { [set recursive ""] }
        -local       { [set com_dir   ""] }
        -dir         { [set loc_dir      [iapp_pull $ptr args]] }
        -filter      { [set filter_field [iapp_pull $ptr args]] \
                       [set filter_op    [iapp_pull $ptr args]] \
                       [set filter_value [iapp_pull $ptr args]] }
    }
    iapp_process_flags flags args

    # Get system object names in all requested directories.
    set save_dir [tmsh::pwd]
    foreach dir [lsort -unique "$com_dir $loc_dir"] {
        tmsh::cd $dir
        set tmsh_rval [catch {
            foreach obj [tmsh::get_config $args $recursive] {

                if { [info exists filter_field] } {
                    if { $filter_field eq "NAME" } {
                        set val [tmsh::get_name $obj]
                    } else {
                        # If get_field_value throws error, assume "none" value
                        if { [catch {
                            set val [tmsh::get_field_value $obj $filter_field]
                            # strip quotes per BZ442531
                            set val [string map {\" ""} $val]
                        }]} { set val none }
                    }
                    # Non-Tcl operators =~ and !~ added for extra flexibility
                    if { $filter_op eq "=~" } {
                        set filter "\[regexp \"$filter_value\" \"$val\"\]"
                    } elseif { $filter_op eq "!~" } {
                        set filter "!\[regexp \"$filter_value\" \"$val\"\]"
                    } else {
                        set filter "\\\"$val\\\" $filter_op \\\"$filter_value\\\""
                    }
                    # If filter fails, skip to next object
                    if { ![eval expr $filter] } {
                        continue
                    }
                }
                # string map catches /Common added by ltm profile ntlm,
                # which is unlike all other ltm profile return values.
                lappend items $dir/[string map {/Common/ ""} [tmsh::get_name $obj]]
            }
        } err ]
    }
    tmsh::cd $save_dir

    # array keys: $do_binary,$tmsh_rval,$nocomplain. Do not insert whitespace.
    array set rval {
        0,0,0 {[join $items $join_char]}
        0,0,1 {[join $items $join_char]}
        0,1,0 {[error "$error_msg $err"]}
        0,1,1 {}
        1,0,0 {[llength $items]}
        1,0,1 {[llength $items]}
        1,1,0 {0}
        1,1,1 {0}
    }

    return [subst $rval($do_binary,$tmsh_rval,$nocomplain)]
}

proc iapp_get_provisioned { args } {

    array set lnum {
        none      0
        minimum   1
        nominal   2
        dedicated 3
    }

    # Set defaults.
    set required minimum
    set do_binary 1

    # Set up flag-related work.
    array set flags  {
        -is          { [set required [iapp_pull $ptr args]] }
        -level       { [set do_binary 0] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # If checking for AM provisioning on TMOS < 11.4,
    # check for WAM provisioning instead.
    if { $args eq "am" && [iapp_tmos_version < 11.4] } {
        set args "wam"
    }

    # Get the provisioning level. If blank, assume none.
    # Proc only checks 1 module at a time, so only 1 object is returned.
    if { [catch {
        set obj [tmsh::get_config sys provision $args]
        set level [tmsh::get_field_value [lindex $obj 0] level]
    }]} { set level none }

    if { $do_binary } {
        return [expr { $lnum($level) >= $lnum($required) }]
    } else {
        return $level
    }
}

proc iapp_get_user { args } {

    # Set defaults.
    set do_role 0
    set do_binary 0

    # Set up flag-related work.
    array set flags  {
        -is_admin    { [set do_binary 1] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # Show user auth was introduced in v11.6
    set user "unknown"
    catch {
        set user [tmsh::show auth user field-fmt]
    } err
    if { $do_binary } {
        return [expr { $user == "unknown"
        || [string first "role " $user] == -1
        || [string first "role admin" $user] != -1
        || [string first "role resource-admin" $user] != -1 }]
    } else {
        return $user
    }
}

proc iapp_destination { args } {
    # Set defaults. Flag actions may overwrite defaults later.
    set route_domain    0
    set do_mask         0
    set port            0

    # Set up flag-based actions.
    array set flags  {
        -route_domain { [set route_domain [iapp_pull $ptr args]] }
        -mask         { [set do_mask 1] }
        -length       { [set cidr_bits [iapp_pull $ptr args]] }
    }

    if { [llength [set non_switches [iapp_process_flags flags args]]] > 2 } {
        error "Too many arguments"
    }
    if { [llength $non_switches] == 2 } { set port [lindex $non_switches 1] }
    set addr [lindex $non_switches 0]


    # Detect a CIDR mask and pull it off the addr string
    if { [set loc [string first "/" $addr end-4]] != -1 } {
        set cidr_bits [string range $addr [expr {$loc + 1}] end]
        set addr [string range $addr 0 [expr {$loc - 1}]]
    }

    # Pull the route-domain off the addr string, but only use it as the
    # route domain if it wasn't overridden by -route_domain flag.
    if { [string first "%" $addr] != -1 } {
        if { $route_domain == 0 } {
            # route-domain is still default, so use value from addr string
            set route_domain [lindex [split $addr "%"] 1]
        }
        set addr [lindex [split $addr "%"] 0]
    }

    if { $do_mask } {

        # Define the delta between ipv4 and ipv6.
        # length: ipv4 mask is 32 bits, ipv6 is 128 bits.
        # group: ipv4 is grouped in octets, ipv6 as 16 bit words.
        # format: ipv4 is decimal notation, ipv6 is hex.
        # format1 also has the delimiter, format2 does not.
        array set v {
            0,length  32
            0,group   8
            0,format1 d.
            0,format2 d
            1,length  128
            1,group   16
            1,format1 .4x:
            1,format2 .4x
        }
        set is_ipv6 [string match "*:*:*" $addr]

        # Soften result of an illegal -length parameter.
        if { ![info exists cidr_bits] || $cidr_bits > $v($is_ipv6,length) } {
            set cidr_bits $v($is_ipv6,length)
        } elseif { $cidr_bits < 0 } {
            set cidr_bits 0
        }

        # Loop on the full length of the mask: 32 bits for ipv4, 128 for ipv6
        for { set octet 0; set i 0 } { $i < $v($is_ipv6,length) } { incr i } {

           # Take a break at intervals to save the grouping and add delimiter.
           # Interval is 8 bits for ipv4 and 16 bits for ipv6.
           if { $i && ![expr {$i % $v($is_ipv6,group)}] } {

               # Add the grouping and delimiter to the mask, then reset.
               append mask [format %$v($is_ipv6,format1) $octet]
               set octet 0
           }
           # Shift the prior bits left by multiplying by 2.
           # Then add the current bit, which is 1 if part of the mask, 0 if not.
           # Current bit is part of the mask if $i < number of bits in the mask.
           set octet [expr { 2 * $octet + ($i < $cidr_bits) }]
        }
        # Add the final grouping, then return the finished mask.
        set ret_val [format $mask%$v($is_ipv6,format2) $octet]

    } else {

        # calculate a destination
        # the route domain might be a name and we need a number.
        if { ![string is integer $route_domain] } {
            set route_domains [tmsh::get_config "/ net route-domain $route_domain"]
            if { [llength $route_domains] != 1 } {
                error "no such route domain: $route_domain"
            }
            # since we have already determined that the list is 1 long,
            # this explicit reference to element 0 is safe
            set route_domain [tmsh::get_field_value [lindex $route_domains 0] "id"]
        }

        set route_domain [expr { $route_domain == 0 ? "" : "%$route_domain" }]

        # 0 and * represent wildcard port assignments in the GUI,
        # but TMSH requires the string 'any' to specify a wildcard.
        if { $port == 0 || $port == "*" } {
            set port any
        }

        # Build the final destination. Use ":" for node names even if ipv6.
        set is_ipv6_literal [string match "*:*:*" $addr]
        set addr_delimiter  [expr { $is_ipv6_literal ? "." : ":" }]
        set ret_val ${addr}${route_domain}${addr_delimiter}${port}
    }
    return $ret_val
}

proc iapp_pool_members { args } {

    # Set defaults.
    array set fields {
        address          addr
        port             port
        port-secure      port_secure
        connection-limit connection_limit
        priority-group   priority
        ratio            ratio
    }
    set route_domain ""
    set port_override -1
    set aaa_domain 0
    set aaa_priority -1

    # Set up flag-related work.
    array set flags {
        -fields       { [array set fields  [iapp_pull $ptr args]] }
        -route_domain { [set route_domain  [iapp_pull $ptr args]] }
        -port         { [set port_override [iapp_pull $ptr args]] }
        -aaa_domain   { [set aaa_domain    1] }
        -aaa_pool     { [set aaa_priority  0] }
    }
    iapp_process_flags flags args

    # Identify the non-address/non-port fields. These go inside braces in tmsh.
    set nonport_fields [lsearch -all -not -inline -regexp \
        [array names fields] {address|port|port-secure}]

    set members ""
    foreach row [join $args] {

        # Skip invalid table rows.
        if { [llength [join $row]] %2 == 1 } {
            continue
        }

        # Import APL table into an array for processing.
        array unset columns
        array set columns [join $row]
        set addr $columns($fields(address))

        # Identify the port number, either from table columns or by -port flag.
        if { $port_override != -1 } {
            set port $port_override
        } elseif { [info exists columns($fields(port))] } {
            set port $columns($fields(port))
        } elseif { [info exists columns($fields(port-secure))] } {
            set port $columns($fields(port-secure))
        } else {
            set port 80
        }

        # If specified, strip entered route domain and append the flag value.
        if { $route_domain != "" } {
            set addr [lindex [split $addr "%"] 0]
            set addr "$addr%$route_domain"
        }

        # If -aaa_domain, use domain controller format, otherwise use pool format
        if { $aaa_domain } {
            append members " $columns($fields(host)) \{ ip $addr \}"
        } else {
            append members " [iapp_destination $addr $port] \{"

            # Transfer non-port fields from the table to the tmsh string.
            foreach name $nonport_fields {
                if { [info exists columns($fields($name))] } {
                    append members " $name $columns($fields($name))"
                }
            }

            # If -aaa_pool, add priority field with incrementing value.
            # This is required by APM.
            if { $aaa_priority >= 0 } {
                append members " priority-group [incr aaa_priority]"
            }
            append members " \}"
        }
    }

    return "[expr { $aaa_domain ? "" : "members " }][expr { $members eq "" \
        ? "none" : "replace-all-with \{ $members \}" }]"
}

proc iapp_debug { args } {

    # Passwords should be obscured in all logs. Fields shown here are handled
    # in this proc, but the global variable may be overwritten if alternate
    # fields should be obscured.
    if { ![info exists ::SENSITIVES] } {
        set ::SENSITIVES {
            account-password
            admin-encrypted-password
            password
            passwd
            secret
        }
    }

    # look for any of the sensitive words, and replace the word that follows it
    set regex "(\\m([join $::SENSITIVES |])\\M)\\s+\[^\\s\]*"
    regsub -all $regex [join $args] {\1 -OBSCURED-} args
    regsub -all "(<Password.*>).*(</Password>)" $args {\1-OBSCURED-\2} args

    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    if { $lev eq {debug} } {
        puts $args
    }
}

# The apm_config proc provides a tmsh pre-processor for APM
# configuration, which in most cases will drastically reduce
# implementation code. To configure APM with this proc, pass
# it an array of object names and associated meta-tag substitutions.
# Each object must be categorized as a profile, a resource, or
# a policy-item. APM agents and customization-groups are derived
# from these 3 categories as needed.
#
# apm_config's return value is a list of the APM profiles defined
# in the argument and instantiated by the proc. This allows the
# procedure call to be embedded directly into a virtual server
# definition.
#
# These universal meta-tags may be placed anywhere in the array:
# <ITEM> The object name, eg. apm_access
# <PREFIX> The app name, including folder, eg. /Common/my_app.app/my_app
#
# Profile objects require the following meta-tags:
# <PROFILE_TYPE> The tmsh object type, eg. "apm profile access"
# <PROFILE_DEF>  The body of the object, eg.:
#     "access-policy <PREFIX>
#      defaults-from /Common/access
#      eps-group <PREFIX>_eps
#      errormap-group <PREFIX>_errormap
#      general-ui-group <PREFIX>_general_ui"
#
# apm_config will automatically create default customization-groups
# for the "-group" lines specified in access profile definitions.
# In the above example, there is no need to additionally specify a
# customization-group for errormap and general-ui.
#
# <PROFILE_TYPE> is a catch-all for other APM types, eg:
#      apm_sso {
#          <PROFILE_TYPE> {apm sso kerberos}
#          <PROFILE_DEF>  "account-name <USER>
#                          account-password <PASS>
#                          realm <REALM>" }
#
# In the example above, <PROFILE_TYPE> and <PROFILE_DEF> are
# apm_config meta-tags, while <USER>, <PASS>, and <REALM> must
# be substituted before calling apm_config, eg. if these tags are
# defined in $pre_proc_map, they may be substituted with:
# array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
#
# Resource objects require the following meta-tags:
# <RESOURCE_TYPE> The apm resource object type, eg. "webtop"
# <RESOURCE_DEF>  The body of the object, eg.:
#     "customization-group <ITEM>
#      minimize-to-tray false
#      webtop-type full"
#
# In the above example, a customization-group is specified. Any
# customization-group is assumed to be blank unless further defined by the
# <GROUP_DEF> meta-tag, eg. <GROUP_DEF> {type webtop}
#
# Policy-item objects are defined by the following meta-tags:
# <AGENT_TYPE>   default "resource-assign"
# <AGENT_DEF>    default "customization-group <ITEM>"
# <ITEM_AGENT>   default "agents { <ITEM>_ag { type <AGENT_TYPE> }}"
# <ITEM_CAPTION> default "<ITEM>"
# <ITEM_COLOR>   default "1"
# <ITEM_TYPE>    default "action"
# <ITEM_RULES>   defaults to a set of expressions/next-items where specified
# <RULE_CAPTION_0> default "fallback"
# <RULE_CAPTION_1> default "Successful"
# <RULE_CAPTION_2> default "successful"
#
# apm_config generates the APM agent and customization-group definitions
# as required for each policy-item, but specific objects may be defined
# by using the <AGENT_DEF> and <GROUP_DEF> meta-tags.
# To suppress the formation of an APM agent, specify <ITEM_AGENT> {}.

proc iapp_apm_config { map_array_name } {
    upvar $map_array_name map_array

    # Pull $prefix from the array
    set prefix $map_array(prefix)
    unset map_array(prefix)

    # Stencils for creating apm objects
    set access_form \
       "<TMSH_CREATE> apm policy access-policy <ITEM> {\n   \
          caption general\n   \
          start-item <ACCESS_START_ITEM>\n   \
          default-ending <ACCESS_ENDING>\n   \
          items replace-all-with {\n<ACCESS_ITEMS>    }\n}"

    set profile_form "<TMSH_CREATE> <PROFILE_TYPE> <ITEM> {\n   \
        <PROFILE_DEF>\n}"

    set resource_form "<TMSH_CREATE> apm resource <RESOURCE_TYPE> <ITEM> {\n   \
        <RESOURCE_DEF>\n}"

    set agent_form "<TMSH_CREATE> apm policy agent <AGENT_TYPE> <ITEM>_ag {\n   \
        <AGENT_DEF>\n}"

    set group_form "<TMSH_CREATE> apm policy customization-group <ITEM> {\
        <GROUP_DEF>}"

    set agent_group_form "<TMSH_CREATE> apm policy customization-group <ITEM>_ag {\
        <GROUP_DEF>}"

    set policy_item_form "<TMSH_CREATE> apm policy policy-item <ITEM> {
    <ITEM_AGENT>caption <ITEM_CAPTION>
    color <ITEM_COLOR>
    <ITEM_TYPE>
    <ITEM_RULES>\n}"

    # 1st round apm string map
    set default_map_1 {
        <ACCESS_ITEM> {}
        <AGENT_DEF> "customization-group <ITEM>_ag"
        <ITEM_AGENT> "agents replace-all-with {
        <ITEM>_ag { type <AGENT_TYPE> }}\n    "
        <ITEM_CAPTION> <ITEM>
        <ITEM_COLOR> {1}
        <ITEM_TYPE> "item-type action"
        <ITEM_RULES> "rules
        {[expr {[string first <RULE_NEXT_2> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_2>
            expression <RULE_EXPR_2>
            next-item ${prefix}_<RULE_NEXT_2>
        }":""}][expr {[string first <RULE_NEXT_1> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_1>
            expression <RULE_EXPR_1>
            next-item ${prefix}_<RULE_NEXT_1>
        }":""}]{
            caption <RULE_CAPTION_0>
            next-item ${prefix}_<RULE_NEXT_0>
        }}"
    }

    # 2nd round apm string map
    set default_map_2 {
        <ITEM> [expr { $item eq {default} ? "$prefix" : "${prefix}_$item" }]
        <PREFIX> $prefix
        <LOCAL_PATH> [string map {/ :} $prefix]
        <GROUP_DEF> ""
        <AGENT_TYPE> "resource-assign"
        <RULE_CAPTION_2> "successful"
        <RULE_CAPTION_1> "Successful"
        <RULE_CAPTION_0> "fallback"
    }

    # Build APM access profile and access-policy from the access_form.
    # Tags <ACCESS_ITEM> and <ACCESS_ENDING> are picked up from
    # $map_array items. <ITEM> and <GROUP_DEF> are picked up from
    # $default_map_2.
    foreach item [lsort [array names map_array]] {

        # Pick up the <ACCESS_ENDING> tag. There should be just 1.
        set access_form [string map $map_array($item) $access_form]

        # Filter out items that do not belong in the access-policy.
        # Anything with an ITEM_xxx tag belongs
        if { [string first <ITEM_ $map_array($item)] == -1 } {
            continue
        }

        # Add to the items list for the access-policy, e.g. priority
        append access_items "        ${prefix}_$item {<ACCESS_ITEM>}\n"
        set access_items [string map $map_array($item) $access_items]
        set access_items [string map [subst $default_map_1] $access_items]
    }

    # Build APM resources, policy-items, agents, and customization-groups from
    # the policy_item_form and resource_form.
    foreach item [lsort [array names map_array]] {

        # Each item starts as a profile, a resource, or a policy-item.
        # Profiles are free-form, so other apm objects can use the profile form.
        # In most cases, a policy-item spawns an agent.
        # Any definition specifying a customization-group will spawn that group.
        if { [string first "<PROFILE_DEF>" $map_array($item)] != -1 } {

            # Collect profile names for attachment to the virtual server
            if { [string first "apm profile " $map_array($item)] != -1 } {
                lappend profiles [expr { $item eq {default}
                                 ? "$prefix" : "${prefix}_$item" }]
                # When an access profile is found, built a policy of the same name
                if { [string first "apm profile access" $map_array($item)] != -1 } {
                    set def [string map "<ACCESS_ITEMS> {$access_items}" $access_form]
                    append cmds "[string map [subst $default_map_2] $def]\n"
                }
            }
            set def $profile_form
        } elseif { [string first "<RESOURCE_DEF>" $map_array($item)] != -1 } {
            set def $resource_form
        } else {
            set def $policy_item_form
            if { [string first "<ITEM_AGENT> {}" $map_array($item)] == -1 } {
                append def $agent_form
            }
        }

        # Apply 1st pass of string maps
        set def [string map $map_array($item) $def]
        set def [string map [subst $default_map_1] $def]

        # If a customization-group is specified, add its definition
        if { [string first "customization-group" $def] != -1 } {
            if { [string first "apm policy agent" $def] != -1 } {
                append def $agent_group_form
            } elseif { [string first "apm profile access" $def] == -1 } {
                append def $group_form
            }
        }

        # Apply 2nd pass of string maps
        set def [string map $map_array($item) $def]
        append cmds [string map [subst $default_map_2] $def]
    }

    # Divide and execute tmsh commands
    set tag "<TMSH_CREATE>"
    set tag_length [string length $tag]
    set last [expr { [string first $tag $cmds] + $tag_length }]
    while { [set pos [string first $tag $cmds $last]] != -1 } {
        incr pos -1
        iapp_conf create [string range $cmds $last $pos]
        set last [expr { $pos + $tag_length + 1 }]
    }
    iapp_conf create [string range $cmds $last end]
    return $profiles
}
[END]


sys application template %(key)s [BEGIN]
    actions {
        definition {
            html-help {
<p><b>Citrix VDI iApp Template</b></p>

<p>For improved readability, click the <b>Launch</b> button to view the Help guidelines in a resizable window.</p>

<p>This template creates a complete configuration optimized for managing traffic associated with Citrix XenApp or XenDesktop implementations. <br> Before you start: </p>
<ul>
    <li>For detailed information and help using this iApp, see www.f5.com/pdf/deployment-guides/xenapp-xendesktop-iapp-dg.pdf</li>
    <li>Set up VLANs and self IP addresses on the networks you will use for client-side and server-side traffic.</li>
    <li>Import the proper SSL certificates that correspond to the DNS names used by the clients.</li>
    <li>If deploying Access Policy Manager (APM) features, including Edge Gateway, you must fully license and provision APM before starting the template.</li>
    <li>For APM or Edge Gateway, you must configure the BIG-IP device to use a DNS server that is able to resolve names in your Active Directory domain(s). You must also configure an NTP time source for the BIG-IP device and your domain controller(s) so their times are closely synchronized. See the Deployment Guide for specific instructions.  </li>
    </ul>
    <p>Some of the options in the iApp, and their associated help entries appear depending on your selections. Ignore help entries for options you do not see while configuring the iApp template. </p>

            }
        implementation {
tmsh::include f5.iapp.1.4.0.cli
iapp_template start

proc xml_file { type } {

    if { $type == "logon" } {
        set xml {<?xml version="1.0" encoding="utf-8"?>
          <customization_group name="default_0" type="0">
          <item language="en">
            <form_header>Logon &lt;br&gt; for F5 Network</form_header>
            <logon_field_1>Username</logon_field_1>
            <logon_field_2>Password</logon_field_2>
            <logon_field_3>$::apm__rsa_token_field</logon_field_3>
            <logon_field_4>Field 4</logon_field_4>
            <logon_field_5>Field 5</logon_field_5>
            <logon>Logon</logon>
            <front_image>/public/images/my/tr.gif</front_image>
            <save_password>Save Password</save_password>
            <new_password>New Password</new_password>
            <verify_password>Verify Password</verify_password>
            <wrong_match>Password and confirmation do not match.</wrong_match>
            <http_401_response>Authentication required to access the resources.</http_401_response>
            <dont_change_password>Do not change password</dont_change_password>

            <image00>/public/images/my/tr.gif</image00>
            <image01>/public/images/my/tr.gif</image01>
            <image02>/public/images/my/tr.gif</image02>
            <image03>/public/images/my/tr.gif</image03>
            <image04>/public/images/my/tr.gif</image04>
            <image05>/public/images/my/tr.gif</image05>
            <image06>/public/images/my/tr.gif</image06>
            <image07>/public/images/my/tr.gif</image07>
            <image08>/public/images/my/tr.gif</image08>
            <image09>/public/images/my/tr.gif</image09>
          </item>
          </customization_group>
        }
    } else {
        # type == "resource_remote_desktop_1", 2, 3, etc.
        set i [string range $type [expr { [string last "_" $type] + 1 }] end]
        set ext [expr { $i == 1 ? "" : "_$i" }]
        set xml {<?xml version="1.0" encoding="utf-8"?>
          <customization_group name="default_resource_remote_desktop" type="resource_remote_desktop">
          <item language="en">
            <description></description>
            <image>/public/images/full_wt/terminal_service.png</image>
            <caption>[set ::xml_broker_pool${ext}__caption]</caption>
          </item>
          </customization_group>
        }
    }

    set partition [lindex [split [tmsh::pwd] /] 1]
    set location "/config/filestore/files_d/${partition}_d/customization_group_d"
    set filepath "$location/:${partition}:${tmsh::app_name}.app:${tmsh::app_name}_${type}"

    if { $::is_admin } {
        file mkdir $location
        set fh [open $filepath w]
        puts $fh [subst $xml]
        close $fh
    }
    return $filepath
}

array set apm_map {
    default {
        <PROFILE_TYPE> {apm profile access}
        <GROUP_DEF> {type logout }
        <PROFILE_DEF> "accept-languages replace-all-with { en }
            access-policy <ITEM>
            defaults-from /Common/access
            customization-group <ITEM>_logout
            eps-group <ITEM>_eps
            errormap-group <ITEM>_errormap
            framework-installation-group <ITEM>_frameworkinstallation
            general-ui-group <ITEM>_general_ui
            sso-name <SSO>
            logout-uri-include <LOGOUT_URI>
            <LOG_SETTINGS>
            <SANDBOXES>" }
    connect {
        <PROFILE_TYPE> {apm profile connectivity}
        <GROUP_DEF> {type secure-access-client }
        <PROFILE_DEF> "customization-group <ITEM>
                       citrix-client-bundle <CLIENT_BUNDLE>
                       defaults-from /Common/connectivity" }
    sso_kerberos {
        <PROFILE_TYPE> {apm sso kerberos}
        <PROFILE_DEF>  "account-name <SMARTCARD_USER>
                        account-password \"<SMARTCARD_PASS>\"
                        realm <REALM>
                        kdc \"<SMARTCARD_KDC>\"
                        username-source session.logon.last.username" }
    sso_form_based {
        <PROFILE_TYPE> {apm sso form-based}
        <PROFILE_DEF>  "passthru true
            form-action <CUSTOM_URI><FORM_ACTION_DIR>/LoginAttempt
            form-field \"LoginBtn Log+On\nStateContext \"
            form-password password
            form-username username
            start-uri <CUSTOM_URI><START_URI_DIR>/Login*
            success-match-type cookie
            success-match-value CtxsAuthId" }
    sso_form_basedv2 {
        <PROFILE_TYPE> {apm sso form-basedv2}
        <PROFILE_DEF>  "forms replace-all-with { iapp {
            controls replace-all-with {
                domain { value <DOMAIN> }
                password { secure true
                       value \"%{session.sso.token.last.password}\" }
                user { value \"%{session.sso.token.last.username}\" }}
            request-value <CUSTOM_URI>auth/login.aspx
            attribute-value login.aspx
            id-type action
            success-match-type url
            success-match-value <CUSTOM_URI>site/default.aspx }}"}
    ent {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"Start"}
        <ITEM_TYPE> {}
        <RULE_NEXT_0> <ENT_NEXT> }
    act_ondemand_cert_auth {
        <AGENT_TYPE> aaa-client-cert
        <AGENT_DEF> "mode require"
        <ITEM_CAPTION> {"On-Demand Cert Auth"}
        <RULE_EXPR_1> {"expr {[mcget {session.ssl.cert.valid}] == \"0\"}"}
        <RULE_NEXT_1> act_irule_event
        <RULE_NEXT_0> end_deny }
    act_irule_event {
        <AGENT_TYPE> irule-event
        <AGENT_DEF> "id CERTPROC"
        <ITEM_CAPTION> {"iRule Event CERTPROC"}
        <RULE_NEXT_0> <IRULE_NEXT> }
    act_irule_event_1 {
        <AGENT_TYPE> irule-event
        <AGENT_DEF> "id SAMNAME"
        <ITEM_CAPTION> {"iRule Event SAMNAME"}
        <RULE_NEXT_0> variable_assign }
    act_active_directory_query {
        <AGENT_TYPE> aaa-active-directory
        <AGENT_DEF> "query-attrname replace-all-with { sAMAccountName }
                     query-filter \"userPrincipalName=%{session.custom.certupn}\"
                     server <MAIN_AAA>
                     type query"
        <ITEM_CAPTION> {"AD Query"}
        <RULE_NEXT_0> <AD_QUERY_NEXT> }
    client_precheck {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"Client Pre-Check"}
        <RULE_CAPTION_1> {"Browser or Citrix Receiver"}
        <RULE_EXPR_1> {"expr { [mcget {session.ui.mode}] == 0 || [mcget {session.ui.mode}] == 9 || [mcget {session.ui.mode}] == 6 || [mcget {session.client.type}] == \"citrix-agee\" || [mcget {session.client.type}] == \"citrix-pnagent\" }"}
        <RULE_NEXT_1> <PRECHECK_NEXT>
        <RULE_NEXT_0> end_deny }
    client_precheck_1 {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"Client Pre-Check"}
        <RULE_CAPTION_2> {"Receiver"}
        <RULE_EXPR_2> {"expr { [mcget {session.ui.mode}] == 10 || [mcget {session.client.type}] == \"citrix-pnagent\" }"}
        <RULE_NEXT_2> act_logon
        <RULE_CAPTION_1> {"Browser"}
        <RULE_EXPR_1> {"expr { [mcget {session.ui.mode}] == 0 || [mcget {session.ui.mode}] == 9 || [mcget {session.ui.mode}] == 6 }"}
        <RULE_NEXT_1> logon
        <RULE_NEXT_0> end_deny }
    logon {
        <AGENT_TYPE> logon-page
        <AGENT_DEF> "customization-group <ITEM>_ag <CUSTOM_LOGON>"
        <GROUP_DEF> "<CUSTOM_LOGON_PATH>"
        <ITEM_CAPTION> {"Logon Page"}
        <RULE_NEXT_0> <LOGON_NEXT> }
    act_logon {
        <AGENT_TYPE> logon-page
        <AGENT_DEF> "<TWO_FACTOR>
            customization-group <ITEM>_ag
            type citrix
            field-type3 password
            post-var-name2 password
            sess-var-name2 password
            post-var-name3 password1
            sess-var-name3 password1"
        <GROUP_DEF> "type logon"
        <ITEM_CAPTION> {"Citrix Logon Prompt"}
        <RULE_NEXT_0> <ACT_LOGON_NEXT> }
    securid {
        <AGENT_TYPE> aaa-securid
        <AGENT_DEF> "server <RSA_AAA>"
        <ITEM_CAPTION> {"RSA SecurID"}
        <RULE_EXPR_1> {"expr {[mcget {session.securid.last.result}] == \"1\"}"}
        <RULE_NEXT_1> <SECURID_NEXT>
        <RULE_NEXT_0> end_deny }
    act_securid {
        <AGENT_TYPE> aaa-securid
        <AGENT_DEF> "server <RSA_AAA>"
        <ITEM_CAPTION> {"RSA SecurID - Client"}
        <RULE_EXPR_1> {"expr {[mcget {session.securid.last.result}] == \"1\"}"}
        <RULE_NEXT_1> act_variable_assign_1
        <RULE_NEXT_0> end_deny }
    password_variable_assign {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {{
            expression \"expr {[mcget {session.logon.last.password1}]}\"
            varname session.logon.last.password }}"
        <ITEM_CAPTION> {"Password Variable Assign"}
        <RULE_NEXT_0> <PWD_ASSIGN_NEXT> }
    password_variable_assign_1 {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"<DOMAIN>\\\"}\"
            varname session.logon.last.domain }{
            expression \"expr {[mcget {session.logon.last.password1}]}\"
            varname session.logon.last.password }}"
        <ITEM_CAPTION> {"Session Variable Assign"}
        <RULE_NEXT_0> act_active_directory_auth }
    act_variable_assign {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"<DOMAIN>\\\"}\"
            varname session.logon.last.domain }}"
        <ITEM_CAPTION> {"Session Variable Assign - Receiver"}
        <RULE_NEXT_0> act_active_directory_auth_1 }
    act_variable_assign_1 {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"<DOMAIN>\\\"}\"
            varname session.logon.last.domain }{
            expression \"expr {[mcget {session.logon.last.password1}]}\"
            varname session.logon.last.password }}"
        <ITEM_CAPTION> {"Session Variable Assign - Receiver"}
        <RULE_NEXT_0> act_active_directory_auth_1 }
    act_variable_assign_2 {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"1\\\"}\"
            varname session.citrix.client_auth_type }}"
        <ITEM_CAPTION> {"StoreFront Protocol Two-Factor Variable Assign"}
        <RULE_NEXT_0> logon }
    domain_variable_assign {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"<DOMAIN>\\\"}\"
            varname session.logon.last.domain }}"
        <ITEM_CAPTION> {"Domain Variable Assign"}
        <RULE_NEXT_0> act_active_directory_auth }
    domain_variable_assign_1 {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"<DOMAIN>\\\"}\"
            varname session.logon.last.domain }}"
        <ITEM_CAPTION> {"Session Variable Assign"}
        <RULE_NEXT_0> act_active_directory_auth }
    act_active_directory_auth {
        <AGENT_TYPE> aaa-active-directory
        <AGENT_DEF> "auth-max-logon-attempt 1
                     server <MAIN_AAA>
                     type auth"
        <ITEM_CAPTION> {"AD Authentication"}
        <RULE_EXPR_1> {"expr {[mcget {session.ad.last.authresult}] == \"1\"}"}
        <RULE_NEXT_1> <AD_AUTH_NEXT>
        <RULE_NEXT_0> end_deny }
    act_active_directory_auth_1 {
        <AGENT_TYPE> aaa-active-directory
        <AGENT_DEF> "auth-max-logon-attempt 1
                     server <MAIN_AAA>
                     type auth"
        <ITEM_CAPTION> {"AD Authentication - Receiver"}
        <RULE_EXPR_1> {"expr {[mcget {session.ad.last.authresult}] == \"1\"}"}
        <RULE_NEXT_1> act_sso_credential_mapping
        <RULE_NEXT_0> end_deny }
    sso_credential_mapping {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "type sso-cred-mapping
            variables {{
            expression \"<SSO_EXPRESSION>\"
            varname session.sso.token.last.username }{
            expression \"mcget {session.logon.last.password}\"
            varname session.sso.token.last.password }}"
        <ITEM_CAPTION> {"SSO Credential Mapping"}
        <RULE_NEXT_0> <SSO_NEXT> }
    act_sso_credential_mapping {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "type sso-cred-mapping
            variables {{
            expression \"<SSO_EXPRESSION>\"
            varname session.sso.token.last.username }{
            expression \"mcget {session.logon.last.password}\"
            varname session.sso.token.last.password }}"
        <ITEM_CAPTION> {"SSO Credential Mapping - Receiver"}
        <RULE_NEXT_0> end_allow }
    full_resource_assign {
        <AGENT_TYPE> resource-assign
        <AGENT_DEF> "rules {{
                     remote-desktop-resources replace-all-with {<DESKTOPS>}
                     webtop <PREFIX>_webtop }}"
        <ITEM_CAPTION> {"Full Resource Assign"}
        <RULE_NEXT_0> end_allow }
    variable_assign {
        <AGENT_TYPE> variable-assign
        <AGENT_DEF> "variables {<STA_EXPRESSION>{
            expression \"expr {\\\"<REALM>\\\"}\"
            varname session.logon.last.domain }}"
        <ITEM_CAPTION> {"<STA_CAPTION>Variable Assign"}
        <RULE_NEXT_0> <VAR_ASSIGN_NEXT> }
    client_postcheck {
        <ITEM_AGENT> {}
        <ITEM_CAPTION> {"Client Post-Check"}
        <RULE_CAPTION_2> {"Citrix Receiver"}
        <RULE_EXPR_2> {"expr { [mcget {session.client.type}] == \"citrix-agee\" || [mcget {session.client.type}] == \"citrix-pnagent\" }"}
        <RULE_NEXT_2> end_allow
        <RULE_CAPTION_1> {"Full or Mobile Browser"}
        <RULE_EXPR_1> {"expr { [mcget {session.ui.mode}] == 0 || [mcget {session.ui.mode}] == 9 || [mcget {session.ui.mode}] == 6 }"}
        <RULE_NEXT_1> end_allow
        <RULE_NEXT_0> end_deny }
    end_redirect {
        <AGENT_DEF> "close-session false
                     url \"https://%{session.server.network.name}<CUSTOM_URI>\""
        <AGENT_TYPE> ending-redirect
        <ITEM_CAPTION> {"Allow and Redirect"}
        <ITEM_TYPE> {item-type ending}
        <ITEM_RULES> {} }
    end_allow {
        <AGENT_DEF> {}
        <AGENT_TYPE> ending-allow
        <ITEM_CAPTION> {"Allow"}
        <ITEM_TYPE> {item-type ending}
        <ITEM_RULES> {} }
    end_deny {
        <ACCESS_START_ITEM> <PREFIX>_ent
        <ACCESS_ENDING> <PREFIX>_end_deny
        <AGENT_TYPE> ending-deny
        <GROUP_DEF> {type logout }
        <ITEM_CAPTION> {"Deny"}
        <ITEM_TYPE> {item-type ending}
        <ITEM_COLOR> {2}
        <ITEM_RULES> {} }
    webtop {
        <RESOURCE_TYPE> webtop
        <GROUP_DEF> {type webtop }
        <RESOURCE_DEF> "customization-group <ITEM>
                        minimize-to-tray false
                        webtop-type full" }
    remote_desktop_1 {
        <RESOURCE_TYPE> {remote-desktop citrix}
        <GROUP_DEF> "type resource-remote-desktop
                     <CUSTOM_DESKTOP_PATH_1>"
        <RESOURCE_DEF> "customization-group <ITEM>
                        auto-logon enabled
                        <BROKER_DEF_1>" }
    remote_desktop_2 {
        <RESOURCE_TYPE> {remote-desktop citrix}
        <GROUP_DEF> "type resource-remote-desktop
                     <CUSTOM_DESKTOP_PATH_2>"
        <RESOURCE_DEF> "customization-group <ITEM>
                        auto-logon enabled
                        <BROKER_DEF_2>" }
    remote_desktop_3 {
        <RESOURCE_TYPE> {remote-desktop citrix}
        <GROUP_DEF> "type resource-remote-desktop
                     <CUSTOM_DESKTOP_PATH_3>"
        <RESOURCE_DEF> "customization-group <ITEM>
                        auto-logon enabled
                        <BROKER_DEF_3>" }
    remote_desktop_4 {
        <RESOURCE_TYPE> {remote-desktop citrix}
        <GROUP_DEF> "type resource-remote-desktop
                     <CUSTOM_DESKTOP_PATH_4>"
        <RESOURCE_DEF> "customization-group <ITEM>
                        auto-logon enabled
                        <BROKER_DEF_4>" }
    remote_desktop_5 {
        <RESOURCE_TYPE> {remote-desktop citrix}
        <GROUP_DEF> "type resource-remote-desktop
                     <CUSTOM_DESKTOP_PATH_5>"
        <RESOURCE_DEF> "customization-group <ITEM>
                        auto-logon enabled
                        <BROKER_DEF_5>" }
    client_bundle {
        <RESOURCE_TYPE> {remote-desktop citrix-client-bundle}
        <RESOURCE_DEF>  {download-url <CLIENT_BUNDLE_URL>}}
}

array set irule {
smartcard_same_upn_replace { [iapp_conf create ltm rule ${app}_smartcard {
# iRule used with Citrix Web Integration or Web Replacement configuration were the certificate uses the same UPN as Citrix Environment
when RULE_INIT {
    # set static::<APP>_DEBUG 1 to enable logging
    set static::<APP>_DEBUG 0
}
# Capture certificate payload and add auto ctrl-alt-delete into payload ("SSLEnable=On\r\nDisableCtrlAltDel=Off\r\n")
when HTTP_RESPONSE_DATA priority 501 {
    if { [string tolower [HTTP::header Content-Type]] contains "application/x-ica" } {
        set payload [ regsub -nocase -line {^SSLEnable=On.*\\n} [HTTP::payload] "SSLEnable=On\r\nDisableCtrlAltDel=Off\r\n" ]
        HTTP::payload replace 0 [HTTP::header Content-Length] $payload
    }
}
# When Access policy event (see VPE) with id "CERTPROC" occurs, certificates universal principle name is extracted from Subject Alternative Name into format user@domain
# Session variable session.logon.last.username is set by parsing before @ symbol
# Session variable session.logon.last.domain is set by parsing after @ symbol
# Enable Debug to verify session variable values are correct, log entry will append to /var/log/ltm
when ACCESS_POLICY_AGENT_EVENT {
    switch [ACCESS::policy agent_id] {
        "CERTPROC" {
            if { [ACCESS::session data get session.ssl.cert.x509extension] contains "othername:UPN<" } {
                ACCESS::session data set session.logon.last.username [lindex [split [findstr [ACCESS::session data get session.ssl.cert.x509extension] "othername:UPN<" 14 ">"] "@"] 0]
                ACCESS::session data set session.logon.last.domain [lindex [split [findstr [ACCESS::session data get session.ssl.cert.x509extension] "othername:UPN<" 14 ">"] "@"] 1]
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, Certificate extension equals: [ACCESS::session data get session.ssl.cert.x509extension]"}
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, User name set as: [ACCESS::session data get session.logon.last.username]"}
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, Domain name set as: [ACCESS::session data get session.logon.last.domain]"}
            }
        }
    }
}}]}

smartcard_same_upn_do_not_replace { [iapp_conf create ltm rule ${app}_smartcard {
# iRule used with Citrix Web Integration or Web Replacement configuration were the certificate uses the same UPN as Citrix Environment
when RULE_INIT {
    # set static::<APP>_DEBUG 1 to enable logging
    set static::<APP>_DEBUG 0
}
# Capture certificate payload and add auto ctrl-alt-delete into payload ("SSLEnable=On\r\nDisableCtrlAltDel=Off\r\n")
when HTTP_RESPONSE_DATA priority 501 {
    if { [string tolower [HTTP::header Content-Type]] contains "application/x-ica" } {
        set payload [ regsub -nocase -line {^SSLEnable=On.*\\n} [HTTP::payload] "SSLEnable=On\r\nDisableCtrlAltDel=Off\r\n" ]
        HTTP::payload replace 0 [HTTP::header Content-Length] $payload
    }
}
# When Access policy event (see VPE) with id "CERTPROC" occurs, certificates universal principle name is extracted from Subject Alternative Name into format user@domain
# Session variable session.logon.last.username is set by parsing before @ symbol
# Session variable session.logon.last.domain is set by parsing after @ symbol
# Enable Debug to verify session variable values are correct, log entry will append to /var/log/ltm
when ACCESS_POLICY_AGENT_EVENT {
    switch [ACCESS::policy agent_id] {
        "CERTPROC" {
            if { [ACCESS::session data get session.ssl.cert.x509extension] contains "othername:UPN<" } {
                ACCESS::session data set session.logon.last.username [lindex [split [findstr [ACCESS::session data get session.ssl.cert.x509extension] "othername:UPN<" 14 ">"] "@"] 0]
                ACCESS::session data set session.logon.last.domain [lindex [split [findstr [ACCESS::session data get session.ssl.cert.x509extension] "othername:UPN<" 14 ">"] "@"] 1]
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, Certificate extension equals: [ACCESS::session data get session.ssl.cert.x509extension]"}
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, User name set as: [ACCESS::session data get session.logon.last.username]"}
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, Domain name set as: [ACCESS::session data get session.logon.last.domain]"}
            }
        }
    }
}
when ACCESS_ACL_ALLOWED {
    set type [ACCESS::session data get session.client.type]
    if { !($type starts_with "citrix") } {
        if { [HTTP::uri] == "/" } {
            log local0. "Redirecting to <CUSTOM_URI>"
            ACCESS::respond 302 Location "https://[HTTP::host]<CUSTOM_URI>"
        }
    }
}}]}

smartcard_different_upn_replace { [iapp_conf create ltm rule ${app}_smartcard {
# iRule used with Citrix Web replacement configuration were the certificate uses a different UPN than Citrix Environment
when RULE_INIT {
    # set static::<APP>_DEBUG 1 to enable logging
    set static::<APP>_DEBUG 0
}
# When Access policy event (see VPE) with id "CERTPROC" occurs, certificates universal principle name is parsed from Subject Alternative Name into format user@domain
# Session variable session.custom.certupn is set to parsed UPN. Variable is then used in ad query (see VPE) to acquire sAMAccount attribute in AD
# Enable Debug to verify variable value is correct, log entry will append to /var/log/ltm
# When Access policy event (see VPE) with id "SAMNAME" occurs, variable session.logon.last.username is set to returned AD sAMAccountName
# Enable Debug to verify returned sAMAcount name
# session.logon.last.username is used to logon to xml broker or DDC (defined in Citrix Remote desktop profile) using SID Enumeration
when ACCESS_POLICY_AGENT_EVENT {
    switch [ACCESS::policy agent_id] {
        "CERTPROC" {
            if { [ACCESS::session data get session.ssl.cert.x509extension] contains "othername:UPN<" } {
                ACCESS::session data set session.custom.certupn [findstr [ACCESS::session data get session.ssl.cert.x509extension] "othername:UPN<" 14 ">"]
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, Subject Alternative Name returned in cert: [ACCESS::session data get session.custom.certupn]"}
            }
        }
        "SAMNAME" {
            ACCESS::session data set session.logon.last.username [ACCESS::session data get "session.ad.last.attr.sAMAccountName"]
            if {$static::<APP>_DEBUG} {log local0. "Event SAMNAME, Active Directory sAMAcount name is: [ACCESS::session data get session.logon.last.username]"}
        }
    }
}}]}

smartcard_different_upn_do_not_replace { [iapp_conf create ltm rule ${app}_smartcard {
# iRule used with Citrix Web Intergration or StoreFront Intergration configuration were the certificate uses a different UPN than the Citrix Environment
when RULE_INIT {
    # set static::<APP>_DEBUG 1 to enable logging
    set static::<APP>_DEBUG 0
}
# Capture certificate payload and add auto ctrl-alt-delete into payload ("SSLEnable=On\r\nDisableCtrlAltDel=Off\r\n")
when HTTP_RESPONSE_DATA priority 501 {
    if { [string tolower [HTTP::header Content-Type]] contains "application/x-ica" } {
        set payload [ regsub -nocase -line {^SSLEnable=On.*\\n} [HTTP::payload] "SSLEnable=On\r\nDisableCtrlAltDel=Off\r\n" ]
        HTTP::payload replace 0 [HTTP::header Content-Length] $payload
    }
}
# Enable Debug to verify returned sAMAcount name
when ACCESS_ACL_ALLOWED {
    ACCESS::session data set session.logon.last.username [ACCESS::session data get "session.ad.last.attr.sAMAccountName"]
    if {$static::<APP>_DEBUG} {log local0. "Access policy has finished and user is allowed, sAMAcount name set as: [ACCESS::session data get session.logon.last.username]"}
    set type [ACCESS::session data get session.client.type]
    if { !($type starts_with "citrix") } {
        if { [HTTP::uri] == "/" } {
            log local0. "Redirecting to <CUSTOM_URI>"
            ACCESS::respond 302 Location "https://[HTTP::host]<CUSTOM_URI>"
        }
    }
}
# Session variable session.custom.certupn is set to extracted UPN. Variable is then used in ad query (see VPE) to acquire sAMAccount attribute in AD
# Enable Debug to verify sesion variable values are correct, log entry will append to /var/log/ltm
when ACCESS_POLICY_AGENT_EVENT {
    switch [ACCESS::policy agent_id] {
        "CERTPROC" {
            if { [ACCESS::session data get session.ssl.cert.x509extension] contains "othername:UPN<" } {
                ACCESS::session data set session.custom.certupn [findstr [ACCESS::session data get session.ssl.cert.x509extension] "othername:UPN<" 14 ">"]
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, Certificate extension equals: [ACCESS::session data get session.ssl.cert.x509extension]"}
                if {$static::<APP>_DEBUG} {log local0. "Event CERTPROC, certupn equals: [ACCESS::session data get session.custom.certupn]"}
            }
        }
    }
}}]}

allow_and_redirect { [iapp_conf create ltm rule ${app}_allow_and_redirect {
when ACCESS_ACL_ALLOWED {
    set type [ACCESS::session data get session.client.type]
    if { !($type starts_with "citrix") } {
        if { [HTTP::uri] == "/" } {
            log local0. "Redirecting to <CUSTOM_URI>"
            ACCESS::respond 302 Location "https://[HTTP::host]<CUSTOM_URI>"
        }
    }
}}]}

redirect { [expr { !$advanced || $::webui_virtual__redir_port == 80 \
    ? "_sys_https_redirect" \
    : [iapp_conf create ltm rule ${app}_redirect [string map \
      "<PORT> $::webui_virtual__redir_port" {
when HTTP_REQUEST {
    HTTP::redirect https://[getfield [HTTP::host] : 1]:<PORT>[HTTP::uri]
}}]]}]}

loggedout { [iapp_conf create ltm rule ${app}_loggedout {
when ACCESS_ACL_ALLOWED {
    if {[HTTP::uri] contains "<URI>" } {
        after 2000 { ACCESS::session remove }
    }
}}]}
}

set app             $tmsh::app_name
set is_admin        [iapp_get_user -is_admin]
set is_v11_4        [iapp_tmos_version >= 11.4]
set is_v11_5        [iapp_tmos_version >= 11.5]
set is_v11_6        [iapp_tmos_version >= 11.6]
set is_v12_0        [iapp_tmos_version >= 12.0]

set is_v11_6_HF5_not_12_0 0
if { [iapp_tmos_version == 11.6] } {
    regsub {.*Edition } [tmsh::show sys version] "" edition
    regsub {\n.*} $edition "" edition
    set pos [string first "HF" $edition]
    if { $pos > 0 } {
        set hotfix [string range $edition [expr { $pos + 2 }] end]
        if { $hotfix > 4 } {
            set is_v11_6_HF5_not_12_0 1
        }
    }
}

set lb_lcm_licensed [expr {[string first ltm_lb_least_conn  [tmsh::show sys license detail]] != -1}]
set cookie_licensed [expr {[string first ltm_persist_cookie [tmsh::show sys license detail]] != -1}]
set allow_afm       [expr { $is_admin && $is_v11_4 && [iapp_get_provisioned afm]}]
set apm_provisioned [iapp_get_provisioned apm]
set is_apm_scenario [expr { $apm_provisioned && [iapp_is ::general__scenario "apm_scenario"]}]
set is_lb_scenario  [expr { !$apm_provisioned || [iapp_is ::general__scenario "lb_scenario"]}]
set advanced        [iapp_is ::general__config_mode "advanced"]

set do_smartcard    [expr { $is_apm_scenario && \
                    [iapp_is ::apm__smartcard "Yes"] }]
set do_rsa          [expr { $is_apm_scenario && !$do_smartcard && $is_admin && \
                    [iapp_is ::apm__rsa "Yes"] }]
set replace_webtop  [expr { $is_apm_scenario && \
                    ( $is_v11_4 || !$do_smartcard ) && \
                    [iapp_is ::apm__replace_webui_question "replace"] }]
set legacy_windows  [expr { !$is_v11_4 && \
                    [iapp_is ::apm__replace_webui_question "replace"] }]
set do_cloud        [expr { !$replace_webtop && \
                    ![iapp_is ::webui_virtual__cloud "0"] }]
set farm_count      [expr { $replace_webtop && $advanced ? \
                    "$::xml_broker_virtual__xml_farms" : "1" }]
set xmlb_encrypted  [iapp_is ::xml_broker_virtual__encrypted "encrypted"]
set webui_reencrypt [expr { ( $replace_webtop && $xmlb_encrypted ) || \
                    ( !$replace_webtop && \
                    [iapp_is ::webui_virtual__reencrypt_traffic "reencrypt"] )}]
set uri             [expr { !$replace_webtop
                    ? [string map {/// / // /} "/$::webui_virtual__custom_uri/"] : "" }]
set pre_proc_map    { <DOMAIN> "$::general__domain_name" }


# APM
if { $is_apm_scenario } {
    set apm_map(prefix) [tmsh::pwd]/$app
    set desktops ""

    # Template supports up to 5 server farms. A citrix remote-desktop
    # object is created for each one here, and a list of the object
    # names is then attached to an apm "resource-assign" object.
    for { set i 1 } { $i <= 5 } { incr i } {
        if { $replace_webtop && ( $i <= $farm_count ) } {
            set ext [expr { $i == 1 ? "" : "_$i" }]
            append desktops "<PREFIX>_remote_desktop_$i "
            if { !$is_admin || [set ::xml_broker_pool${ext}__caption] == "" } {
                append pre_proc_map " <CUSTOM_DESKTOP_PATH_$i> \"\" "
            } else {
                append pre_proc_map " <CUSTOM_DESKTOP_PATH_$i> \"local-path [xml_file resource_remote_desktop_$i]\" "
            }
        } else {
            unset -nocomplain apm_map(remote_desktop_$i)
        }
    }
    append pre_proc_map { <DESKTOPS> "$desktops"
                          <CUSTOM_URI> "$uri" }

    if { $is_v12_0 } {
        if { $::apm__logging == "/#do_not_use#" } {
            append pre_proc_map { <LOG_SETTINGS> "log-settings none" }
        } else {
            append pre_proc_map { <LOG_SETTINGS> "log-settings replace-all-with \{ $::apm__logging \}" }
        }
    } else {
        append pre_proc_map { <LOG_SETTINGS> "" }
    }

    # AAA POOL AND MONITOR
    if { !$do_smartcard || [iapp_is ::apm__smartcard_upn "No"] } {

        set ad_secure_ssl [iapp_is ::apm__ad_secure "ssl"]

        # array keys: $advanced,$ad_secure_ssl
        array set aaa_port {
            0,0  "389"
            0,1  "636"
            1,0  "$::apm__ad_port_not_ssl"
            1,1  "$::apm__ad_port_ssl"
        }

        # array keys: $::apm__ad_monitor
        array set aaa_monitor {
            ad_create { monitor [iapp_conf create ltm monitor ldap ${app}_ldap \
                base \"$::apm__ad_tree\" \
                chase-referrals yes \
                debug no \
                defaults-from ldap \
                destination *:[subst $aaa_port($advanced,$ad_secure_ssl)] \
                filter cn=\"$::apm__ad_user\" \
                interval [expr { $advanced ? $::apm__ad_interval : "10" }] \
                timeout [expr {$advanced ? ($::apm__ad_interval * 3 + 1):"31"}] \
                mandatory-attributes no \
                password [iapp_make_safe_password "$::apm__ad_password"] \
                security $::apm__ad_secure \
                time-until-up 0 \
                username \"cn=$::apm__ad_user,$::apm__ad_tree\"] }
            ad_icmp   { monitor [iapp_conf create ltm monitor gateway-icmp ${app}_icmp \
                defaults-from gateway_icmp \
                interval 5 \
                timeout 16] }
            ad_none   { monitor none }
            *         { monitor $::apm__ad_monitor }
        }

        # This suffix is built as a workaround for BZ527690 that requires unique
        # irule and pool names during app config changes.
        set bz [expr { [iapp_is ::apm__ad_monitor ad_none] ? "1" : "" }]

        set aaa_pool { [iapp_conf create ltm pool ${app}_aaa$bz \
            [iapp_pool_members $::apm__active_directory_server -port any] \
            load-balancing-mode "round-robin" \
            [iapp_substa aaa_monitor($::apm__ad_monitor)] \
            min-active-members 1] }

        set new_aaa [expr { [iapp_is ::apm__aaa_profile "/#create_new#"] }]
        set allow_anonymous [iapp_is ::::apm__allow_anonymous_binding \
            "anonymous_allowed"]

        # array keys: $new_aaa
        array set apm_aaa {
            1 { [iapp_conf create apm aaa active-directory ${app}_aaa \{ \
                admin-encrypted-password \
                [expr { $allow_anonymous \
                ? "none" : "[iapp_make_safe_password \
                "$::apm__active_directory_password"]" }] \
                admin-name [expr { $allow_anonymous \
                ? "none" \
                : "\"$::apm__active_directory_username\"" }] \
                domain $::apm__login_domain \
                domain-controllers \
                [iapp_pool_members -aaa_domain -fields { host host } \
                $::apm__active_directory_server] \
                pool [subst $aaa_pool] \}]}
            0 { $::apm__aaa_profile }
        }
        append pre_proc_map { <MAIN_AAA> "[subst $apm_aaa($new_aaa)]" }
    }

    # Apply logic to morph the APM config according to template choices
    if { $do_smartcard } {
        append pre_proc_map { <ENT_NEXT> act_ondemand_cert_auth
                              <STA_EXPRESSION> ""
                              <STA_CAPTION> "" }
        unset apm_map(sso_form_based) \
              apm_map(sso_form_basedv2) \
              apm_map(client_precheck) \
              apm_map(client_precheck_1) \
              apm_map(client_postcheck) \
              apm_map(logon) \
              apm_map(act_logon) \
              apm_map(securid) \
              apm_map(act_securid) \
              apm_map(password_variable_assign) \
              apm_map(password_variable_assign_1) \
              apm_map(act_variable_assign) \
              apm_map(act_variable_assign_1) \
              apm_map(act_variable_assign_2) \
              apm_map(sso_credential_mapping) \
              apm_map(act_sso_credential_mapping) \
              apm_map(domain_variable_assign) \
              apm_map(domain_variable_assign_1) \
              apm_map(act_active_directory_auth) \
              apm_map(act_active_directory_auth_1)
        if { $replace_webtop } {
            append pre_proc_map { <SSO> none
                                  <REALM> "$::general__domain_name" }
            unset apm_map(sso_kerberos)
        } else {
            append pre_proc_map { <SSO> "${app}_sso_kerberos"
                                  <SMARTCARD_USER> "$::apm__smartcard_user"
                                  <SMARTCARD_PASS> "[iapp_make_safe_password "$::apm__smartcard_password"]"
                                  <SMARTCARD_KDC> [expr { $::apm__smartcard_kdc == "" ? "none" : "$::apm__smartcard_kdc" }]
                                  <REALM> "[string toupper $::apm__smartcard_realm]" }
            unset apm_map(full_resource_assign) \
                  apm_map(webtop)
        }
        if { $::apm__smartcard_upn eq "Yes" } {
            append pre_proc_map { <AD_QUERY_NEXT> variable_assign }
            if { $replace_webtop } {
                append pre_proc_map { <IRULE_NEXT> full_resource_assign }
            } else {
                append pre_proc_map { <IRULE_NEXT> end_allow }
                                    # <IRULE_NEXT> end_redirect  see BZ475234
            }
            unset apm_map(variable_assign) \
                  apm_map(act_irule_event_1) \
                  apm_map(act_active_directory_query)
        } else {
            if { $replace_webtop } {
                append pre_proc_map { <VAR_ASSIGN_NEXT> full_resource_assign
                                      <AD_QUERY_NEXT> act_irule_event_1 }
            } else {
                append pre_proc_map { <VAR_ASSIGN_NEXT> end_allow
                                      <AD_QUERY_NEXT> variable_assign }
                                    # <VAR_ASSIGN_NEXT> end_redirect  see BZ475234
                unset apm_map(act_irule_event_1)
            }
            append pre_proc_map { <IRULE_NEXT> act_active_directory_query }
        }
    } else {
        # not smartcard
        append pre_proc_map { <REALM> "$::general__domain_name"
                              <AD_QUERY_NEXT> variable_assign
                              <VAR_ASSIGN_NEXT> client_postcheck }
        unset apm_map(sso_kerberos) \
              apm_map(act_ondemand_cert_auth) \
              apm_map(act_irule_event) \
              apm_map(act_irule_event_1) \
              apm_map(act_active_directory_query)
        if { $is_v12_0 && !$replace_webtop && ![iapp_is webui_virtual__cloud 0] } {
            append pre_proc_map { <ENT_NEXT> client_precheck_1
                                  <SECURID_NEXT> password_variable_assign_1
                                  <SSO_NEXT> end_allow }
            unset apm_map(client_precheck) \
                  apm_map(variable_assign) \
                  apm_map(act_variable_assign_2) \
                  apm_map(client_postcheck)
            if { $do_rsa } {
                unset apm_map(password_variable_assign) \
                      apm_map(domain_variable_assign_1)
            } else {
                unset apm_map(password_variable_assign) \
                      apm_map(password_variable_assign_1)
            }
        } else {
            append pre_proc_map { <ENT_NEXT> client_precheck
                                  <SECURID_NEXT> password_variable_assign
                                  <SSO_NEXT> variable_assign }
            unset apm_map(client_precheck_1) \
                  apm_map(act_logon) \
                  apm_map(act_securid) \
                  apm_map(password_variable_assign_1) \
                  apm_map(domain_variable_assign_1) \
                  apm_map(act_variable_assign) \
                  apm_map(act_variable_assign_1) \
                  apm_map(act_active_directory_auth_1) \
                  apm_map(act_sso_credential_mapping)
            # BZ556046 storefront support fix
            if { $is_v11_6_HF5_not_12_0 && !$replace_webtop && $do_rsa } {
                append pre_proc_map { <PRECHECK_NEXT> act_variable_assign_2 }
            } else {
                append pre_proc_map { <PRECHECK_NEXT> logon }
                unset apm_map(act_variable_assign_2)
            }
        }
        if { $do_rsa } {
            # make customizations to the APM logon box for securid
            if { $::apm__rsa_aaa eq "" } {
                error "Missing AAA server object"
            }
            append pre_proc_map { <RSA_AAA> "$::apm__rsa_aaa"
                                  <CUSTOM_LOGON> "
                                     post-var-name2 password1
                                     sess-var-name2 password1
                                     field-type3 password
                                     post-var-name3 password
                                     sess-var-name3 password"
                                  <CUSTOM_LOGON_PATH> "local-path [xml_file logon]"
                                  <TWO_FACTOR> "citrix-client-auth-type two-factor"
                                  <LOGON_NEXT> securid
                                  <ACT_LOGON_NEXT> act_securid }
            unset -nocomplain apm_map(act_variable_assign)
        } else {
            append pre_proc_map { <CUSTOM_LOGON> "
                                      post-var-name2 password
                                      sess-var-name2 password
                                      field-type3 none
                                      post-var-name3 field3
                                      sess-var-name3 field3"
                                  <CUSTOM_LOGON_PATH> "" }
            unset -nocomplain apm_map(securid) \
                              apm_map(act_securid) \
                              apm_map(act_variable_assign_1)
            if { $replace_webtop } {
                append pre_proc_map { <LOGON_NEXT> domain_variable_assign }
                unset apm_map(password_variable_assign)
            } else {
                if { $is_v12_0 && ![iapp_is webui_virtual__cloud 0] } {
                    append pre_proc_map { <TWO_FACTOR> "citrix-client-auth-type domain-only"
                                          <LOGON_NEXT> domain_variable_assign_1
                                          <ACT_LOGON_NEXT> act_variable_assign }
                } else {
                    append pre_proc_map { <LOGON_NEXT> act_active_directory_auth }
                    unset apm_map(password_variable_assign)
                }
            }
        }
        if { $replace_webtop } {
            append pre_proc_map { <AD_AUTH_NEXT> full_resource_assign
                                  <PWD_ASSIGN_NEXT> domain_variable_assign
                                  <SSO> none
                                  <STA_EXPRESSION> ""
                                  <STA_CAPTION> "" }
            unset apm_map(sso_credential_mapping) \
                  apm_map(sso_form_based) \
                  apm_map(sso_form_basedv2) \
                  apm_map(variable_assign) \
                  apm_map(client_postcheck)
        } else {
            set urls [expr { $advanced && [info exists ::webui_virtual__sta] ? $::webui_virtual__sta : "" }]
            set urls [split [string map {\{ "" \} ""} $urls] "\n"]
            set sta_urls ""
            foreach url $urls {
                set url [string range [string trim $url] 4 end]
                if { $url != "" } {
                    append sta_urls "$url;"
                }
            }
            set sta_urls [string range $sta_urls 0 end-1]
            if { $sta_urls != "" } {
                append pre_proc_map {
                    <STA_EXPRESSION> "{ expression \\\\\\\"expr {\\\\\\\\\\\\\\\"$sta_urls\\\\\\\\\\\\\\\"}\\\\\\\"
    varname session.citrix.sta_servers }"
                    <STA_CAPTION> "STA and "}
            } else {
                append pre_proc_map {
                    <STA_EXPRESSION> ""
                    <STA_CAPTION> "" }
            }
            append pre_proc_map { <AD_AUTH_NEXT> sso_credential_mapping
                                  <PWD_ASSIGN_NEXT> act_active_directory_auth}
            unset apm_map(domain_variable_assign) \
                  apm_map(full_resource_assign) \
                  apm_map(webtop)
            switch $::webui_virtual__cloud {
            "3" -
            "25" { append pre_proc_map {
                      <SSO> "${app}_sso_form_based"
                      <SSO_EXPRESSION> {expr {\\\\\\\"$::general__domain_name\\\\\\\\\\\\\\\\\[mcget {session.logon.last.username}\]\\\\\\\"}}
                      <FORM_ACTION_DIR> ExplicitAuth
                      <START_URI_DIR> ExplicitAuth}
                  unset apm_map(sso_form_basedv2)
                }
            "1" -
            "2" { append pre_proc_map {
                      <SSO> "${app}_sso_form_based"
                      <SSO_EXPRESSION> {expr {\\\\\\\"$::general__domain_name\\\\\\\\\\\\\\\\\[mcget {session.logon.last.username}\]\\\\\\\"}}
                      <FORM_ACTION_DIR> authentication
                      <START_URI_DIR> Authentication}
                  unset apm_map(sso_form_basedv2)
                }
            "0" { append pre_proc_map {
                      <SSO> "${app}_sso_form_basedv2"
                      <SSO_EXPRESSION> {mcget {session.logon.last.username}}}
                  unset apm_map(sso_form_based)
                }
            }
        }
    }

    if { !$replace_webtop && [iapp_is ::webui_virtual__logged_out_irule Yes] } {
        if { $do_cloud } {
           append pre_proc_map { <LOGOUT_URI> "replace-all-with \{${uri}Authentication/Logoff\}" }
        } else {
           append pre_proc_map { <LOGOUT_URI> "replace-all-with \{${uri}auth/loggedout.aspx\}" }
        }
    } else {
        append pre_proc_map { <LOGOUT_URI> {none} }
    }

    if { $replace_webtop } {
        if { [iapp_is ::xml_broker_virtual__client_bundle "/#create_new#"] } {
            append pre_proc_map { <CLIENT_BUNDLE> "<PREFIX>_client_bundle"
                                  <CLIENT_BUNDLE_URL> [expr { $::xml_broker_virtual__client_bundle_url \
                                      eq "" ? "none" : "$::xml_broker_virtual__client_bundle_url" }]
                                  <SANDBOXES> [expr { $is_v11_4 ? "\"sandboxes none\"" : "\"\"" }] }
        } else {
            append pre_proc_map { <CLIENT_BUNDLE> "$::xml_broker_virtual__client_bundle"
                                  <SANDBOXES> [expr { $is_v11_4 ? ($is_v11_6 \
                                      ? "\"sandboxes add { hosted-content { retain-public-access true }}\"" \
                                      : "\"sandboxes add { hosted-content }\"") : "\"\"" }] }
            unset apm_map(client_bundle)
        }
    } else {
        append pre_proc_map { <CLIENT_BUNDLE> "default-citrix-client-bundle"
                              <SANDBOXES> [expr { $is_v11_4 ? "\"sandboxes none\"" : "\"\"" }] }
        unset apm_map(client_bundle)
    }

    # APM policies do not commit in a reliable manner when configured via iApp.
    # This time-bomb script insures that the policy gets committed.
    # See subcase SR1-315233635 for details.
    set dir [tmsh::pwd]
    set fn "/var/tmp/iapp_${app}.sh"
    catch {
        set fh [open $fn w]
        puts $fh "sleep 5"
        puts $fh "tmsh modify apm profile access ${dir}/${app} generation-action increment"
        close $fh
        exec chmod 777 $fn
        exec $fn &
    } {}
}

# FIREWALL (AFM) POLICY
# beware: syntactically correct AFM commands fail when AFM is not provisioned
# extra info exists test benefits BIG-IQ apps that bypass presentation

set do_firewall [expr { $allow_afm && [info exists ::afm__policy] \
    && ![iapp_is ::afm__policy "/#do_not_use#"] }]
set new_firewall [iapp_is ::afm__policy "/#default#"]
set allow_by_reputation [iapp_is ::afm__restrict_by_reputation "accept"]

if { $allow_afm } {
    set staging_policy [expr { $do_firewall \
        && ![iapp_is ::afm__staging_policy "/#do_not_use#"] \
        ? "$::afm__staging_policy" \
        : "none" }]

    set security_logging [expr { $do_firewall \
        && ![iapp_is ::afm__security_logging "/#do_not_use#"] \
        ? "security-log-profiles replace-all-with \{\"$::afm__security_logging\"\}" \
        : "security-log-profiles none" }]
} else {
    set security_logging ""
}

# array key: $allow_afm,$do_firewall,$new_firewall
array set firewall_arr {
    1,1,1 { fw-enforced-policy \
            [iapp_conf create security firewall policy ${app}_firewall \
            rules replace-all-with \{ \
              acceptPackets \{ \
                action accept \
                log no \
                ip-protocol tcp \
                status enabled \
                source \{ [iapp_substa afm_restrict($::afm__restrict_by_addr)] \}\} \
              dropPackets \{ \
                action drop \
                log yes \
                ip-protocol tcp \
                status enabled \
                source \{ addresses replace-all-with \{ any/any \}\} \
              \}\}] \
            fw-staged-policy $staging_policy }
    1,1,0 { fw-enforced-policy $::afm__policy \
            fw-staged-policy $staging_policy }
    1,0,1 { fw-enforced-policy none \
            fw-staged-policy none }
    1,0,0 { fw-enforced-policy none \
            fw-staged-policy none }
    *     { }
}

# array key: $::afm__restrict_by_addr
array set afm_restrict {
    /#create_new# {addresses replace-all-with \{ $::afm__allowed_addr \}}
    /#do_not_use# {addresses replace-all-with \{ any/any \}}
    *         {address-lists replace-all-with \{ $::afm__restrict_by_addr \}}
}

# array key: $allow_afm,$do_firewall,$new_webui_pool
array set storefront_firewall_arr {
    1,1,1 { fw-enforced-policy \
            [iapp_conf create security firewall policy ${app}_sf_firewall \
            rules replace-all-with \{ \
              acceptPackets \{ \
                action accept \
                log no \
                ip-protocol any \
                status enabled \
                source \{ addresses replace-all-with \{ [addr_from_table ::webui_pool__servers] \}\}\} \
              dropPackets \{ \
                action drop \
                log yes \
                ip-protocol any \
                status enabled \
                source \{ addresses replace-all-with \{ any/any \}\} \
              \}\}] }
    1,1,0 { fw-enforced-policy [expr { [iapp_is ::webui_pool__pool_afm "/#do_not_use#"] ? "none" : $::webui_pool__pool_afm }] \
            fw-staged-policy none }
    1,0,1 { fw-enforced-policy none \
            fw-staged-policy none }
    1,0,0 { fw-enforced-policy none \
            fw-staged-policy none }
    *     { }
}

proc addr_from_table { table } {
    set addr_list ""
    foreach row [set [set table]] {
        if { [llength [join $row]] %2 == 1 } {
            continue
        }
        array unset columns
        array set columns [join $row]
        if { $columns(addr) != "" } {
            lappend addr_list $columns(addr)
        }
    }
    return $addr_list
}

# ip-intelligence was a profile in 11.4, is a policy in 11.5
# array keys:
# $allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy/profile
array set ip_intelligence_arr {
    1,1,0,0,profile { [iapp_conf create security ip-intelligence \
          profile           ${app}_ip_intelligence \
          defaults-from     ip-intelligence \
          botnets           $::afm__restrict_by_reputation \
          denial-of-service $::afm__restrict_by_reputation \
          infected-sources  $::afm__restrict_by_reputation \
          phishing          $::afm__restrict_by_reputation \
          proxy             $::afm__restrict_by_reputation \
          scanners          $::afm__restrict_by_reputation \
          spam-sources      $::afm__restrict_by_reputation \
          web-attacks       $::afm__restrict_by_reputation \
          windows-exploits  $::afm__restrict_by_reputation] }
    1,1,0,1,policy { \
         ip-intelligence-policy [iapp_conf create security ip-intelligence \
         policy             ${app}_ip_intelligence \
         default-action     $action($::afm__restrict_by_reputation) \
         blacklist-categories replace-all-with \{ \
             botnets \{ action use-policy-setting \} \
             cloud_provider_networks \{ action use-policy-setting \} \
             denial_of_service \{ action use-policy-setting \} \
             illegal_websites \{ action use-policy-setting \} \
             infected_sources \{ action use-policy-setting \} \
             phishing \{ action use-policy-setting \} \
             proxy \{ action use-policy-setting \} \
             scanners \{ action use-policy-setting \} \
             spam_sources \{ action use-policy-setting \} \
             web_attacks \{ action use-policy-setting \} \
             windows_exploits \{ action use-policy-setting \}\}] }
    1,0,0,1,policy { ip-intelligence-policy none }
    1,0,1,1,policy { ip-intelligence-policy none }
    1,1,1,1,policy { ip-intelligence-policy none }
    *     { }
}

# array key: $::afm__restrict_by_reputation
array set action {
    accept { accept default-log-blacklist-hit-only no }
    reject { drop   default-log-blacklist-hit-only yes }
    warn   { accept default-log-blacklist-hit-only yes }
}

# SNAT
# array keys: $do_snat,$new_snat
array set snat {
    1,0 { snat automap }
    1,1 { snatpool [iapp_conf create ltm snatpool \
            ${app}_${var}_snatpool members replace-all-with \{ \
            [string map {"addr " "" \{ "" \} ""} \
            [set ::${var}_virtual__snatpool_members]] \} ] }
    *   { snat none }
}

foreach var { webui xml_broker } {
    set do_snat [expr { \
        ( [iapp_is ::[set var]_virtual__location "same_subnet"] || \
          [iapp_is ::[set var]_virtual__snat "no_bigip_gw"] )}]
    set new_snat [iapp_is ::[set var]_virtual__automap_or_pool \
        "need_snatpool"]
    set [set var]_snat [iapp_substa snat($do_snat,$new_snat)]
}

set ica_snat $webui_snat

# PERSISTENCE
set persistence {[expr { $cookie_licensed \
    ? "persist replace-all-with \{ [iapp_conf create ltm persistence cookie ${app}_cookie_persistence] \} \
       fallback-persistence [iapp_conf create ltm persistence source-addr ${app}_source_address_persistence]"
    : "persist replace-all-with \{ [iapp_conf create ltm persistence source-addr ${app}_source_address_persistence] \} \
       fallback-persistence none" }]}

# TCP PROFILE
set tcp_choice [expr { $advanced ? $::webui_virtual__lan_or_wan : "WAN" }]
set lan_profile [iapp_conf create ltm profile tcp ${app}_lan_optimized_tcp \
    defaults-from tcp-lan-optimized \
    idle-timeout 1800]

# array keys: $tcp_choice
array set tcp_profile {
    LAN { $lan_profile \{ context all \} }
    WAN { [iapp_conf create ltm profile tcp ${app}_wan_optimized_tcp \
          defaults-from tcp-wan-optimized \
          idle-timeout 1800 \
          keep-alive-interval 75 \
          nagle disabled \
          pkt-loss-ignore-burst 8 \
          pkt-loss-ignore-rate 10000 \
          proxy-buffer-low 65536 \
          receive-window-size 1048576 \
          selective-nack enabled \
          send-buffer-size 1048576 \
          syn-rto-base 200] \{ context clientside \} \
          $lan_profile \{ context serverside \} }
    *   { $::webui_virtual__lan_or_wan \{ context clientside \} \
          $lan_profile \{ context serverside \} }
}

# WEBUI SSL
set new_clientssl [iapp_is ::webui_virtual__clientssl_profile "/#create_new#"]
set new_serverssl [expr { ( $replace_webtop && $xmlb_encrypted ) || \
                  [iapp_is ::webui_virtual__serverssl_profile "/#create_new#"]}]

# array keys: $webui_reencrypt,$new_clientssl,$new_serverssl
array set webui_ssl {
    1,1,1 { [subst $webui_ssl(*)] \
            [iapp_conf create ltm profile server-ssl ${app}_webui_serverssl \
            defaults-from serverssl \
            secure-renegotiation require] \{ context serverside \} }
    1,1,0 { [subst $webui_ssl(*)] \
            $::webui_virtual__serverssl_profile \{ context serverside \} }
    1,0,1 { $::webui_virtual__clientssl_profile \{ context clientside \} \
            [iapp_conf create ltm profile server-ssl ${app}_webui_serverssl \
            defaults-from serverssl \
            secure-renegotiation require] \{ context serverside \} }
    1,0,0 { $::webui_virtual__clientssl_profile \{ context clientside \} \
            $::webui_virtual__serverssl_profile \{ context serverside \} }
    0,0,1 { $::webui_virtual__clientssl_profile \{ context clientside \} }
    0,0,0 { $::webui_virtual__clientssl_profile \{ context clientside \} }
    *     { [iapp_conf create ltm profile client-ssl ${app}_webui_clientssl \
            defaults-from clientssl \
            key $::webui_virtual__key \
            cert $::webui_virtual__cert \
            chain [expr { [iapp_is ::webui_virtual__cert_chain "/#do_not_use#"] \
                || $do_smartcard ? "none" : $::webui_virtual__cert_chain }] \
            ca-file [expr { $do_smartcard ? $::webui_virtual__cert_bundle : "none" }] \
            client-cert-ca [expr { $do_smartcard ? $::webui_virtual__cert_bundle : "none" }] \
            handshake-timeout [expr { $do_smartcard ? "60" : "10" }]] \
            \{ context clientside \} }
}

# XML BROKER SSL
# array keys: $xmlb_encrypted
array set xmlb_ssl {
    0 { }
    1 { [iapp_conf create ltm profile client-ssl ${app}_xmlb_clientssl \
        defaults-from clientssl \
        key $::xml_broker_virtual__key \
        cert $::xml_broker_virtual__cert \
        handshake-timeout [expr { $do_smartcard ? "60" : "10" }]] \
        \{ context clientside \} \
        [iapp_conf create ltm profile server-ssl ${app}_xmlb_serverssl \
        defaults-from serverssl \
        secure-renegotiation require] \
        \{ context serverside \} }
}

# HTTP & STREAM PROFILES
set http_profile [iapp_conf create ltm profile http ${app}_http \
    defaults-from http \
    header-erase [expr { $replace_webtop ? "none" : "Accept-Encoding" }] \
    insert-xforwarded-for enabled \
    redirect-rewrite matching]
set stream_profile {[iapp_conf create ltm profile stream ${app}_stream]}

# WEBUI MONITOR
set create_webui_monitor [iapp_is ::webui_pool__monitor "/#create_new#"]
set http_or_https [expr { $webui_reencrypt ? "https" : "http" }]

# array key: $create_webui_monitor
array set webui_monitor {
    1 { monitor [iapp_conf create ltm monitor $http_or_https \
            ${app}_webui_${http_or_https} \
            defaults-from $http_or_https \
            interval $::webui_pool__monitor_interval \
            timeout [expr { $::webui_pool__monitor_interval * 3 + 1 }] \
            [expr { $do_cloud \
                ? "recv 'Receiver'" \
                : "recv 'Citrix Systems'" }] \
            send 'GET $uri HTTP/1.1\\r\\nHost: $::webui_pool__webui_dns_name\\r\\nConnection: Close\\r\\n\\r\\n']}
    0 { monitor $::webui_pool__monitor }
}

# XML BROKER MONITOR
set create_xmlb_monitor \
    {[iapp_is ::xml_broker_pool${ext}__monitor "/#create_new#"]}
set xmlb_monitor_type   [expr { $xmlb_encrypted ? "https" : "http" }]

# apply HTML character references (like &amp) to monitor password and
# prepare post_content template for indirection with multiple broker pools
set post_content {<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><!DOCTYPE NFuseProtocol SYSTEM \\\"NFuse.dtd\\\"><NFuseProtocol version=\\\"5.1\\\"><RequestAppData><Scope traverse=\\\"subtree\\\"></Scope><DesiredDetails>permissions</DesiredDetails><ServerType>all</ServerType><ClientType>ica30</ClientType><ClientType>content</ClientType><Credentials><UserName>[set ::xml_broker_pool${ext}__monitor_username]</UserName><Password encoding=\\\"cleartext\\\">[string map { < &lt > &gt  & &amp \' &apos \" &quot } [set ::xml_broker_pool${ext}__monitor_password]]</Password><Domain type=\\\"NT\\\">$::general__domain_name</Domain></Credentials><ClientName>${app}_${xmlb_monitor_type}_xmlb_monitor${ext}</ClientName><ClientAddress addresstype=\\\"dot\\\">0.0.0.0</ClientAddress></RequestAppData></NFuseProtocol>\\r\\n\\r\\n}

# key is set below with each pass through the multiple farms loop
# array keys: [subst $create_xmlb_monitor]
array set xmlb_monitor {
    1 { monitor [iapp_conf create ltm monitor $xmlb_monitor_type \
        ${app}_xml_${xmlb_monitor_type}${ext} \
        defaults-from $xmlb_monitor_type \
        interval [set ::xml_broker_pool${ext}__monitor_interval] \
        timeout [expr {[set \
            ::xml_broker_pool${ext}__monitor_interval] * 3 + 1 }] \
        send 'POST /scripts/wpnbr.dll HTTP/1.1\\r\\nContent-Length: [expr \
            {[string length [subst $post_content]] - [regexp -all {\\} [subst \
            $post_content]]}]\\r\\nContent-Type: text/xml\\r\\nConnection: close\\r\\nHost: $::webui_pool__webui_dns_name\\r\\n\\r\\n[subst $post_content]' \
        recv '[set ::xml_broker_pool${ext}__monitor_app]'] }
    0 { monitor [set ::xml_broker_pool${ext}__monitor] }
}

# UDP MONITOR
# array keys: [subst $new_xmlb_pool] * [subst $create_xmlb_monitor],
#             [subst $use_webui_pool] * [subst $create_xmlb_monitor]
array set udp_monitor {
    *        { monitor [iapp_conf create ltm monitor udp ${app}_udp${ext} \
                 defaults-from udp \
                 interval [set ::xml_broker_pool${ext}__monitor_interval] \
                 timeout [expr { \
                     ( [set ::xml_broker_pool${ext}__monitor_interval] \
                            * 3 ) + 1 }]] }
    0,0     { monitor [iapp_conf create ltm monitor udp ${app}_udp${ext} \
                 defaults-from udp \
                 interval 30 \
                 timeout 91] }
}

# WEBUI POOL
set new_webui_pool     [expr { !$replace_webtop && [iapp_is ::webui_pool__pool "/#create_new#"] }]
set do_webui_slow_ramp [iapp_is ::webui_pool__slow_ramp_enable "enable"]
set do_webui_pga       [iapp_is ::webui_pool__enable_pga "use_pga"]

# array keys: $advanced,$do_webui_slow_ramp,$do_webui_pga
array set webui_pool_ramp_pga {
    1,1,1 { slow-ramp-time $::webui_pool__slow_ramp_setvalue \
        min-active-members $::webui_pool__min_active_members }
    1,1,0 { slow-ramp-time $::webui_pool__slow_ramp_setvalue \
        min-active-members 0 }
    1,0,1 { slow-ramp-time 10 \
        min-active-members $::webui_pool__min_active_members }
    1,0,0 { slow-ramp-time 10 min-active-members 0 }
    *     { slow-ramp-time 300 min-active-members 0 }
}

# array keys: $advanced,$lb_lcm_licensed
array set webui_pool_lb {
    0,0   { load-balancing-mode round-robin }
    0,1   { load-balancing-mode least-connections-member }
    *     { load-balancing-mode $::webui_pool__lb_method_choice  }
}

# array keys: $replace_webtop,$new_webui_pool
array set webui_pool {
    0,1 { pool [iapp_conf create ltm pool ${app}_webui_${http_or_https}_pool \
          [iapp_substa \
          webui_pool_ramp_pga($advanced,$do_webui_slow_ramp,$do_webui_pga)] \
          [iapp_substa webui_pool_lb($advanced,$lb_lcm_licensed)] \
          [iapp_substa webui_monitor($create_webui_monitor)] \
          [iapp_pool_members -port [set ::webui_pool__${http_or_https}_port] \
          $::webui_pool__servers]] }
    0,0 { pool $::webui_pool__pool }
    *   { pool none }
}

# XMLB POOL
set new_xmlb_pool {[expr { ($new_webui_pool \
     && [iapp_is ::xml_broker_pool${ext}__pool "/#create_new#"]) \
     || (!$new_webui_pool \
     && [iapp_is ::xml_broker_pool${ext}__pool_alt "/#create_new#"])}]}

set use_webui_pool {[expr { $new_webui_pool && \
    [iapp_is ::xml_broker_pool${ext}__pool "/#use_webui_pool#"]}]}

set do_xmlb_slow_ramp {[iapp_is ::xml_broker_pool${ext}__slow_ramp_enable "enable"]}
set do_xmlb_pga       {[iapp_is ::xml_broker_pool${ext}__enable_pga "use_pga"]}

# array keys: $advanced,$do_xmlb_slow_ramp,$do_xmlb_pga
array set xmlb_pool_ramp_pga {
    1,1,1 { slow-ramp-time [set ::xml_broker_pool${ext}__slow_ramp_setvalue] \
        min-active-members [set ::xml_broker_pool${ext}__min_active_members] }
    1,1,0 { slow-ramp-time [set ::xml_broker_pool${ext}__slow_ramp_setvalue] \
        min-active-members 0 }
    1,0,1 { slow-ramp-time 10 \
        min-active-members [set ::xml_broker_pool${ext}__min_active_members] }
    1,0,0 { slow-ramp-time 10 min-active-members 0 }
    *     { slow-ramp-time 300 min-active-members 0 }
}

# array keys: $advanced,$lb_lcm_licensed
array set xmlb_pool_lb {
    0,0   { load-balancing-mode round-robin }
    0,1   { load-balancing-mode least-connections-member }
    *     { load-balancing-mode [set ::xml_broker_pool${ext}__lb_method_choice]  }
}

# Monitor type (http or https) is inserted into the pool name as a workaround
# for BZ407596. Creating the pool in advanced mode uses individual port numbers
# specified for broker pool members, while basic mode forces 80 or 443.
# This decision array also supports re-use of the webui pool and forwarding
# with no pool.
# array keys: $advanced,[subst $new_xmlb_pool],[subst $use_webui_pool]
array set xmlb_pool {
    0,1,0 { pool [iapp_conf create ltm pool ${app}_xml_${xmlb_monitor_type}_pool${ext} \
          [iapp_substa xmlb_pool_ramp_pga($advanced,[subst $do_xmlb_slow_ramp],[subst $do_xmlb_pga])] \
          [iapp_substa xmlb_pool_lb($advanced,$lb_lcm_licensed)] \
          [iapp_substa xmlb_monitor([subst $create_xmlb_monitor])] \
          [iapp_pool_members -port [expr { $xmlb_encrypted ? 443 : 80 }] \
          [set ::xml_broker_pool${ext}__servers]]] }
    1,1,0 { pool [iapp_conf create ltm pool ${app}_xml_${xmlb_monitor_type}_pool${ext} \
          [iapp_substa xmlb_pool_ramp_pga($advanced,[subst $do_xmlb_slow_ramp],[subst $do_xmlb_pga])] \
          [iapp_substa xmlb_pool_lb($advanced,$lb_lcm_licensed)] \
          [iapp_substa xmlb_monitor([subst $create_xmlb_monitor])] \
          [iapp_pool_members \
          [set ::xml_broker_pool${ext}__servers]]] }
    1,0,1 { pool [iapp_conf create ltm pool ${app}_reused_webui_pool \
          [iapp_substa webui_pool_ramp_pga($advanced,$do_webui_slow_ramp,$do_webui_pga)] \
          [iapp_substa webui_pool_lb($advanced,$lb_lcm_licensed)] \
          [iapp_substa webui_monitor($create_webui_monitor)] \
          [iapp_pool_members -port $xml_port $::webui_pool__servers]] }
    0,0,1 { pool [iapp_conf create ltm pool ${app}_reused_webui_pool \
          [iapp_substa webui_pool_ramp_pga($advanced,$do_webui_slow_ramp,$do_webui_pga)] \
          [iapp_substa webui_pool_lb($advanced,$lb_lcm_licensed)] \
          [iapp_substa webui_monitor($create_webui_monitor)] \
          [iapp_pool_members -port $xml_port $::webui_pool__servers]] }
    *   { pool [expr { $new_webui_pool \
          ? [set ::xml_broker_pool${ext}__pool] \
          : [set ::xml_broker_pool${ext}__pool_alt] }]}
}

# UDP POOL
# array keys: [subst $new_xmlb_pool],[subst $use_webui_pool],$new_webui_pool
array set udp_pool {
    0,0,0 { pool [expr { $new_webui_pool \
          ? [set ::xml_broker_pool${ext}__pool] \
          : [set ::xml_broker_pool${ext}__pool_alt] }]}
    0,0,1 { pool [expr { $new_webui_pool \
          ? [set ::xml_broker_pool${ext}__pool] \
          : [set ::xml_broker_pool${ext}__pool_alt] }]}
    0,1,0 { pool $::webui_pool__pool }
    0,1,1 { pool [iapp_conf create ltm pool ${app}_udp_pool \
            [iapp_substa webui_pool_ramp_pga($advanced,$do_webui_slow_ramp,$do_webui_pga)] \
            [iapp_substa webui_pool_lb($advanced,$lb_lcm_licensed)] \
            [iapp_substa udp_monitor([expr {[subst $new_xmlb_pool]*[subst \
                $create_xmlb_monitor]}],[expr {[subst $use_webui_pool]*[subst \
                $create_xmlb_monitor]}])] \
            [iapp_pool_members -port 137 [set ::webui_pool__servers]]] }
    *     { pool [iapp_conf create ltm pool ${app}_udp_pool${ext} \
            [iapp_substa xmlb_pool_ramp_pga($advanced,[subst $do_xmlb_slow_ramp],[subst $do_xmlb_pga])] \
            [iapp_substa xmlb_pool_lb($advanced,$lb_lcm_licensed)] \
            [iapp_substa udp_monitor([expr {[subst $new_xmlb_pool]*[subst \
                $create_xmlb_monitor]}],[expr {[subst $use_webui_pool]*[subst \
                $create_xmlb_monitor]}])] \
            [iapp_pool_members -port 137 [set ::xml_broker_pool${ext}__servers]]] }
}

# VLANS
set xmlb_vlans_enabled [iapp_is ::xml_broker_virtual__xml_vlans \
    "select_vlans_enabled"]
set xmlb_vlans_disabled [iapp_is ::xml_broker_virtual__xml_vlans \
    "select_vlans_disabled"]

# array keys: $advanced,$xmlb_vlans_enabled,$xmlb_vlans_disabled
array set xmlb_vlans {
    1,1,0 { vlans-enabled \
          vlans replace-all-with \{ $::xml_broker_virtual__xml_allowed_vlans \}}
    1,0,1 { vlans-disabled \
          vlans replace-all-with \{ $::xml_broker_virtual__xml_denied_vlans \}}
    *     { vlans-disabled vlans none }
}

# ICA VLANS
set ica_vlans_enabled [iapp_is ::ica_traffic__ica_vlans \
    "select_vlans_enabled"]
set ica_vlans_disabled [iapp_is ::ica_traffic__ica_vlans \
    "select_vlans_disabled"]

# array keys: $ica_vlans_enabled,$ica_vlans_disabled
array set ica_vlans {
    1,0 { vlans-enabled \
          vlans replace-all-with \{ $::ica_traffic__ica_allowed_vlans \}}
    0,1 { vlans-disabled \
          vlans replace-all-with \{ $::ica_traffic__ica_denied_vlans \}}
    *   { vlans-disabled vlans none }
}

# IRULES
# user irules (advanced mode only)
set webui_rules [expr { $advanced ? $::webui_virtual__rules : "" }]
set xmlb_rules  [expr { $advanced && (!$replace_webtop || !$is_v11_4) ? $::xml_broker_virtual__rules : "" }]

# template irules
if { $do_smartcard } {
    set no_dash [string map {- _} $app]
    if { $::apm__smartcard_upn eq "Yes" } {
        if { $replace_webtop } {
            append webui_rules [subst [string map "<APP> $no_dash" $irule(smartcard_same_upn_replace)]]
        } else {
            append webui_rules [subst [string map "<APP> $no_dash <CUSTOM_URI> $uri" $irule(smartcard_same_upn_do_not_replace)]]
        }
    } else {
        if { $replace_webtop } {
            append webui_rules [subst [string map "<APP> $no_dash" $irule(smartcard_different_upn_replace)]]
        } else {
            append webui_rules [subst [string map "<APP> $no_dash <CUSTOM_URI> $uri" $irule(smartcard_different_upn_do_not_replace)]]
        }
    }
} else {
    if { !$replace_webtop && $is_apm_scenario } {
        append webui_rules [subst [string map "<CUSTOM_URI> $uri" $irule(allow_and_redirect)]]
    }
}

# VIRTUALS
# webui and redirect virtuals must use the same name to workaround a framework bug.
array set vs {
    web    { [iapp_conf create ltm virtual ${app}_webui_https \
             destination [iapp_destination $::webui_virtual__addr $port] \
             mask [iapp_destination -mask $::webui_virtual__addr] \
             ip-protocol tcp \
             [expr { $legacy_windows \
             ? [iapp_substa xmlb_pool($advanced,[subst $new_xmlb_pool],[subst $use_webui_pool])] \
             : [iapp_substa webui_pool($replace_webtop,$new_webui_pool)] }] \
             [subst $persistence] \
             $webui_snat \
             [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall)] \
             [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
             $security_logging \
             profiles replace-all-with \{ \
                 [iapp_substa webui_ssl($webui_reencrypt,$new_clientssl,$new_serverssl)] \
                 [iapp_substa tcp_profile($tcp_choice)] \
                 [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
                 $http_profile $apm_profiles \
                 [expr { $is_v11_4 && $is_apm_scenario ? "vdi" : "" }] \} \
             rules \{ $webui_rules \}] }
    redirect { [iapp_conf create ltm virtual ${app}_webui_http \
             destination [iapp_destination $::webui_virtual__addr \
                 [expr { $advanced ? "$::webui_virtual__redir_port" : "80" }]] \
             mask [iapp_destination -mask $::webui_virtual__addr] \
             ip-protocol tcp \
             pool none \
             persist none \
             fallback-persistence none \
             $webui_snat \
             [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall)] \
             [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
             $security_logging \
             profiles replace-all-with \{ \
                 [iapp_substa tcp_profile($tcp_choice)] \
                 [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \
                 $http_profile \} \
             rules \{ [subst $irule(redirect)] \}] }
    xml    { [iapp_conf create ltm virtual ${app}_xml_broker${ext} \
             destination [iapp_destination $xml_addr $xml_port] \
             mask [iapp_destination -mask $xml_addr] \
             ip-protocol tcp \
             [iapp_substa \
             xmlb_vlans($advanced,$xmlb_vlans_enabled,$xmlb_vlans_disabled)] \
             [iapp_substa \
             xmlb_pool($advanced,[subst $new_xmlb_pool],[subst $use_webui_pool])] \
             $xml_broker_snat \
             [iapp_substa storefront_firewall_arr($allow_afm,$do_firewall,$new_webui_pool)] \
             profiles replace-all-with \{ \
                 [iapp_substa xmlb_ssl($xmlb_encrypted)] \
                 [iapp_substa tcp_profile(LAN)] \
                 $http_profile \} \
             rules \{ $xmlb_rules \}] }
    udp    { [iapp_conf create ltm virtual ${app}_xml_broker_enum${ext} \
             destination [iapp_destination $xml_addr 137] \
             mask [iapp_destination -mask $xml_addr] \
             ip-protocol udp \
             [iapp_substa udp_pool([subst $new_xmlb_pool],[subst \
                 $use_webui_pool],$new_webui_pool)] \
             $xml_broker_snat \
             [iapp_substa storefront_firewall_arr($allow_afm,$do_firewall,$new_webui_pool)] \
             profiles replace-all-with \{ udp \}] }
    ica_gw { [iapp_conf create ltm virtual ${app}_ica_port_$port \
             destination [iapp_destination $::ica_traffic__ica_subnet $port] \
             mask $::ica_traffic__ica_netmask \
             ip-protocol tcp [iapp_substa \
             ica_vlans($ica_vlans_enabled,$ica_vlans_disabled)] \
             pool none \
             $ica_snat \
             [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall)] \
             [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
             $security_logging \
             profiles replace-all-with \{ \
                 [iapp_substa tcp_profile($tcp_choice)] \
                 [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \} \
             rules \{ [expr { $advanced ? $::ica_traffic__rules : "" }] \}] }
    ica_rd { [iapp_conf create ltm virtual ${app}_ica_route_domain_${ica_rd_count}_${port}_[lindex \
             [split $::ica_traffic__virtual_route_domain /] end] \
             destination [iapp_destination -route_domain $::ica_traffic__virtual_route_domain $addr $port] \
             mask [iapp_destination -mask $addr] \
             ip-protocol tcp [iapp_substa \
             ica_vlans($ica_vlans_enabled,$ica_vlans_disabled)] \
             pool [iapp_conf create ltm pool ${app}_ica_${ica_rd_count}_${port}_pool \
                members replace-all-with \{ \
                [iapp_destination -route_domain $::ica_traffic__ica_route_domain $addr $port] \} \
                slow-ramp-time 300 \
                monitor none] \
             $ica_snat \
             [iapp_substa firewall_arr($allow_afm,$do_firewall,$new_firewall)] \
             [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,policy)] \
             $security_logging \
             profiles replace-all-with \{ \
                 [iapp_substa tcp_profile($tcp_choice)] \
                 [iapp_substa ip_intelligence_arr($allow_afm,$do_firewall,$allow_by_reputation,$is_v11_5,profile)] \} \
             rules \{ [expr { $advanced ? $::ica_traffic__rules : "" }] \}] }
}

set create_redir_vs [expr { !$advanced || [iapp_is ::webui_virtual__create_redir_vs "create_redir_vs"] }]
set ica_traffic_gw [iapp_is ica_traffic__traffic "ica_gw"]
set ica_traffic_replicate_rd [iapp_is ica_traffic__traffic "replicate_ica_w_route_domain"]

for { set i 1 } { $i <= $farm_count } { incr i } {
    set ext [expr { $i == 1 ? "" : "_$i" }]

    if { !$replace_webtop || !$is_v11_4 } {
        set xml_addr [set ::xml_broker_virtual__addr$ext]
        if { $xmlb_encrypted } {
            set xml_port $::xml_broker_virtual__https_port
        } else {
            set xml_port $::xml_broker_virtual__http_port
        }
        subst $vs(xml)
    }

    if { !$replace_webtop } {
        subst $vs(udp)
    }

    if { $xmlb_encrypted } {
        set xml_ssl enabled
    } else {
        set xml_ssl disabled
    }

    if { $is_v11_4 } {
        set custom_params ""
        if { $is_v12_0 && $advanced && $replace_webtop } {

            # add custom ICA parameters to the remote-desktops
            # unnamed parameters must be listed first
            set noname_params ""
            set named_params ""
            foreach row "$::xml_broker_virtual__ica_parameters" {
                set arr   [split [join $row] "\n"]
                set name  [string range [string trim [lindex $arr 1]] 5 end]
                set param [string range [string trim [lindex $arr 2]] 10 end]
                set value [string range [string trim [lindex $arr 3]] 6 end]
                if { $param != "" && $value != "" } {
                    if { $name == "" } {
                        append noname_params "$param=$value\n"
                    } else {
                        append named_params "\\\\\\\[$name\\\\\\\]\n$param=$value\n"
                    }
                }
            }
            set params [string range "$noname_params$named_params" 0 end-1]
            set custom_params "custom-parameters \\\\\\\"$params\\\\\\\""
        }
        append pre_proc_map " <BROKER_DEF_$i> {[iapp_substa xmlb_pool($advanced,[subst $new_xmlb_pool],[subst $use_webui_pool])] [expr { $do_smartcard ? "broker-auth smartcard" : "broker-auth password" }] enable-serverside-ssl $xml_ssl $custom_params}"
    } else {
        append pre_proc_map " <BROKER_DEF_$i> {ip $xml_addr port $xml_port enable-serverside-ssl $xml_ssl} "
    }
}

set ext ""
if { $is_lb_scenario } {
    set apm_profiles ""
    set port $::webui_virtual__https_port
    subst $vs(web)
    if { $create_redir_vs } {
        subst $vs(redirect)
    }
    if { $ica_traffic_gw || $ica_traffic_replicate_rd } {
        foreach port "$::ica_traffic__ica_port [string map \
            {port "" \{ "" \} ""} $::ica_traffic__multi_stream]" {
            if { $ica_traffic_replicate_rd } {
                set ica_rd_count 0
                foreach addr [string map \
                    {addr "" \{ "" \} ""} $::ica_traffic__ica_servers] {
                    set ica_rd_count [expr {$ica_rd_count + 1}]
                    subst $vs(ica_rd)
                }
            } else {
                subst $vs(ica_gw)
            }
        }
    }
} else {
    set port $::webui_virtual__https_port
    set pre_proc_map [subst $pre_proc_map]
    array set apm_map [string map $pre_proc_map [array get apm_map]]

    set apm_profiles "ppp rba websso [iapp_apm_config apm_map] "
    if { !$is_v11_6 } {
        append apm_profiles "remotedesktop "
    }
    if { $replace_webtop && !$is_v11_4 } {
        append apm_profiles [subst $stream_profile]
    }
    subst $vs(web)
    if { $create_redir_vs } {
        subst $vs(redirect)
    }
}

# DATAGROUP
proc create_datagroup { old_datagroup new_datagroup uri } {
    catch { exec tmsh modify ltm data-group internal /Common/$old_datagroup \
            records delete \{ $::webui_pool__webui_dns_name \} } err
    catch { exec tmsh create ltm data-group internal /Common/$new_datagroup \
            type string } err
    catch { exec tmsh modify ltm data-group internal /Common/$new_datagroup \
            records add \{ $::webui_pool__webui_dns_name \} } err
    catch { exec tmsh modify ltm data-group internal /Common/$new_datagroup \
            records modify \{ $::webui_pool__webui_dns_name \{ data $uri \}\} } err
}

# array keys: $is_apm_scenario,$do_smartcard,$replace_webtop,$is_v11_4
array set datagroup {
    1,0,1,0 { [create_datagroup APM_Citrix_ConfigXML APM_Citrix_PNAgentProtocol 1] }
    1,0,0,1 { [create_datagroup APM_Citrix_PNAgentProtocol APM_Citrix_ConfigXML $::webui_virtual__datagroup_uri] }
    1,0,0,0 { [create_datagroup APM_Citrix_PNAgentProtocol APM_Citrix_ConfigXML $::webui_virtual__datagroup_uri] }
    *       { [catch {
                exec tmsh modify ltm data-group internal /Common/APM_Citrix_ConfigXML \
                    records delete \{ $::webui_pool__webui_dns_name \}
            } err][catch {
                exec tmsh modify ltm data-group internal /Common/APM_Citrix_PNAgentProtocol \
                    records delete \{ $::webui_pool__webui_dns_name \}
            } err] }
}

iapp_substa datagroup($is_apm_scenario,$do_smartcard,$replace_webtop,$is_v11_4)

tmsh::log_level debug
iapp_template stop
            }
            presentation {

define choice lb_method display "xxlarge" tcl {
    if { [string first ltm_lb_least_conn [tmsh::show sys license detail]] != -1 } {
        set choices "Least Connections (member)\tleast-connections-member\nLeast Connections (node)\tleast-connections-node\nLeast Sessions\tleast-sessions\nDynamic Ratio (member)\tdynamic-ratio-member\nDynamic Ratio (node)\tdynamic-ratio-node\nFastest (application)\tfastest-app-response\nFastest (node)\tfastest-node\nObserved (member)\tobserved-member\nObserved (node)\tobserved-node\nPredictive (member)\tpredictive-member\nPredictive (node)\tpredictive-node\nRound Robin\tround-robin\nRatio (member)\tratio-member\nRatio (node)\tratio-node\nRatio (session)\tratio-session\nRatio Least Connections (member)\tratio-least-connections-member\nRatio Least Connections (node)\tratio-least-connections-node\nWeighted Least Connections (member)\tweighted-least-connections-member"
    } else {
        set choices "Round Robin\tround-robin\nRatio (member)\tratio-member\nRatio (node)\tratio-node"
    }
    return $choices
}

section intro {
    
    message hello_supported "This iApp template officially supports Citrix Xendesktop 7.6, 7.5, 7.1, 7.0, 5.6, XenApp 7.6, 7.5, 6.5, Web Interface 5.4, and StoreFront 3.0, 2.6, 2.5, 2.1, 2.0, and 1.2."

    message hello "Use this template to configure availability and Secure ICA proxy remote access for your XenApp or XenDesktop environment. This template configures the BIG-IP Local Traffic Manager (LTM) module, the Access Policy Manager (APM), or both, for Citrix services."
    message check_for_updates "Ensure you are using the most recent template before continuing. Check for newer versions on DevCentral or the AskF5 Knowledge Base (http://support.f5.com/kb/en-us/solutions/public/13000/400/sol13422.html)."

    optional ( "HIDE" == "THIS" ) {
        choice apm_provisioned tcl { expr { [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_provisioned apm] ? "yes":"no" }}
        choice afm_provisioned tcl { expr { [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_provisioned afm] ? "yes":"no" }}
        choice is_v11_4 tcl { expr { [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_tmos_version >= 11.4] ? "yes" : "no" }}
        choice is_v11_5 tcl { expr { [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_tmos_version >= 11.5] ? "yes" : "no" }}
        choice is_v12_0 tcl { expr { [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_tmos_version >= 12.0] ? "yes" : "no" }}
        choice is_admin tcl { expr { [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_user -is_admin] ? "yes" : "no" }}
    }
    optional ( is_admin == "no" ) {
        message non_admin_warning "You have opened this iApp while logged into the BIG-IP system as a user that is not assigned the Administrator role.  You can run this iApp with the BIG-IP role of 'Manager', however APM Two-Factor Authentication, custom APM pool captions, and the entire AFM section will be disabled due to the restrictions of the role. Also note, if you attempt to use the iApp's Reconfigure feature while logged in as a Manager, and the iApp was initially configured by a user with the Admin role, there may be errors if any of the features configured by the Admin are unavailable to the Manager role."
    }
    optional ( afm_provisioned == "no" ) {
        message afm_opportunity "Provisioning BIG-IP Application Firewall Manager (AFM) enables additional options in this template."
    }
    optional ( apm_provisioned == "no" ) {
        message apm_opportunity "Provisioning BIG-IP Access Policy Manager (APM) enables additional options in this template."
    }

    message prereqs "To process encrypted traffic on this BIG-IP system, you must import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for the traffic. Importing SSL certificates and keys is not a part of this template; see System > File Management > SSL Certificate List. This template can make use of existing Route Domains. Creating Route Domains is not part of this template; see Network > Route Domains."
    message profiles_message "This template includes the option of configuring the BIG-IP system to perform TCP optimization, and persistence through the use of profiles. The template uses F5 recommended settings for each profile by default, but provides the option of using your own custom profiles. Creating custom profiles is not a part of this template; see Local Traffic > Profiles > Protocol > TCP for TCP optimization profiles, and Profiles: Persistence for profiles for persistent connections. Additional information on these profiles can be found on the Help tab and in BIG-IP product documentation."
}

section general {
    # Define the level of inline assistance shown to the user. We don't
    # offer an option for zero assistance, because some notes and warnings
    # are too critical to hide. Choices "full"  , "condensed" and "minimal"
    # affect all sections in the rest of the template, but not messages
    # in the Introduction.
    choice assistance_options display "xxlarge" default "full" {
        "Yes, show inline help text"       => "full"  ,
        "No, do not show inline help text" => "minimal"
    }
    optional ( assistance_options == "full" ) {
        message assistance_options_about "This template offers extensive inline assistance, notes, and configuration tips. We strongly recommend reading the inline help presented in the template until you are familiar with the functionality and implications of the deployment options. Important notes are always shown no matter which selection you make here."
    }

    choice config_mode display "xxlarge" default "basic" {
        "Basic - Use F5's recommended settings" => "recommended"  ,
        "Advanced - Configure advanced options" => "advanced"
    }
    optional ( assistance_options == "full" ) {
        message config_mode_info "This template supports two configuration modes. Basic mode automatically configures many options, such as load balancing method or profile types, on the BIG-IP system using F5 recommended settings without user intervention. Advanced mode allows you to review and edit the F5 recommended settings before configuring the system."
    }

    optional ( intro.apm_provisioned == "yes" ) {

        choice scenario display "xxlarge" default "apm_scenario" {
            "No, do not proxy ICA traffic and authenticate users with the BIG-IP" => "lb_scenario"  ,
            "Yes, proxy ICA traffic and authenticate users with the BIG-IP"       => "apm_scenario"
        }
        optional ( scenario == "lb_scenario" ) {
            optional ( assistance_options == "full" ) {
                message scenario_1_note_when_to_use "Use this scenario if you have only one BIG-IP system or redundant pair, on which LTM is licensed and provisioned, or if you have two BIG-IP systems, with LTM licensed and provisioned on this system, and APM or Edge Gateway licensed and provisioned on the other."
            }

            optional ( assistance_options == "full" ) {
                message scenario_1_note_full "This selection configures the BIG-IP LTM with one or more virtual servers for XenApp or XenDesktop HTTP traffic to the Web Interface or StoreFront servers, and a virtual server for the Web Interface or StoreFront servers to connect to the XML Broker or Desktop Delivery Controller (DDC) servers. You may also choose to direct all ICA traffic through this BIG-IP system for security, logging, or network topology purposes. In order to complete a deployment involving APM or Edge Gateway, you must run this template on your separate BIG-IP system and select the option 'Yes, proxy ICA traffic and authenticate users with the BIG-IP system'. You must provide the IP address of the virtual server you configure in this template when configuring the template on the separate BIG-IP system."
            }
        }

        optional ( scenario == "apm_scenario" ) {

            optional ( assistance_options == "full" ) {
                message scenario_2_note_when_to_use "Select this option if you have APM licensed and provisioned on this BIG-IP system, want to securely proxy application (ICA) traffic, and want to authenticate users using this BIG-IP system. You may send traffic to a separate BIG-IP system running LTM, or send traffic directly to Citrix servers."
            }

            optional ( assistance_options == "full" ) {
                message scenario_2_note_full "This selection configures the BIG-IP system with APM and uses a single HTTPS (port 443) virtual server to provide proxy authentication and secure remote access to XenApp or XenDesktop services without requiring the use of an F5 Edge Client."
                message scenario_2_note_full_2 "This selection also provides the option of using BIG-IP Dynamic Presentation Webtop functionality to replace Citrix Web Interface or StoreFront servers in the Virtual Server for Web Interface or StoreFront servers section."
            }
        }
    }

    string domain_name required display "xxlarge"
    optional ( assistance_options ==  "full" ) {
        message domain_name_full "Specify the Windows domain that is used to authenticate Citrix user accounts. This domain name must be in NetBIOS format."
    }
}

optional ( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" ) {
    section apm {

        choice smartcard display "xxlarge" default "No" {
            "No, BIG-IP APM should not support smart card authentication" => "No"  ,
            "Yes, BIG-IP APM should support smart card authentication" => "Yes"
        }
        optional ( general.assistance_options == "full" ) {
            message smartcard_full "Select whether your Citrix clients will use smart cards to access the Citrix implementation. If you select Yes, the iApp configures the BIG-IP APM to authenticate to the Citrix Web Interface or StoreFront servers (for both XenApp and XenDesktop), using smart cards. With this implementation users must enter their PIN twice, once as they authenticate to the Web Interface or StoreFront server, and once as the Citrix application or desktop is launched."
        }

        optional ( intro.is_v11_4 == "yes" || apm.smartcard == "No" ) {
            choice replace_webui_question display "xxlarge" default "replace" {
                "Yes, replace Citrix Web Interface or StoreFront servers with the BIG-IP system" => "replace"  ,
                "No, do not replace Citrix Web Interface or StoreFront servers" => "do_not_replace"
            }
            optional ( general.assistance_options ==  "full" ) {
                message replace_webui_full "If you choose to replace the Web Interface or StoreFront servers with the BIG-IP system, Citrix published applications are presented using an F5 Dynamic Presentation Webtop instead of the Citrix Web Interface or StoreFront. With this approach, you do not need Citrix Web Interface or StoreFront servers in your environment. This BIG-IP system must have connectivity to a Citrix XML Broker or DDC server, or a BIG-IP virtual server that load balances a pool of XML Broker or DDC servers. If you do not replace the Web Interface or StoreFront servers with the BIG-IP system, Citrix published applications are presented using Citrix Web Interface or StoreFront servers."
            }
        }

        optional ( smartcard == "Yes" ) {

            optional ( general.assistance_options == "full" ) {
                message smartcard_yes_full "Guidance for configuring your Active Directory and Citrix servers for smart card support is available in our deployment guide: http://www.f5.com/pdf/deployment-guides/iapp-xenapp-xendesktop-dg.pdf"
            }

            optional ( replace_webui_question == "replace" && general.assistance_options == "full" ) {
                message replace_webui_yes_full "Citrix XML Brokers and Desktop Delivery Controllers require that SID enumeration is enabled when using smart card authentication with Webtops. Citrix article CTX117489 describes how to enable SID enumeration for XenApp servers and CTX129968 describes the process for Desktop Delivery Controllers. XML Brokers and DDCs also need to trust XML requests sent to XML services. Citrix article CTX132461 contains procedures on how to enable XML trust on DDC."
            }

            choice smartcard_upn display "xxlarge" default "Yes" {
                "No, the UPNs are different" => "No"  ,
                "Yes, the UPNs are the same" => "Yes"
            }
            optional ( general.assistance_options == "full" ) {
                message smartcard_upn_full "The User Principal Name (UPN) being used for smart card authentication can be the same as your Citrix Active Directory Domain, but is often unique. If you select 'No, the UPNs are different' the iApp creates an Active Directory AAA Server profile object which is used to query and determine the correct UPN to use. If you select 'Yes, the UPNs are the same' the iApp does not create the Active Directory AAA Server object."
            }

            optional ( replace_webui_question == "do_not_replace"
                       || intro.is_v11_4 == "no" ) {
                string smartcard_realm display "xxlarge" required
                optional ( general.assistance_options ==  "full" ) {
                    message smartcard_realm_full "Specify the Kerberos Realm used by smart cards to authenticate."
                }
                string smartcard_user display "xxlarge" required
                optional ( general.assistance_options ==  "full" ) {
                    message smartcard_user_full "Specify a service account in SPN format which can be used to enable Kerberos Protocol Transition and Constrained Delegation from the BIG-IP system to Web Interface or StoreFront resources. The following is an example of a user account in SPN format: host/user@domain.com. Note the service is 'host' and the service name is user@domain.com."
                }
                password smartcard_password display "xxlarge" required
                optional ( general.assistance_options ==  "full" ) {
                    message smartcard_password_full "In BIG-IP versions earlier than 11.4, credentials are stored in plaintext on your BIG-IP system. In version 11.4 and later, these passwords are obfuscated."
                }
                string smartcard_kdc display "xxlarge"
                optional ( general.assistance_options ==  "full" ) {
                    message smartcard_kdc_full "This is normally an Active Directory domain controller. If you leave this empty, the KDC must be discoverable through DNS, for example, BIG-IP system must be able to fetch SRV records for the server realm's domain, where the name is usually the same as the realm's name. If the domain name is different from the realm name, it must be specified in /etc/krb5.conf file, otherwise adding the realm configuration to that file is not required. Kerberos SSO processing is fastest when KDC is specified by its IP address, and slower if it is specified by host name, and even slower if it is left empty (due to additional DNS queries). When the user's realm is different from the server's realm, KDC must be left empty. This is also true in cases of multi-domain realms. If you leave this field blank, set dns_lookup_kdc parameter to equal true in BIG-IP /etc/krb5.conf file."
                }
            }
        }

        optional ( smartcard == "No" || smartcard_upn == "No" ) {

            choice aaa_profile display "xxlarge" default "/#create_new#" tcl {
                set ::choices "Create a new AAA Server object\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain apm aaa active-directory]"
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options == "full" ) {
                message aaa_profile_full "Choose whether you want the template to create a new AAA Server object for your BIG-IP APM implementation or use an existing one. The AAA Server contains information about your Active Directory deployment. Unless you have created a custom AAA server specifically for this implementation, we recommend allowing the iApp to create a new one."
            }
            optional ( aaa_profile == "/#create_new#" ) {

                string login_domain display "xxlarge" required
                optional ( general.assistance_options == "full" ) {
                    message login_domain_full "Specify the fully qualified domain name of the Active Directory implementation used in your Citrix environment. For example: citrix.mycompany.com."
                }

                table active_directory_server {
                    string host display "large" required validator "Fqdn"
                    string addr display "medium" required validator "IpOrFqdn"
                }
                optional ( general.assistance_options == "full" ) {
                    message active_directory_server_full "Specify both the fully qualified host name and IP address of each Active Directory server that is a part of this Citrix environment. Click 'Add' to include each additional server.  Note that this BIG-IP system must have a route and access to the domain controllers."
                }

                choice allow_anonymous_binding display "xxlarge" default "anonymous_allowed" {
                    "Yes, anonymous binding is allowed"        => "anonymous_allowed"  ,
                    "No, credentials are required for binding" => "credentials_required"
                }
                optional ( general.assistance_options == "full" ) {
                    message allow_anonymous_binding_full "Choose whether your Active Directory implementation allows anonymous binding or not. If it does not, you must provide a user name and password with administrative permissions."
                }
                optional ( allow_anonymous_binding == "credentials_required" ) {
                    message credentials_note "In BIG-IP versions earlier than 11.4, credentials are stored in plaintext on your BIG-IP system. In version 11.4 and later, these passwords are obfuscated."
                    string active_directory_username display "xxlarge" required
                    optional ( general.assistance_options == "full" ) {
                        message active_directory_username_full "Specify an Active Directory user with administrative permissions. We strongly recommend using a service account that does not expire, or expires during a known maintenance window. Users will be unable to login if this account becomes locked, if the password changes, or if the account is deleted from the domain controller."
                    }
                    password active_directory_password required
                }

                choice ad_monitor display "xxlarge" default "ad_create" tcl {
                    set ::choices "Create a new LDAP monitor for the Active Directory pool\tad_create\nUse a simple ICMP monitor for the Active Directory pool\tad_icmp\nDo not monitor Active Directory\tad_none\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "ldap" ltm monitor ldap]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
                optional ( general.assistance_options == "full" ) {
                    message ad_monitor_help "Choose whether you want the template to create a new LDAP monitor for your Active Directory servers or use a simple ICMP/ping monitor. You can also choose an existing monitor you created for the servers from the list."
                }
                optional ( ad_monitor == "ad_create" ) {
                    string ad_user required display "xxlarge"
                    message ad_user_critical "The LDAP health monitor requires a user name and password which it uses to log into the servers in order to determine status. The Active Directory service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your Active Directory pool members as unavailable, which takes them offline."

                    password ad_password required display "xxlarge"
                    message ad_password_important "In BIG-IP versions earlier than 11.4, credentials are stored in plaintext on your BIG-IP system. In version 11.4 and later, these passwords are obfuscated."

                    string ad_tree required display "xxlarge"
                    optional ( general.assistance_options ==  "full" ) {
                        message ad_tree_info "Specify the LDAP tree for the user name you provided. ADSI editor, an administration tool for Active Directory LDAP administration, is useful for determining the correct LDAP tree value. For example, if the user name is 'user1' which is in the organizational unit 'Citrix Users' and is in the domain 'citrix.example.com', the LDAP tree would be: ou=Citrix Users, dc=Citrix, dc=example, dc=com."
                    }

                    choice ad_secure display "xxlarge" {
                        "No, a secure protocol is not required" => "none"  ,
                        "Yes, SSL communication is required"     => "ssl"  ,
                        "Yes, TLS communication is required"    => "tls"
                    }
                    optional ( general.assistance_options ==  "full" ) {
                        message ad_secure_info "Select whether your Active Directory implementation requires a secure protocol (SSL or TLS) for communication, or if it does not use a secure protocol."
                    }

                    optional ( general.config_mode == "advanced" ) {
                        string ad_interval default "10" validator "NonNegativeNumber"
                        optional ( general.assistance_options ==  "full" ) {
                            message ad_interval_info "Specify the number of seconds that should pass between each health monitor attempt. Members of this pool are marked down after four incorrect responses, and marked available after one correct response. "
                        }

                        optional ( ad_secure == "ssl" ) {
                            string ad_port_ssl default "636" required validator "PortNumber"
                        }
                        optional ( ad_secure != "ssl" ) {
                            string ad_port_not_ssl default "389" required validator "PortNumber"
                        }

                        optional ( general.assistance_options ==  "full" ) {
                            message ad_port_info "Specify the port being used by your Active Directory deployment.  The default port when using the TLS security protocol, or no security, is port 389. The default port used when using the SSL security protocol is 636."
                        }
                    }
                }
            }
        }

        optional ( smartcard == "No" ) {
            optional ( intro.is_admin == "no" ) {
                message non_admin_rsa "Question Disabled: Two-factor authentication cannot be configured by a user in the Manager role. Login as Administrator to configure two-factor auth."
            }
            optional ( intro.is_admin == "yes" ) {
                choice rsa default "No" display "xxlarge" {
                    "No, do not configure the BIG-IP system for two-factor authentication" => "No"  ,
                    "Yes, configure the BIG-IP system for two-factor authentication"       => "Yes"
                }
                optional ( rsa == "No" && general.assistance_options ==  "full" ) {
                    message rsa_no_full "Specify whether you are using RSA SecurID two-factor Authentication and want the BIG-IP system to proxy SecurID authentication communications, or not. If using RSA SecurID for two-factor authentication, you need to upload your SecurID access agent configuration file to this BIG-IP system using iFile prior to running this iApp. If you have not uploaded your SecurID configuration file to System > File Management > iFile List, you can choose 'No' now and re-enter this template to configure RSA at a later time. "
                }

                optional ( rsa == "Yes" ) {
                    optional ( general.assistance_options ==  "full" ) {
                        message rsa_yes_full "Choose the AAA Server object you configured for RSA SecurID, which must include your SecurID Configuration file. You must also configure the BIG-IP system as a standard authoritative agent on the RSA Authentication server. For information on configuring the RSA server, see the RSA documentation."
                    }

                    choice rsa_aaa display "xxlarge" tcl {
                        set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain apm aaa securid]
                        return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                    }
                    optional ( general.assistance_options ==  "full" ) {
                        message rsa_aaa_full ""
                    }

                    string rsa_token_field required default "Passcode" display "xxlarge"
                    optional ( general.assistance_options ==  "full" ) {
                        message rsa_token_field_full "An additional field is added to the initial web logon form that is used to collect the password generated from RSA. Type a descriptive name to use for this field."
                    }
                }
            }
        }

        optional ( intro.is_v12_0 == "yes" ) {
            choice logging display "xxlarge" default "/Common/default-log-setting" tcl {
                set log ""
                catch {
                    set log [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items apm log-setting]
                } err
                set ::choices "Do not specify a logging profile for the APM profile\t/#do_not_use#\n$log"
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options ==  "full" ) {
                message logging_inline_help "Select APM logging profile to use for the Access Policy created for this iApp deployment."
            }
        }
    }
}

optional ( intro.afm_provisioned == "yes" && intro.is_v11_4 == "yes" ) {
    section afm {
        optional ( intro.is_admin == "no" ) {
            message non_admin_afm "AFM cannot be configured by a user in the Manager role. Login as Administrator to deploy or re-deploy this iApp with AFM."
        }
        optional ( intro.is_admin == "yes" ) {
            choice policy default "/#do_not_use#" display "xxlarge" tcl {

                set ::choices "Yes, use F5's recommended AFM configuration\t/#default#\nNo, do not use AFM to secure your application\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain security firewall policy]"
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options == "full" ) {
                message policy_full "BIG-IP Advanced Firewall Manager (AFM) is a high-performance, stateful, full-proxy network firewall designed to guard data centers against incoming threats that enter the network on the most widely deployed protocols.  BIG-IP AFM must be fully licensed and provisioned to use this functionality."
            }
            optional ( policy == "/#default#" ) {

                choice restrict_by_addr default "/#do_not_use#" display "xxlarge" tcl {

                    set ::choices "No, do not restrict source addresses (allow all sources)\t/#do_not_use#\nRestrict source addresses\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain security firewall address-list]"
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
                optional ( general.assistance_options == "full" ) {
                    message restrict_full "You can use the BIG-IP AFM to restrict access to your application by either IP address or network address. If enabled, the system will only allow access to the virtual server from the address(es) you specify."
                }
                optional ( restrict_by_addr == "/#create_new#" ) {
                    string allowed_addr display "xxlarge" required
                    optional ( general.assistance_options == "full" ) {
                        optional ( intro.is_v11_5 == "yes" ) {
                            message allowed_addr_full_1 "Specify the IP or network address that should have access to the application.  You can use a single IP address, a list of IP addresses separated by spaces, a range of IP addresses separated by a dash (for example 192.0.2.10-192.0.2.100), a single network address, such as 192.0.2.0/24, or any combination of these."
                        }
                        optional ( intro.is_v11_5 == "no" ) {
                            message allowed_addr_full_2 "Specify the IP or network address that should have access to the application.  You can use a single IP address, such as 192.0.2.100 or a network address, such as 192.0.2.0/24."
                        }
                    }
                }
            }
            optional ( policy != "/#do_not_use#" ) {
                choice restrict_by_reputation default "accept" display "xxlarge" {
                    "Allow all sources regardless of reputation" => "accept"  ,
                    "Reject access from sources with a low reputation" => "reject"  ,
                    "Allow but log access from sources with a low reputation" => "warn"
                }
                optional ( general.assistance_options == "full" ) {
                    message restrict_by_reputation_full "The BIG-IP AFM uses an IP intelligence database to categorize IP addresses coming into the system. Select the way you want the system to handle IP addresses with a low reputation score."
                }
                optional ( general.assistance_options == "full" && restrict_by_reputation != "accept" ) {
                    message restrict_by_reputation_log "By default, IP Intelligence events are logged to Security > Event Logs > Network > IP Intelligence.  For the best performance, F5 recommends creating a remote logging profile to log IP Intelligence events. "
                }
                message restrict_by_reputation_warn "You must have an active IP Intelligence license for IP reputation-based access control to function correctly. "

                choice staging_policy default "/#do_not_use#" display "xxlarge" tcl {

                    set ::choices "Do not apply a staging policy\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain security firewall policy]"
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
                message staging_policy1_full "A policy in Staging mode does not block any traffic, and only logs what would be blocked if the policy were placed into production."

                optional ( general.assistance_options == "full" ) {
                    message staging_policy_full "A staged policy allows you to evaluate the effect a policy has on traffic by analyzing the system logs, without actually modifying traffic based on the firewall rules.  You must already have a policy on the system in order to select it from the list.  For specific information on creating a staging policy, see the AFM documentation."
                }
                choice security_logging default "/#do_not_use#" display "xxlarge" tcl {

                    # Menu should display all log profiles with "network none".
                    # tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items will not filter security log profiles,
                    # so the filter has been written inline here.
                    set ::choices "Do not use a logging profile\t/#do_not_use#\n"
                    if { [catch {
                        set profile_list [tmsh::list security log profile all-properties recursive]
                        if { [tmsh::pwd] != "/Common" } {
                            tmsh::cd /Common
                            append profile_list [tmsh::list security log profile all-properties recursive]
                        }
                    } err] } {
                        set profile_list " "
                    }
                    array set profiles \
                        [string map {"security log profile" ""} $profile_list]
                    foreach name [array names profiles] {
                        array set subprofile $profiles($name)
                        if { [info exists subprofile(network)] && \
                            $subprofile(network) != "none" } {
                            append ::choices "$name\n"
                        }
                    }
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
                optional ( general.assistance_options == "full" ) {
                    message security_logging_full "The logging profile enables you to log detailed information about BIG-IP system Network Firewall events and store those logs on the BIG-IP system or a remote logging server (syslog or Splunk). If you want to use a logging profile, we recommend creating one outside this template. Only logging profiles with Network Firewall enabled appear in the list. "
                    message security_logging1_full "If you are also using BIG-IP ASM, and the logging profile you created has both Application Security and Network Firewall enabled in the same profile, you must also select that profile here. See the BIG-IP AFM documentation for specific information on Logging profiles."
                }
            }
        }
    }
}

section webui_virtual {

    optional ( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
             || apm.replace_webui_question == "do_not_replace"
             || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" )) {

        choice reencrypt_traffic display "xxlarge" default "do_not_reencrypt" {
            "Terminate SSL for clients, plaintext to Citrix servers (SSL offload)" => "do_not_reencrypt"  ,
            "Terminate SSL for clients, re-encrypt to Citrix servers (SSL bridging)" => "reencrypt"
        }
        optional ( general.assistance_options ==  "full" ) {
            message reencrypt_traffic_webui_full "Chose how you want the BIG-IP system to process encrypted traffic destined for the Web Interface or StoreFront servers.  Select SSL offload to have Citrix Web Interface or StoreFront traffic sent to Citrix Web Interface or StoreFront servers unencrypted. Select SSL Bridging to have Citrix Web Interface or StoreFront traffic sent to Citrix Web Interface or StoreFront servers encrypted."
        }
    }

    choice clientssl_profile default "/#create_new#" display "xxlarge" tcl {
        set ::choices "Create a new Client SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm profile client-ssl]"
        return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
    }
    optional ( general.assistance_options ==  "full" ) {
        message clientssl_profile_full "If you have already created a Client SSL profile that includes the appropriate certificate and key, you can select it from the list.  Otherwise, the iApp creates a new Client SSL profile."
    }

    optional (clientssl_profile == "/#create_new#") {

        choice cert default "/Common/default.crt" display "xxlarge" tcl {
            set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        optional ( general.assistance_options ==  "full" ) {
            message cert_webui_full "Select the certificate the system uses for client-side SSL processing. Importing SSL certificates and keys is not a part of this template. To select any new certificates and keys you import, you need to restart or reconfigure this template to have them appear in the list."
        }

        choice key default "/Common/default.key" display "xxlarge" tcl {
            set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -norecursive -filter security-type ne "password" sys file ssl-key]
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        optional ( general.assistance_options ==  "full" ) {
            message key_webui_full "Select the name of the associated SSL key."
        }

        optional ( cert == "/Common/default.crt" || key == "/Common/default.key" ) {
            message key_cert_critical "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used to access the application. To select any new certificates and keys you import, you need to restart or reconfigure this template."
        }
        message ssl_warn "If your key is password-protected, you must manually create a Client SSL profile outside the iApp, and then select it from the list above."

        optional ( general.scenario == "lb_scenario" || intro.apm_provisioned == "no" || apm.smartcard == "No" ) {
            choice cert_chain display "xxlarge" default "/#do_not_use#" tcl {
                set ::choices "Do not use an intermediate certificate\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -norecursive sys file ssl-cert]"
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options ==  "full" ) {
                message cert_chain_full "Intermediate certificates or intermediate certificate chains are used to help systems which depend on SSL certificates for peer identification. The chain certificate is intended to create a chain of trust between the CA that signed the certificate and the CA that is already trusted by the recipient of the certificate. This allows the recipient to verify the validity of the certificates presented, even when the signing CA is unknown. Chain certificates must be created or imported onto this BIG-IP system prior to running this iApp. See SOL13302 on http://support.f5.com for help on creating an intermediate certificate chain."
            }
        }
    }

    optional (( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
             || apm.replace_webui_question == "do_not_replace"
             || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
             && reencrypt_traffic == "reencrypt" ) {
        choice serverssl_profile default "/#create_new#" display "xxlarge" tcl {
            set ::choices "Create a new Server SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm profile server-ssl]"
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        optional ( general.assistance_options ==  "full" ) {
            message serverssl_profile_full "With SSL Bridging, the BIG-IP system accepts encrypted (HTTPS) traffic from clients, decrypts it for processing and optimization, and then re-encrypts it (HTTPS) before sending it to the servers. The servers must also process the encrypted traffic, so you have to install and manage certificates on both the servers and the BIG-IP system. Certificates that you install on the servers may be self-signed and can be a lesser encryption strength (shorter bit length) than the certificate on the BIG-IP system if internal encryption requirements are different than those that apply to public-facing traffic. You may need to import a certificate and key before deploying this template. See System > File Management > SSL Certificate List for importing certificates and keys. SSL Bridging requires a Server SSL profile."
        }
    }

    optional ( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" ) {
        optional ( apm.smartcard == "No" && apm.replace_webui_question == "do_not_replace" ) {
            string datagroup_uri display "xxlarge"
            optional ( general.assistance_options ==  "full" ) {
                message datagroup_uri_full "If you are using a default PNAgent URI, leave this field blank. If you are not using a default PNAgent URI, specify the custom PNAgent URI for your environment. Web Interface servers use /Citrix/PNAgent/config.xml as the default PNAgent URI. StoreFront also uses this URI if legacy PNAgent support is enabled, otherwise Citrix clients use /Citrix/<storename>/PNAgent/config.xml."
            }
        }

        optional ( apm.replace_webui_question == "do_not_replace"
                 || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" )) {

            choice logged_out_irule display "xxlarge" default "Yes" {
                "Yes, remove BIG-IP APM user sessions when users log out" => "Yes"  ,
                "No, do not remove BIG-IP APM user sessions when users log out" => "No"
            }
            optional ( general.assistance_options ==  "full" ) {
                message logged_out_irule_full "Choose whether you want the system to remove the APM session from the BIG-IP APM when users log out of the Web Interface or StoreFront servers. If you select Yes, the system terminates all active APM sessions for that user, including any open ICA sessions. If you select No,  the system leaves APM user sessions active when users are logged out from Citrix Web Interface or StoreFront servers. The BIG-IP APM removes these user sessions after the default idle timeout of 15 minutes."
            }
        }
    }

    string addr required validator "IpAddress" display "xxlarge"
    optional ( general.assistance_options ==  "full" ) {
        message addr_webui_full "Specify the IP address remote and local clients will resolve to for access to the Citrix environment through the BIG-IP system. The IP address you specify is used for either the BIG-IP virtual server for the Citrix Web Interface or StoreFront servers, or the BIG-IP Dynamic Presentation Webtop (if using BIG-IP APM)."
    }

    optional ( general.scenario == "lb_scenario" || intro.apm_provisioned == "no" || apm.replace_webui_question == "do_not_replace"
             || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" )) {
        choice cloud default "25" display "xxlarge" {
            # same answers map to "1" and "2" for backwards compatibility
            "Yes, my Citrix environment uses StoreFront 1.x, 2.0, or 2.1" => "1"  ,
            "Yes, my Citrix environment uses StoreFront 1.x, 2.0, or 2.1" => "2"  ,
            "Yes, my Citrix environment uses StoreFront 2.5 or 2.6" => "25"  ,
            "Yes, my Citrix environment uses StoreFront 3.0" => "3"  ,
            "No, my Citrix environment does not use StoreFront" => "0"
        }

        message cloud_info "StoreFront is the Web Interface server replacement product from Citrix. If you have replaced the standard Web Interface server with StoreFront, select the version of StoreFront you are using."

        optional ( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.smartcard == "No" && general.config_mode == "advanced" && intro.is_v11_4 == "yes") {
            table sta {
                string url display "xxlarge"
            }
            optional ( general.assistance_options ==  "full" ) {
                message sta_full "Some environments require Receiver client ICA files issued by Citrix Secure Ticket Authorities be unaltered by APM. If required, specify the full URL for each Citrix Secure Ticket Authority, such as https://<STA FQDN>/scripts/ctxsta.dll. Citrix Web Interface servers need to be configured to use Direct Gateway secure access mode. The Gateway setting on the Web interface servers uses the FQDN which resolves to the BIG-IP APM virtual server address. The Secure Ticket Authority URLs used in the Web Interface Gateway settings should match URLs you specify here."
            }
        }
    }

    optional ( general.scenario == "lb_scenario" || intro.apm_provisioned == "no" || apm.replace_webui_question == "do_not_replace"
             || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" )) {

        string custom_uri required display "xxlarge"
        optional ( general.assistance_options ==  "full" ) {
            message custom_uri_full "Specify the URI used for XenDesktop or XenApp on the Web Interface or StoreFront server. The default URI when using Web Interface servers for XenApp is '/Citrix/XenApp/'. The default URI for XenDesktop 5.x is '/Citrix/XenDesktopweb/'.  The URI when using StoreFront follows the pattern '/Citrix/<storename>Web/' where <storename> is replaced with the name you used when creating the store for this Citrix site. You can verify your URI for StoreFront by opening the StoreFront console and highlighting 'Receiver for Web'. Note the 'Website URL:' field contains the URI you should use."            }
    }

    string https_port required default "443" validator "PortNumber"
    optional ( general.assistance_options ==  "full" ) {
        message https_port_webui_full "Specify the port you want to use for the HTTPS virtual server. The default port 443 for encrypted web traffic."
    }

    optional ( apm.smartcard == "Yes" && clientssl_profile == "/#create_new#" ) {
        choice cert_bundle default "/Common/default.crt" display "xxlarge" tcl {
            set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -norecursive sys file ssl-cert]
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        optional ( general.assistance_options ==  "full" ) {
            message cert_bundle_full "Because you are supporting smart card authentication, you must have imported a Certificate Authority certificate bundle onto the BIG-IP system, or use the BIG-IP system's internal ca-bundle.crt bundle. If you want to use a third-party certificate bundle, it must already be imported onto the system for it to appear in this list.  The certificate bundle is used in the BIG-IP Client SSL profile created by the iApp in the Trusted Certificate Authorities and Advertised Certificate Authorities fields."
        }
    }

    optional ( general.config_mode == "advanced" ) {
        choice create_redir_vs default "create_redir_vs" display "xxlarge" {
            "Yes, redirect users to HTTPS" => "create_redir_vs"  ,
            "No, do not redirect users to HTTPS" => "do_not_create_redir_vs"
        }
        optional ( general.assistance_options ==  "full" ) {
            message create_redir_vs_full "It is common for users to mistakenly attempt insecure access (HTTP) to a secure application (HTTPS). The BIG-IP system can automatically redirect these connections to use an encrypted connection."
        }

        optional (create_redir_vs == "create_redir_vs") {
            string redir_port default "80" required validator "PortNumber"
        }
        optional ( general.assistance_options ==  "full" ) {
            message redir_port_full "Specify the HTTP port from which you want users redirected. The most common HTTP port is 80."
        }
    }

    choice location display "xxlarge" default "same_subnet" {
        "Same subnet for the virtual server and the Web Interface or StoreFront servers"       => "same_subnet"  ,
        "Different subnets for the virtual server and the Web Interface or StoreFront servers" => "different_subnet"
    }

    optional ( location == "same_subnet"
            && general.assistance_options ==  "full" ) {
        message location_same_full "Select this option if the Citrix Web Interface or StoreFront servers and this BIG-IP virtual server are on the same subnet. For example, the virtual server address you specified earlier is on network x.x.x.0/24 and your Web Interface or StoreFront servers are also on network x.x.x.0/24. If you chose to replace the Web Interface or StoreFront servers with the BIG-IP system, this question is referring to the XML Broker or Desktop Delivery Controller (DDC) servers."
    }
    optional ( location == "different_subnet"
            && general.assistance_options ==  "full" ) {
        message location_diff_full "Select this option if the Citrix Web Interface or StoreFront servers and this BIG-IP virtual server are on different subnets. For example, the virtual server address you specified earlier is on network x.x.x.0/24 and your Web Interface or StoreFront servers are on network y.y.y.0/24. If you chose to replace the Web Interface or StoreFront servers with the BIG-IP system, this question is referring to the XML Broker or Desktop Delivery Controller (DDC) servers."
    }

    optional ( location == "different_subnet" ) {
        choice snat display "xxlarge" default "no_bigip_gw" {
            "Web Interface or StoreFront servers use BIG-IP as the default gateway"        => "bigip_is_default_gw"  ,
            "Web Interface or StoreFront servers do NOT use BIG-IP as the default gateway" => "no_bigip_gw"
        }
        optional ( snat == "bigip_is_default_gw"
                && general.assistance_options ==  "full" ) {
            message snat_use_bigip_as_default_gw_full "Select this option if the Citrix Web Interface or StoreFront servers use the BIG-IP system as their default Gateway. SNAT is not used for this virtual server."
        }

        optional ( snat == "no_bigip_gw"
                && general.assistance_options ==  "full" ) {
            message snat_do_not_use_bigip_as_default_gw_full "Select this option if the Citrix Web Interface or StoreFront servers use a gateway other than the BIG-IP system."
        }
    }

    optional ( location == "same_subnet"
            || ( location == "different_subnet"
              && snat == "no_bigip_gw") ) {
        choice automap_or_pool display "xxlarge" default "automap" {
            "Fewer than 64,000 concurrent connections " => "automap"  ,
            "More than 64,000 concurrent connections"    => "need_snatpool"
        }

        optional ( general.assistance_options ==  "full" ) {
            message snatpool_message_2 "For environments with fewer than 64,000 concurrent connections per Web Interface or StoreFront server, the BIG-IP system enables SNAT Auto Map, which uses a unique IP:port combination for each client request it sends to the server. For environments with more than 64,000 concurrent connections per server, the BIG-IP system enables a SNAT pool, and additional IP addresses are reserved to ensure the system has enough unique combinations. If the system exhausts all combinations, new client connections are refused until one is available."
        }

        optional ( automap_or_pool == "need_snatpool" ) {
            table snatpool_members {
                string addr required validator "IpAddress" display "xxlarge"
            }
            optional ( general.assistance_options ==  "full" ) {
                message snatpool_members_full "Type the IP addresses you want to use for the SNAT Pool.  These addresses should be available IP addresses, not the self IP address(es) of the BIG-IP system."
            }
        }
    }

    optional ( general.config_mode == "advanced" ) {
        choice lan_or_wan default "WAN" display "xxlarge" tcl {
            set ::choices "Use F5 recommended optimizations for WAN clients\tWAN\nUse F5 recommended optimizations for LAN clients\tLAN\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm profile tcp]"
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }

        optional ( general.assistance_options ==  "full" ) {
            message lan_or_wan_full "Select the type of optimized TCP profile you want to use for this deployment.  The system optimizes communication between the BIG-IP system and the clients and the servers by controlling the behavior of the traffic which results in higher transfer rates, improved connection reliability and increased bandwidth efficiency. These optimizations are tuned specifically for WAN or LAN clients. If clients are using lower speeds or low performance connections, choose  F5 recommended optimizations for WAN clients.  If clients are using high speed and high performance local area connections, choose F5 recommended optimizations for WAN clients.  You can also select an existing TCP profile."
        }


        multichoice rules display "xxlarge" tcl {
            set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm rule]
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        message irules_note "Attaching iRules is an advanced feature and should be used only if you understand how each iRule will affect your deployment, including application behavior and the performance of the BIG-IP system."

        optional ( general.assistance_options ==  "full" ) {
            message irules_full "From the Options box, select the iRules you want to attach to this virtual server, and then click the Add (<<) button to move them to the Selected box."
        }
    }
}

section webui_pool {
    string webui_dns_name required display "xxlarge"
    optional ( general.assistance_options ==  "full" ) {
        message webui_dns_name_full "Specify the public DNS name of the Citrix Web Interface or StoreFront servers. This is the name that resolves to the Citrix Web Interface or StoreFront virtual server address you specified previously."
    }

    optional (general.scenario == "lb_scenario" || intro.apm_provisioned == "no" || apm.replace_webui_question == "do_not_replace"
         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" )) {

        choice pool display "xxlarge" default "/#create_new#" tcl {
            set ::choices "Create a new pool of Web Interface or StoreFront servers\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        optional ( general.assistance_options ==  "full" ) {
            message pool_full "Select this option to create a new pool for the Web Interface or StoreFront servers. You can add or delete pool members after completing the template by clicking Reconfigure on the menu bar for this Application Service."
        }
        optional ( pool == "/#create_new#" ) {

            optional ( webui_virtual.reencrypt_traffic == "do_not_reencrypt" ) {
                string http_port required default "80" validator "PortNumber"
                optional ( general.assistance_options ==  "full" ) {
                    message http_port_full "The default port is 80 for unencrypted web traffic (HTTP). Type the port being used on the Citrix Web Interface or StoreFront servers."
                }
            }

            optional ( webui_virtual.reencrypt_traffic == "reencrypt" ) {
                string https_port required default "443" validator "PortNumber"
                optional ( general.assistance_options ==  "full" ) {
                    message https_port_full "The default port is 443 for encrypted web traffic (HTTPS). Type the port being used on the Citrix Web Interface or StoreFront servers."
                }
            }

            optional ( general.config_mode == "advanced" ) {
                lb_method lb_method_choice
                optional ( general.assistance_options ==  "full" ) {
                    message lb_method_full "Select a load balancing method that best fits your environment. Descriptions of each load balancing method can be found on the Help tab of the Pool creation page."
                }

                choice slow_ramp_enable default "enable" display "xxlarge" {
                    "Yes, use Slow Ramp"        => "enable"  ,
                    "No, do not use Slow Ramp" => "disable"
                }
                optional ( general.assistance_options ==  "full" ) {
                        message slow_ramp_note "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added Citrix server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using the Least Connections load balancing method, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                    }
                optional ( slow_ramp_enable == "enable" ) {


                    string slow_ramp_setvalue default "300" required validator "NonNegativeNumber"
                    optional ( general.assistance_options ==  "full" ) {
                        message slow_ramp_time_note "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                    }
                }

                choice enable_pga default "no_pga" display "xxlarge" {
                    "No, do not use Priority Group Activation" => "no_pga"  ,
                    "Yes, use Priority Group Activation"        => "use_pga"
                }
                 optional ( general.assistance_options ==  "full" ) {
                        message pga_note "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                    }
                optional ( enable_pga == "use_pga" ) {


                    string min_active_members default "0" required validator "NonNegativeNumber"
                    optional ( general.assistance_options ==  "full" ) {
                        message pga_members_note "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next highest priority group number."
                    }
                }
            }

            table servers {
                string addr required validator "IpAddress" display "xlarge"
                optional ( general.config_mode == "advanced" ) {
                    string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                    optional ( lb_method_choice == "ratio-member"
                            || lb_method_choice == "ratio-node"
                            || lb_method_choice == "ratio-session"
                            || lb_method_choice == "ratio-least-connections-member"
                            || lb_method_choice == "ratio-least-connections-node"
                            || lb_method_choice == "dynamic-ratio-member"
                            || lb_method_choice == "dynamic-ratio-node") {
                        string ratio default "1" validator "NonNegativeNumber" display "small"
                    }
                    optional ( enable_pga == "use_pga" ) {
                        string priority default "0" required validator "NonNegativeNumber" display "small"

                    }
                }
            }
            optional ( general.assistance_options ==  "full" ) {
                message servers_full "Specify the IP addresses for the Citrix Web Interface or StoreFront servers."
            }

            choice monitor default "/#create_new#" display "xxlarge" tcl {
                set ::choices "Create a new health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }

            optional ( monitor == "/#create_new#" ) {
                optional ( general.assistance_options ==  "full" ) {
                    message monitor_full "Select this option to create a health monitor that queries Citrix Web Interface or StoreFront servers for the specific domain name service name and URL that you provide. The server member is only considered healthy if it responds properly."
                }

                string monitor_interval default "30" required validator "NonNegativeNumber"
                optional ( general.assistance_options ==  "full" ) {
                    message monitor_interval_full "Members of this pool are marked down after 4 incorrect responses, and marked available after 1 correct response.  Specify the number of seconds to use between each health monitor attempt."
                }
            }
        }
        optional ( pool != "/#create_new#" && intro.afm_provisioned == "yes" && intro.is_v11_4 == "yes" ) {
            choice pool_afm default "/#do_not_use#" display "xxlarge" tcl {
                set ::choices "Do not use AFM to secure your XML Broker servers\t/#do_not_use#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain security firewall policy]"
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]

            }
            message pool_afm_warning "To use AFM and an existing pool of Web Interface or StoreFront servers, you must manually create a Network Firewall Policy with all StoreFront or Web Interface servers configured as allowed source addresses. "

            optional ( general.assistance_options ==  "full" ) {
                message pool_afm_full "Because you previously chose to use BIG-IP AFM, and selected to use an existing pool for the StoreFront or Web Interface Servers, you must manually create an AFM Network Firewall Policy before completing the iApp. This policy must allow all of the Web Interface or StoreFront servers that are in the pool you selected as source addresses. The iApp attaches the policy you select to the xml_broker and xml_broker_enum virtual servers created by the iApp.  For specific instructions on creating a Network Firewall Policy, see the BIG-IP AFM documentation or online help."
            }
        }
    }
}

section xml_broker_virtual {
    optional ( general.config_mode == "advanced"
            && general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
            && apm.replace_webui_question == "replace"
            && ( intro.is_v11_4 == "yes" || apm.smartcard == "No" )) {
        choice xml_farms default "1" display "xxlarge" {
            "One single farm" => "1"  ,
            "Two farms"       => "2"  ,
            "Three farms"     => "3"  ,
            "Four farms"      => "4"  ,
            "Five farms"      => "5"
        }
        message xml_farms_full "Select how many unique XML Broker or Desktop Delivery Controller server farms you have in your implementation."

        optional ( general.assistance_options ==  "full" && xml_farms != "1" && intro.is_v11_4 == "no" ) {
            message xml_farms_warning "The version of the BIG-IP system you are using does not support Windows Receiver clients on multiple XML Broker and DDC farms, and only supports Window Receiver clients on the first XML Broker or DDC farm you specify.  If you need to support Windows Receiver clients on multiple farms, upgrade your BIG-IP system to version 11.4 or later."
            message xml_farms_full_11_3 "In the following field(s), specify a unique IP address for each XML Broker or Desktop Delivery Controller farm. You can use private internal IP addresses known to only this system."
        }
    }

    optional (intro.is_v11_4 == "no" || general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
             || apm.replace_webui_question == "do_not_replace") {

        string addr required validator "IpAddress" display "xxlarge"
        optional ( general.assistance_options ==  "full" && xml_farms == "1" ) {
            message addr_full "Type the IP address you want to use for this BIG-IP virtual server. This must be an IP address your Web Interface or StoreFront servers can access. Use this BIG-IP virtual server address as the Web Interface or StoreFront server 'Server Farm' address."
        }

        optional ( general.config_mode == "advanced"
                && general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                && apm.replace_webui_question == "replace"
                && xml_farms != "1" ) {
            string addr_2 required validator "IpAddress" display "xxlarge"
            optional ( xml_farms != "2" ) {
            string addr_3 required validator "IpAddress" display "xxlarge"
            optional ( xml_farms != "3" ) {
            string addr_4 required validator "IpAddress" display "xxlarge"
            optional ( xml_farms != "4" ) {
            string addr_5 required validator "IpAddress" display "xxlarge"
        }}}}
    }

    choice encrypted display "xxlarge" default "encrypted" {
        "XML Broker or DDC requests will arrive encrypted (HTTPS)"  => "encrypted"  ,
        "XML Broker or DDC requests will arrive unencrypted (HTTP)" => "unencrypted"
    }

    optional ( encrypted == "unencrypted" ) {
        optional ( general.assistance_options ==  "full" ) {
            message unencrypted_full "Select this option if XML Broker or Desktop Delivery Controller requests from the Web Interface or StoreFront servers will arrive unencrypted."
        }

        string http_port required default "80" validator "PortNumber"
        optional ( general.assistance_options ==  "full" ) {
            message http_port_full "Specify the port the unencrypted traffic is using. The default port is 8080 for older Citrix implementations sending unencrypted XML Broker server traffic (HTTP), and port 80 for newer implementations of XML Broker and Desktop Delivery Controllers. This must be the same port you configured for your Citrix XML Broker or DDC server farm."
        }
    }

    optional ( encrypted == "encrypted" ) {
        optional ( general.assistance_options ==  "full" ) {
            message encrypted_full "Select this option if XML Broker or Desktop Delivery Controller requests from the Web Interface or StoreFront servers will arrive encrypted."
        }
        string https_port required default "443" validator "PortNumber"
        optional ( general.assistance_options ==  "full" ) {
            message https_port_full "Specify the port the encrypted traffic is using. The default port is 443 for encrypted XML Broker server and Desktop Delivery controller traffic (HTTPS). This must be the same port you configured for your Citrix XML Broker or DDC server farm."
        }

        optional (intro.is_v11_4 == "no" || general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                 || apm.replace_webui_question == "do_not_replace") {

            choice cert default "/Common/default.crt" display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt sys file ssl-cert]
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options ==  "full" ) {
                message cert_full "Select the name of the certificate the system uses for client-side SSL processing. Certificates and Keys need to be created and imported prior to running this iApp."
            }

            choice key default "/Common/default.key" display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -norecursive -filter security-type ne "password" sys file ssl-key]
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options ==  "full" ) {
                message key_full "Select the name of the associated SSL key."
            }
            optional ( cert == "/Common/default.crt"
                    || key == "/Common/default.key" ) {
                message key_cert_critical "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used to access the application. To select any new certificates and keys you import, you need to restart or reconfigure this template."
            }
            message ssl_warn "If your key is password-protected, you must manually create a Client SSL profile outside the iApp, and then select it from the list above."
        }
    }

    optional (general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.replace_webui_question == "replace") {

        choice client_bundle default "/#create_new#" display "xxlarge" tcl {
            set ::choices "Create a new Citrix Client Bundle\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -nocomplain apm resource remote-desktop citrix-client-bundle]"
            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
        }
        optional ( general.assistance_options ==  "full" ) {
            message client_bundle_full "Select the Citrix Client Bundle you want to use for this implementation.  If you want to support HTML 5 clients for use when a Receiver client is not available, you must select a Citrix Client Bundle that you have already created that includes the proper Windows file package. Directions on how to create an HTML 5 Citrix Client Bundle are available in the F5 Deployment Guide (http://www.f5.com/pdf/deployment-guides/citrix-vdi-iapp-dg.pdf). If you do not require HTML 5 client support, or would like to use a custom URL, select Create a new Citrix Client Bundle. If you have already created a custom Citrix Client Bundle, you can select it from the list.  NOTE: HTML 5 Citrix Client support requires 11.4 or newer with the latest HF applied."
        }

        optional (client_bundle == "/#create_new#") {
            string client_bundle_url display "xxlarge" default "receiver.citrix.com" required
            optional (general.assistance_options == "full") {
                message client_bundle_url_full "Specify the URL where you want to direct users when a Citrix Receiver has not been detected."
            }
        }

        optional (intro.is_v12_0 == "yes" && general.config_mode == "advanced") {
	        table ica_parameters {
		        string name display "large"
		        string parameter display "large"
		        string value display "large"
            }
            optional ( general.assistance_options == "full" ) {
                message ica_parameters_inline_help "Specify ICA parameters you would like to use for each published resource. Leave Resource Name field blank if you would like the parameter to apply to all published applications and Desktop pools."
            }
        }
    }

    optional (intro.is_v11_4 == "no" || general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
             || apm.replace_webui_question == "do_not_replace") {

        choice location display "xxlarge" default "same_subnet" {
            "Same subnet for the virtual server and the XML Broker or DDC servers" => "same_subnet"  ,
            "Different subnets for the virtual server and the XML Broker or DDC servers" => "different_subnet"
        }
        optional ( location == "same_subnet"
                && general.assistance_options ==  "full" ) {
            message location_same_full "Select this option if the Citrix XML Broker or DDC servers and your BIG-IP XML Broker or DDC virtual server are on the same subnet. For example, the virtual server address you specified earlier is on network x.x.x.0/24 and your XML Broker or DDC servers are also on network x.x.x.0/24."

        }
        optional ( location == "different_subnet"
                && general.assistance_options ==  "full" ) {
            message location_diff_full "Select this option if the Citrix XML Broker or DDC servers and your BIG-IP XML Broker or DDC virtual server are on different subnets. For example, the virtual server address you specified earlier is on network x.x.x.0/24 and your XML Broker or DDC servers are on network y.y.y.0/24."
        }

        optional ( location == "different_subnet" ) {
            choice snat display "xxlarge" default "no_bigip_gw" {
                "XML Broker or DDC servers use the BIG-IP system as the default gateway" => "bigip_is_default_gw"  ,
                "XML Broker or DDC servers do NOT use BIG-IP system as the default gateway"  => "no_bigip_gw"
            }

            optional ( snat == "bigip_is_default_gw"
                    && general.assistance_options ==  "full" ) {
                message snat_bigip_is_default_gw_full "Select this option if the XML Broker or DDC servers use the BIG-IP system as their default Gateway. SNAT is not used for this virtual server."
            }
            optional ( snat == "no_bigip_gw"
                    && general.assistance_options ==  "full" ) {
                message snat_no_bigip_gw_full "Select this option if the XML Broker or DDC servers use a gateway other than the BIG-IP system."
            }
        }

        optional ( location == "same_subnet" || snat == "no_bigip_gw" ) {
            choice automap_or_pool display "xxlarge" default "automap" {
                "Fewer than 64,000 concurrent connections" => "automap"  ,
                "More than 64,000 concurrent connections"  => "need_snatpool"
            }

            optional ( general.assistance_options ==  "full" ) {
                message automap_or_pool_automap_message "For environments with fewer than 64,000 concurrent connections per XML Broker or DDC server, the BIG-IP system enables SNAT Auto Map, which uses a unique IP:port combination for each client request it sends to the server. For environments with more than 64,000 concurrent connections per server, the BIG-IP system enables a SNAT pool, and additional IP addresses are reserved to ensure the system has enough unique combinations. If the system exhausts all combinations, new client connections are refused until one is available."
            }
            optional ( automap_or_pool == "need_snatpool" ) {

                table snatpool_members {
                    string addr required validator "IpAddress" display "xxlarge"
                }
                optional ( general.assistance_options ==  "full" ) {
                    message snatpool_members_full "Type the IP addresses you want to use for the SNAT Pool.  These addresses should be available IP addresses, not the self IP address(es) of the BIG-IP system."
                }
            }
        }

        optional ( general.config_mode == "advanced" ) {
            optional ( general.scenario == "lb_scenario" || intro.apm_provisioned == "no" || apm.smartcard == "Yes" ) {

                choice xml_vlans display "xxlarge" default "all_vlans" {
                    "XML Broker or DDC traffic is allowed from all VLANs"           => "all_vlans"  ,
                    "XML Broker or DDC traffic is allowed from only specific VLANs" => "select_vlans_enabled"  ,
                    "XML Broker or DDC traffic is NOT allowed from specific VLANs"  => "select_vlans_disabled"
                }

                optional ( xml_vlans == "all_vlans"
                        && general.assistance_options == "full" ) {
                    message xml_vlans_all_full "Select this option if application traffic should be accepted on all VLANs."
                }

                optional ( xml_vlans == "select_vlans_enabled" ) {
                    optional ( general.assistance_options == "full" ) {
                        message xml_vlans_enabled_full "Select this option if application traffic should be accepted on selected VLANs and denied on all unselected VLANs."
                    }

                    multichoice xml_allowed_vlans display "xxlarge" tcl {
                        set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items net vlan]
                        return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                    }
                }

                optional ( xml_vlans == "select_vlans_disabled" ) {
                    optional ( general.assistance_options == "full" ) {
                        message xml_vlans_disabled_full "Select this option if application traffic should be denied on selected VLANs and accepted on all unselected VLANs. "
                    }

                    multichoice xml_denied_vlans display "xxlarge" tcl {
                        set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items net vlan]
                        return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                    }
                }
            }

            multichoice rules display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm rule]
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            message irules_note "Attaching iRules is an advanced feature and should be used only if you understand how each iRule will affect your deployment, including application behavior and the performance of the BIG-IP system."

            optional ( general.assistance_options ==  "full" ) {
                message irules_full "From the Options box, select the iRules you want to attach to this virtual server, and then click the Add (<<) button to move them to the Selected box."
            }
        }
    }
}

                section xml_broker_pool {
                    optional (( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#" ) {

                        choice pool default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\nUse the Web Interface or StoreFront pool members for XML Broker or DDC services\t/#use_webui_pool#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" ) {

                        choice pool_alt default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_alt_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.replace_webui_question == "replace") {
                        optional ( intro.is_admin == "no" ) {
                            message non_admin_caption "Question Disabled: Captions cannot be configured by a user in the Manager role. The caption will be left blank. Login as Administrator to configure captions."
                        }
                        optional ( intro.is_admin == "yes" ) {
                            string caption default "Farm Unavailable" display "xxlarge"
                            optional ( general.assistance_options ==  "full" ) {
                                message caption_full "You can optionally specify a caption which is displayed to users in the event the corresponding farm is unavailable. The caption is not required and has a 22 character limit."
                            }
                        }
                    }

                    optional ((( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#"
                         && pool == "/#create_new#" )
                         || ((( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" )
                         && pool_alt == "/#create_new#" )) {

                        optional ( general.config_mode == "advanced" ) {

                            lb_method lb_method_choice
                            optional ( general.assistance_options ==  "full" ) {
                                message lb_method_full "Select a load balancing method that best fits your environment. Descriptions of each load balancing method can be found on the Help tab of the Pool creation page, or in the Deployment Guide."
                            }
                            choice slow_ramp_enable default "enable" display "xxlarge" {
                                "Yes, use Slow Ramp"        => "enable"  ,
                                "No, do not use Slow Ramp" => "disable"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_note "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added Citrix server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using the Least Connections load balancing method, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                            }
                            optional ( slow_ramp_enable == "enable" ) {
                                string slow_ramp_setvalue default "300" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_time_note "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                                }
                            }
                            choice enable_pga default "no_pga" display "xxlarge" {
                                "No, do not use Priority Group Activation" => "no_pga"  ,
                                "Yes, use Priority Group Activation"        => "use_pga"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message pga_note "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                            }
                            optional ( enable_pga == "use_pga" ) {

                                string min_active_members default "0" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message pga_members_note "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next highest priority group number."
                                }
                            }
                        }

                        table servers {
                            string addr required validator "IpAddress" display "xlarge"


                            optional ( general.config_mode == "advanced" ) {


                                optional ( xml_broker_virtual.encrypted != "encrypted") {
                                    string port display "small" required default "80" validator "PortNumber"
                                }
                                optional ( xml_broker_virtual.encrypted == "encrypted" ) {
                                    string port_secure display "small" required default "443" validator "PortNumber"
                                }
                                string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                                optional ( lb_method_choice == "ratio-member" ||
                                           lb_method_choice == "ratio-node" ||
                                           lb_method_choice == "ratio-session" ||
                                           lb_method_choice == "ratio-least-connections-member" ||
                                           lb_method_choice == "ratio-least-connections-node" ||
                                           lb_method_choice == "dynamic-ratio-member" ||
                                           lb_method_choice == "dynamic-ratio-node" ) {
                                    string ratio default "1" validator "NonNegativeNumber" display "small"
                                }
                                optional ( enable_pga == "use_pga" ) {
                                    string priority default "0" required validator "NonNegativeNumber" display "small"
                                }
                            }
                        }
                        optional ( general.assistance_options ==  "full" ) {
                                    message servers_full "Type the IP addresses of your XML Broker or DDC servers.  Click Add to include more servers."
                            }

                        # start monitors
                        choice monitor default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new XML Broker or DDC server health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( monitor == "/#create_new#" ) {
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_full "Select this option to create a health monitor that queries XML Broker or DDC servers for available published applications using the user name, password, and name of a published application you provide. The server member is only considered healthy if the XML Broker or DDC server responds with the published application provided."
                            }
                            string monitor_interval default "30" required validator "NonNegativeNumber" display "small"
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_interval_full "Members of this pool are marked down after 4 incorrect responses, and marked available after 1 correct response.  Enter the number of seconds to use between each health monitor attempt."
                            }
                            string monitor_username required display "xxlarge"
                            message monitor_username_critical "The Citrix service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your XML Broker or DDC pool members as unavailable, which takes them offline."
                            password monitor_password required display "xxlarge"
                            message monitor_password_important "These credentials are stored in plaintext on your BIG-IP system."
                            string monitor_app display "xxlarge"
                            optional ( general.assistance_options == "full" ) {
                                message monitor_app_critical "The published application name is case sensitive and must exactly match the resource you have configured on your Citrix servers. It is important to use a published application that will always be available since all XML members will be marked down if chosen published application is removed or becomes unavailable."
                            }
                            message monitor_note_full "If you leave the published application field blank, the monitor marks the server UP if any response is received."
                        }
                    }
                }
optional ( general.config_mode == "advanced"
        && general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
        && apm.replace_webui_question == "replace"
        && xml_broker_virtual.xml_farms  != "1") {
    
                section xml_broker_pool_2 {
                    optional (( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#" ) {

                        choice pool default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\nUse the Web Interface or StoreFront pool members for XML Broker or DDC services\t/#use_webui_pool#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" ) {

                        choice pool_alt default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_alt_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.replace_webui_question == "replace") {
                        optional ( intro.is_admin == "no" ) {
                            message non_admin_caption "Question Disabled: Captions cannot be configured by a user in the Manager role. The caption will be left blank. Login as Administrator to configure captions."
                        }
                        optional ( intro.is_admin == "yes" ) {
                            string caption default "Farm Unavailable" display "xxlarge"
                            optional ( general.assistance_options ==  "full" ) {
                                message caption_full "You can optionally specify a caption which is displayed to users in the event the corresponding farm is unavailable. The caption is not required and has a 22 character limit."
                            }
                        }
                    }

                    optional ((( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#"
                         && pool == "/#create_new#" )
                         || ((( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" )
                         && pool_alt == "/#create_new#" )) {

                        optional ( general.config_mode == "advanced" ) {

                            lb_method lb_method_choice
                            optional ( general.assistance_options ==  "full" ) {
                                message lb_method_full "Select a load balancing method that best fits your environment. Descriptions of each load balancing method can be found on the Help tab of the Pool creation page, or in the Deployment Guide."
                            }
                            choice slow_ramp_enable default "enable" display "xxlarge" {
                                "Yes, use Slow Ramp"        => "enable"  ,
                                "No, do not use Slow Ramp" => "disable"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_note "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added Citrix server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using the Least Connections load balancing method, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                            }
                            optional ( slow_ramp_enable == "enable" ) {
                                string slow_ramp_setvalue default "300" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_time_note "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                                }
                            }
                            choice enable_pga default "no_pga" display "xxlarge" {
                                "No, do not use Priority Group Activation" => "no_pga"  ,
                                "Yes, use Priority Group Activation"        => "use_pga"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message pga_note "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                            }
                            optional ( enable_pga == "use_pga" ) {

                                string min_active_members default "0" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message pga_members_note "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next highest priority group number."
                                }
                            }
                        }

                        table servers {
                            string addr required validator "IpAddress" display "xlarge"


                            optional ( general.config_mode == "advanced" ) {


                                optional ( xml_broker_virtual.encrypted != "encrypted") {
                                    string port display "small" required default "80" validator "PortNumber"
                                }
                                optional ( xml_broker_virtual.encrypted == "encrypted" ) {
                                    string port_secure display "small" required default "443" validator "PortNumber"
                                }
                                string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                                optional ( lb_method_choice == "ratio-member" ||
                                           lb_method_choice == "ratio-node" ||
                                           lb_method_choice == "ratio-session" ||
                                           lb_method_choice == "ratio-least-connections-member" ||
                                           lb_method_choice == "ratio-least-connections-node" ||
                                           lb_method_choice == "dynamic-ratio-member" ||
                                           lb_method_choice == "dynamic-ratio-node" ) {
                                    string ratio default "1" validator "NonNegativeNumber" display "small"
                                }
                                optional ( enable_pga == "use_pga" ) {
                                    string priority default "0" required validator "NonNegativeNumber" display "small"
                                }
                            }
                        }
                        optional ( general.assistance_options ==  "full" ) {
                                    message servers_full "Type the IP addresses of your XML Broker or DDC servers.  Click Add to include more servers."
                            }

                        # start monitors
                        choice monitor default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new XML Broker or DDC server health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( monitor == "/#create_new#" ) {
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_full "Select this option to create a health monitor that queries XML Broker or DDC servers for available published applications using the user name, password, and name of a published application you provide. The server member is only considered healthy if the XML Broker or DDC server responds with the published application provided."
                            }
                            string monitor_interval default "30" required validator "NonNegativeNumber" display "small"
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_interval_full "Members of this pool are marked down after 4 incorrect responses, and marked available after 1 correct response.  Enter the number of seconds to use between each health monitor attempt."
                            }
                            string monitor_username required display "xxlarge"
                            message monitor_username_critical "The Citrix service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your XML Broker or DDC pool members as unavailable, which takes them offline."
                            password monitor_password required display "xxlarge"
                            message monitor_password_important "These credentials are stored in plaintext on your BIG-IP system."
                            string monitor_app display "xxlarge"
                            optional ( general.assistance_options == "full" ) {
                                message monitor_app_critical "The published application name is case sensitive and must exactly match the resource you have configured on your Citrix servers. It is important to use a published application that will always be available since all XML members will be marked down if chosen published application is removed or becomes unavailable."
                            }
                            message monitor_note_full "If you leave the published application field blank, the monitor marks the server UP if any response is received."
                        }
                    }
                }
    optional (xml_broker_virtual.xml_farms  != "2") {
        
                section xml_broker_pool_3 {
                    optional (( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#" ) {

                        choice pool default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\nUse the Web Interface or StoreFront pool members for XML Broker or DDC services\t/#use_webui_pool#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" ) {

                        choice pool_alt default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_alt_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.replace_webui_question == "replace") {
                        optional ( intro.is_admin == "no" ) {
                            message non_admin_caption "Question Disabled: Captions cannot be configured by a user in the Manager role. The caption will be left blank. Login as Administrator to configure captions."
                        }
                        optional ( intro.is_admin == "yes" ) {
                            string caption default "Farm Unavailable" display "xxlarge"
                            optional ( general.assistance_options ==  "full" ) {
                                message caption_full "You can optionally specify a caption which is displayed to users in the event the corresponding farm is unavailable. The caption is not required and has a 22 character limit."
                            }
                        }
                    }

                    optional ((( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#"
                         && pool == "/#create_new#" )
                         || ((( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" )
                         && pool_alt == "/#create_new#" )) {

                        optional ( general.config_mode == "advanced" ) {

                            lb_method lb_method_choice
                            optional ( general.assistance_options ==  "full" ) {
                                message lb_method_full "Select a load balancing method that best fits your environment. Descriptions of each load balancing method can be found on the Help tab of the Pool creation page, or in the Deployment Guide."
                            }
                            choice slow_ramp_enable default "enable" display "xxlarge" {
                                "Yes, use Slow Ramp"        => "enable"  ,
                                "No, do not use Slow Ramp" => "disable"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_note "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added Citrix server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using the Least Connections load balancing method, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                            }
                            optional ( slow_ramp_enable == "enable" ) {
                                string slow_ramp_setvalue default "300" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_time_note "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                                }
                            }
                            choice enable_pga default "no_pga" display "xxlarge" {
                                "No, do not use Priority Group Activation" => "no_pga"  ,
                                "Yes, use Priority Group Activation"        => "use_pga"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message pga_note "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                            }
                            optional ( enable_pga == "use_pga" ) {

                                string min_active_members default "0" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message pga_members_note "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next highest priority group number."
                                }
                            }
                        }

                        table servers {
                            string addr required validator "IpAddress" display "xlarge"


                            optional ( general.config_mode == "advanced" ) {


                                optional ( xml_broker_virtual.encrypted != "encrypted") {
                                    string port display "small" required default "80" validator "PortNumber"
                                }
                                optional ( xml_broker_virtual.encrypted == "encrypted" ) {
                                    string port_secure display "small" required default "443" validator "PortNumber"
                                }
                                string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                                optional ( lb_method_choice == "ratio-member" ||
                                           lb_method_choice == "ratio-node" ||
                                           lb_method_choice == "ratio-session" ||
                                           lb_method_choice == "ratio-least-connections-member" ||
                                           lb_method_choice == "ratio-least-connections-node" ||
                                           lb_method_choice == "dynamic-ratio-member" ||
                                           lb_method_choice == "dynamic-ratio-node" ) {
                                    string ratio default "1" validator "NonNegativeNumber" display "small"
                                }
                                optional ( enable_pga == "use_pga" ) {
                                    string priority default "0" required validator "NonNegativeNumber" display "small"
                                }
                            }
                        }
                        optional ( general.assistance_options ==  "full" ) {
                                    message servers_full "Type the IP addresses of your XML Broker or DDC servers.  Click Add to include more servers."
                            }

                        # start monitors
                        choice monitor default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new XML Broker or DDC server health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( monitor == "/#create_new#" ) {
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_full "Select this option to create a health monitor that queries XML Broker or DDC servers for available published applications using the user name, password, and name of a published application you provide. The server member is only considered healthy if the XML Broker or DDC server responds with the published application provided."
                            }
                            string monitor_interval default "30" required validator "NonNegativeNumber" display "small"
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_interval_full "Members of this pool are marked down after 4 incorrect responses, and marked available after 1 correct response.  Enter the number of seconds to use between each health monitor attempt."
                            }
                            string monitor_username required display "xxlarge"
                            message monitor_username_critical "The Citrix service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your XML Broker or DDC pool members as unavailable, which takes them offline."
                            password monitor_password required display "xxlarge"
                            message monitor_password_important "These credentials are stored in plaintext on your BIG-IP system."
                            string monitor_app display "xxlarge"
                            optional ( general.assistance_options == "full" ) {
                                message monitor_app_critical "The published application name is case sensitive and must exactly match the resource you have configured on your Citrix servers. It is important to use a published application that will always be available since all XML members will be marked down if chosen published application is removed or becomes unavailable."
                            }
                            message monitor_note_full "If you leave the published application field blank, the monitor marks the server UP if any response is received."
                        }
                    }
                }
        optional (xml_broker_virtual.xml_farms  != "3") {
            
                section xml_broker_pool_4 {
                    optional (( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#" ) {

                        choice pool default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\nUse the Web Interface or StoreFront pool members for XML Broker or DDC services\t/#use_webui_pool#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" ) {

                        choice pool_alt default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_alt_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.replace_webui_question == "replace") {
                        optional ( intro.is_admin == "no" ) {
                            message non_admin_caption "Question Disabled: Captions cannot be configured by a user in the Manager role. The caption will be left blank. Login as Administrator to configure captions."
                        }
                        optional ( intro.is_admin == "yes" ) {
                            string caption default "Farm Unavailable" display "xxlarge"
                            optional ( general.assistance_options ==  "full" ) {
                                message caption_full "You can optionally specify a caption which is displayed to users in the event the corresponding farm is unavailable. The caption is not required and has a 22 character limit."
                            }
                        }
                    }

                    optional ((( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#"
                         && pool == "/#create_new#" )
                         || ((( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" )
                         && pool_alt == "/#create_new#" )) {

                        optional ( general.config_mode == "advanced" ) {

                            lb_method lb_method_choice
                            optional ( general.assistance_options ==  "full" ) {
                                message lb_method_full "Select a load balancing method that best fits your environment. Descriptions of each load balancing method can be found on the Help tab of the Pool creation page, or in the Deployment Guide."
                            }
                            choice slow_ramp_enable default "enable" display "xxlarge" {
                                "Yes, use Slow Ramp"        => "enable"  ,
                                "No, do not use Slow Ramp" => "disable"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_note "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added Citrix server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using the Least Connections load balancing method, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                            }
                            optional ( slow_ramp_enable == "enable" ) {
                                string slow_ramp_setvalue default "300" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_time_note "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                                }
                            }
                            choice enable_pga default "no_pga" display "xxlarge" {
                                "No, do not use Priority Group Activation" => "no_pga"  ,
                                "Yes, use Priority Group Activation"        => "use_pga"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message pga_note "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                            }
                            optional ( enable_pga == "use_pga" ) {

                                string min_active_members default "0" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message pga_members_note "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next highest priority group number."
                                }
                            }
                        }

                        table servers {
                            string addr required validator "IpAddress" display "xlarge"


                            optional ( general.config_mode == "advanced" ) {


                                optional ( xml_broker_virtual.encrypted != "encrypted") {
                                    string port display "small" required default "80" validator "PortNumber"
                                }
                                optional ( xml_broker_virtual.encrypted == "encrypted" ) {
                                    string port_secure display "small" required default "443" validator "PortNumber"
                                }
                                string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                                optional ( lb_method_choice == "ratio-member" ||
                                           lb_method_choice == "ratio-node" ||
                                           lb_method_choice == "ratio-session" ||
                                           lb_method_choice == "ratio-least-connections-member" ||
                                           lb_method_choice == "ratio-least-connections-node" ||
                                           lb_method_choice == "dynamic-ratio-member" ||
                                           lb_method_choice == "dynamic-ratio-node" ) {
                                    string ratio default "1" validator "NonNegativeNumber" display "small"
                                }
                                optional ( enable_pga == "use_pga" ) {
                                    string priority default "0" required validator "NonNegativeNumber" display "small"
                                }
                            }
                        }
                        optional ( general.assistance_options ==  "full" ) {
                                    message servers_full "Type the IP addresses of your XML Broker or DDC servers.  Click Add to include more servers."
                            }

                        # start monitors
                        choice monitor default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new XML Broker or DDC server health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( monitor == "/#create_new#" ) {
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_full "Select this option to create a health monitor that queries XML Broker or DDC servers for available published applications using the user name, password, and name of a published application you provide. The server member is only considered healthy if the XML Broker or DDC server responds with the published application provided."
                            }
                            string monitor_interval default "30" required validator "NonNegativeNumber" display "small"
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_interval_full "Members of this pool are marked down after 4 incorrect responses, and marked available after 1 correct response.  Enter the number of seconds to use between each health monitor attempt."
                            }
                            string monitor_username required display "xxlarge"
                            message monitor_username_critical "The Citrix service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your XML Broker or DDC pool members as unavailable, which takes them offline."
                            password monitor_password required display "xxlarge"
                            message monitor_password_important "These credentials are stored in plaintext on your BIG-IP system."
                            string monitor_app display "xxlarge"
                            optional ( general.assistance_options == "full" ) {
                                message monitor_app_critical "The published application name is case sensitive and must exactly match the resource you have configured on your Citrix servers. It is important to use a published application that will always be available since all XML members will be marked down if chosen published application is removed or becomes unavailable."
                            }
                            message monitor_note_full "If you leave the published application field blank, the monitor marks the server UP if any response is received."
                        }
                    }
                }
            optional (xml_broker_virtual.xml_farms  != "4") {
                
                section xml_broker_pool_5 {
                    optional (( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#" ) {

                        choice pool default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\nUse the Web Interface or StoreFront pool members for XML Broker or DDC services\t/#use_webui_pool#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" ) {

                        choice pool_alt default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new pool for the XML Broker or DDC farm\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm pool]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( general.assistance_options ==  "full" ) {
                            message pool_alt_full "Choose whether you want the template to create a new pool for the XML Broker or DDC servers or use an existing one. Unless you have created a custom pool specifically for this implementation, we recommend allowing the iApp to create a new one. "
                        }
                    }

                    optional (general.scenario == "apm_scenario" && intro.apm_provisioned == "yes" && apm.replace_webui_question == "replace") {
                        optional ( intro.is_admin == "no" ) {
                            message non_admin_caption "Question Disabled: Captions cannot be configured by a user in the Manager role. The caption will be left blank. Login as Administrator to configure captions."
                        }
                        optional ( intro.is_admin == "yes" ) {
                            string caption default "Farm Unavailable" display "xxlarge"
                            optional ( general.assistance_options ==  "full" ) {
                                message caption_full "You can optionally specify a caption which is displayed to users in the event the corresponding farm is unavailable. The caption is not required and has a 22 character limit."
                            }
                        }
                    }

                    optional ((( general.scenario == "lb_scenario" || intro.apm_provisioned == "no"
                         || apm.replace_webui_question == "do_not_replace"
                         || ( intro.is_v11_4 == "no" && apm.smartcard == "Yes" ))
                         && webui_pool.pool == "/#create_new#"
                         && pool == "/#create_new#" )
                         || ((( general.scenario == "apm_scenario" && intro.apm_provisioned == "yes"
                         && apm.replace_webui_question != "do_not_replace"
                         && ( intro.is_v11_4 != "no" || apm.smartcard != "Yes" ))
                         || webui_pool.pool != "/#create_new#" )
                         && pool_alt == "/#create_new#" )) {

                        optional ( general.config_mode == "advanced" ) {

                            lb_method lb_method_choice
                            optional ( general.assistance_options ==  "full" ) {
                                message lb_method_full "Select a load balancing method that best fits your environment. Descriptions of each load balancing method can be found on the Help tab of the Pool creation page, or in the Deployment Guide."
                            }
                            choice slow_ramp_enable default "enable" display "xxlarge" {
                                "Yes, use Slow Ramp"        => "enable"  ,
                                "No, do not use Slow Ramp" => "disable"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_note "With Slow Ramp, the BIG-IP system gradually adds connections to a newly-enabled or newly-added Citrix server over a time period you specify, rather than sending a full proportion of the traffic immediately. Slow Ramp is essential when using the Least Connections load balancing method, as the BIG-IP system would otherwise send all new connections to a new server immediately, potentially overwhelming that server. The time period you select for Slow Ramp is highly dependent on the speed of your server hardware and the behavior of your web services. The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                            }
                            optional ( slow_ramp_enable == "enable" ) {
                                string slow_ramp_setvalue default "300" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message slow_ramp_time_note "Specify the duration (in seconds) for Slow Ramp time (the amount of time the system sends less traffic to a newly-enabled pool member). The default setting of 300 seconds (5 minutes) is very conservative in most cases."
                                }
                            }
                            choice enable_pga default "no_pga" display "xxlarge" {
                                "No, do not use Priority Group Activation" => "no_pga"  ,
                                "Yes, use Priority Group Activation"        => "use_pga"
                            }
                            optional ( general.assistance_options ==  "full" ) {
                                    message pga_note "Priority Group Activation allows you to segment your servers into priority groups.  With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP then sends traffic to the group of servers with the next highest priority, and so on. See the BIG-IP documentation for more details."
                            }
                            optional ( enable_pga == "use_pga" ) {

                                string min_active_members default "0" required validator "NonNegativeNumber"
                                optional ( general.assistance_options ==  "full" ) {
                                    message pga_members_note "Specify the minimum number of servers that must be active to continue sending traffic to the priority group.  If the number of active servers falls below this minimum, traffic will be sent to the group of servers with the next highest priority group number."
                                }
                            }
                        }

                        table servers {
                            string addr required validator "IpAddress" display "xlarge"


                            optional ( general.config_mode == "advanced" ) {


                                optional ( xml_broker_virtual.encrypted != "encrypted") {
                                    string port display "small" required default "80" validator "PortNumber"
                                }
                                optional ( xml_broker_virtual.encrypted == "encrypted" ) {
                                    string port_secure display "small" required default "443" validator "PortNumber"
                                }
                                string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                                optional ( lb_method_choice == "ratio-member" ||
                                           lb_method_choice == "ratio-node" ||
                                           lb_method_choice == "ratio-session" ||
                                           lb_method_choice == "ratio-least-connections-member" ||
                                           lb_method_choice == "ratio-least-connections-node" ||
                                           lb_method_choice == "dynamic-ratio-member" ||
                                           lb_method_choice == "dynamic-ratio-node" ) {
                                    string ratio default "1" validator "NonNegativeNumber" display "small"
                                }
                                optional ( enable_pga == "use_pga" ) {
                                    string priority default "0" required validator "NonNegativeNumber" display "small"
                                }
                            }
                        }
                        optional ( general.assistance_options ==  "full" ) {
                                    message servers_full "Type the IP addresses of your XML Broker or DDC servers.  Click Add to include more servers."
                            }

                        # start monitors
                        choice monitor default "/#create_new#" display "xxlarge" tcl {
                            set ::choices "Create a new XML Broker or DDC server health monitor\t/#create_new#\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor http]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm monitor https]\n[tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items -filter NAME != "external" ltm monitor external]"
                            return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                        }
                        optional ( monitor == "/#create_new#" ) {
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_full "Select this option to create a health monitor that queries XML Broker or DDC servers for available published applications using the user name, password, and name of a published application you provide. The server member is only considered healthy if the XML Broker or DDC server responds with the published application provided."
                            }
                            string monitor_interval default "30" required validator "NonNegativeNumber" display "small"
                            optional ( general.assistance_options ==  "full" ) {
                                message monitor_interval_full "Members of this pool are marked down after 4 incorrect responses, and marked available after 1 correct response.  Enter the number of seconds to use between each health monitor attempt."
                            }
                            string monitor_username required display "xxlarge"
                            message monitor_username_critical "The Citrix service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your XML Broker or DDC pool members as unavailable, which takes them offline."
                            password monitor_password required display "xxlarge"
                            message monitor_password_important "These credentials are stored in plaintext on your BIG-IP system."
                            string monitor_app display "xxlarge"
                            optional ( general.assistance_options == "full" ) {
                                message monitor_app_critical "The published application name is case sensitive and must exactly match the resource you have configured on your Citrix servers. It is important to use a published application that will always be available since all XML members will be marked down if chosen published application is removed or becomes unavailable."
                            }
                            message monitor_note_full "If you leave the published application field blank, the monitor marks the server UP if any response is received."
                        }
                    }
                }
            }
        }
    }
}

optional ( general.scenario == "lb_scenario" || intro.apm_provisioned == "no" ) {
    section ica_traffic {
        choice traffic display "xxlarge" default "no_ica" {
            "ICA traffic does not pass through this BIG-IP system"             => "no_ica"  ,
            "BIG-IP system acts as gateway (router) to the ICA server network" => "ica_gw"  ,
            "BIG-IP system replicates ICA IP addresses using route domains"    => "replicate_ica_w_route_domain"
        }

        optional ( traffic == "no_ica"
                && general.assistance_options ==  "full" ) {
            message traffi_no_ica_full "Select this option if Citrix clients have an existing route to the Citrix application servers (ICA servers)."

        }
        optional ( traffic == "ica_gw"
                && general.assistance_options ==  "full" ) {
            message traffi_ica_gw_full "Select this option if you plan on routing ICA traffic through this BIG-IP system. With this option, the system uses TCP optimization profiles which increase overall network performance for this application. "
            message traffi_ica_gw2_full "Because the BIG-IP system will act as a gateway into the subnet containing your ICA servers, at least one self IP address for this BIG-IP system must be on a VLAN that you configure to permit the ICA traffic, and your routing infrastructure must be configured to use that BIG-IP system's self IP address as the gateway to the ICA server subnet."

        }
        optional ( traffic == "replicate_ica_w_route_domain"
                && general.assistance_options == "full" ) {
                message traffic_routedomain_full "Select this option if you are routing ICA traffic through this BIG-IP system and using route domains. This option uses TCP optimization profiles which increases overall network performance for this application."
                message ica_traffic_routedomain_full "Using BIG-IP route domains, you can keep your ICA Application Servers in secure, internal networks but still give them routable IP addresses. This BIG-IP system will replicate each of the IP addresses of your ICA servers as virtual servers in a public-facing route domain, so traffic that the clients initiate will pass through this BIG-IP system. You may attach iRules that perform advanced features such as logging, implement ACLs, or otherwise enhance or secure your deployment."

            message route_domains_note "You must have at least two route domains configured on this BIG-IP system in order to use this feature. Configuring route domains is not a part of this template. See Network > Route Domains."
            }
        optional ( traffic == "ica_gw"
                || traffic == "replicate_ica_w_route_domain" ) {
            choice ica_port default "1494" display "xxlarge" {
                "1494"  ,
                "2598"
            }
            optional ( general.assistance_options ==  "full" ) {
                message ica_port_full "Select the port used to make ICA connections. Select 2598 if all Citrix clients support session reliability, otherwise select 1494. Clients fall back to 1494 when session reliability (2598) is unavailable."
            }


            table multi_stream {
                string port validator "PortNumber"
            }
            optional ( general.assistance_options == "full" ) {
                message ica_multi_stream_ports_info "Multi-Stream ICA uses multiple TCP connections to carry the ICA traffic between the client and the server.  If necessary, you can specify up to 3 additional TCP ports for Multi-Stream ICA. These ports are defined as CGP port1, CGP port2, and CGP port3 within each Citrix server computer and user policy."
            }

        }

        # This section creates a 'Forwarding (IP)' network virtual server to route traffic
        optional ( traffic == "ica_gw" ) {


            string ica_subnet required display "xxlarge"
            optional ( general.assistance_options == "full" ) {
                message ica_subnet_full "Specify the network address space on which the Citrix application servers reside. The BIG-IP system forwards the requests to the specified network.  Note that if the Citrix application server network is not directly connected to this BIG-IP system, then a route to the next hop must be provided in this BIG-IP system's routing table. See Network > Routes for more information on how to add additional routing."
            }

            string ica_netmask required display "xxlarge"
            optional ( general.assistance_options == "full" ) {
                message ica_netmask_full "Specify the subnet mask used for the Citrix application server network."
            }

            choice ica_vlans display "xxlarge" default "all_vlans" {
                "ICA traffic is allowed from all VLANs"           => "all_vlans"  ,
                "ICA traffic is allowed from only specific VLANs" => "select_vlans_enabled"  ,
                "ICA traffic is NOT allowed from specific VLANs"  => "select_vlans_disabled"
            }

            optional (  ica_vlans == "all_vlans" && general.assistance_options == "full" ) {
                message ica_vlans_all_full "Select this option if application traffic should be accepted on all VLANs."
                }

            optional ( ica_vlans == "select_vlans_enabled" ) {
                optional ( general.assistance_options == "full" ) {
                    message ica_vlans_enabled_full "Select this option if application traffic should be accepted on selected VLANs and denied on all unselected VLANs. "
                }

                multichoice ica_allowed_vlans display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items net vlan]
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
            }

            optional ( ica_vlans == "select_vlans_disabled" ) {
                optional ( general.assistance_options == "full" ) {
                    message ica_vlans_disabled_full "Select this option if application traffic should be denied on selected VLANs and accepted on all unselected VLANs. "
                }

                multichoice ica_denied_vlans display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items net vlan]
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
            }
        }
        # End 'Forwarding (IP)' network virtual server section

        # Route domain section
        optional ( traffic == "replicate_ica_w_route_domain" ) {

            table ica_servers {
                string addr required validator "IpAddress" display "xlarge"
            }
            optional ( general.assistance_options == "full" ) {
                    message ica_address_full "Specify the IP address of each of your ICA application servers.  Click Add to include additional ICA servers."
            }

            choice virtual_route_domain display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items net route-domain]
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options == "full" ) {
               message virtual_route_domain_full "Choose the existing, public-facing route domain you created on this BIG-IP system. You must already have created a route domain before it will appear in this list. Configuring route domains is not a part of this template. See Network > Route Domains."
            }

            choice ica_route_domain display "xxlarge" tcl {
                set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items net route-domain]
                return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
            }
            optional ( general.assistance_options == "full" ) {
               message ica_route_domain_full "Choose the existing route domain you created on this BIG-IP system for the ICA application servers. You must already have created a route domain before it will appear in this list. Configuring route domains is not a part of this template. See Network > Route Domains."
            }
            message ica_route_domain_note "The route domain you select for your public-facing virtual servers must be different from that of your ICA application servers."
        }

        optional ( traffic == "ica_gw"
                || traffic == "replicate_ica_w_route_domain" ) {
            optional ( general.config_mode == "advanced" ) {

                multichoice rules display "xxlarge" tcl {
                    set ::choices [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_get_items ltm rule]
                    return [tmsh::run_proc f5.iapp.1.4.0.cli:iapp_safe_display ::choices]
                }
                optional ( general.assistance_options ==  "full" ) {
                    message irules_full "From the Options box, select the iRules you want to attach to this virtual server, and then click the Add (<<) button to move them to the Selected box."
                }

                message ica_irules_note "Attaching iRules is an advanced feature and should be used only if you understand how each iRule will affect your deployment, including application behavior and BIG-IP performance."
            }
        }
    }
}

section postreq {
    message dns "You must configure a DNS entry for each fully qualified host name that clients will use for Citrix services. Each DNS record must resolve to the corresponding IP address you configured for the virtual server assigned to each service."
    message troubleshooting "You can find common troubleshooting tips on the Help tab."
}

text {
    intro "Welcome to the iApp template for XenDesktop and XenApp"
    
    intro.hello "Introduction"
    intro.hello_supported "Supported Software"
    intro.check_for_updates "Check for updates"
    intro.non_admin_warning "WARNING"
    intro.afm_opportunity "Additional features available"
    intro.apm_opportunity "Additional features available"
    intro.prereqs "Prerequisites"
    intro.profiles_message ""

    general "General"
    general.assistance_options "Do you want to see inline help?"
    general.assistance_options_about ""
    general.config_mode "Which configuration mode do you want to use?"
    general.config_mode_info ""
    general.scenario "Use APM to securely proxy application (ICA) traffic and authenticate users into your Citrix environment?"
    general.scenario_1_note_when_to_use ""
    general.scenario_1_note_full ""
    general.scenario_2_note_when_to_use ""
    general.scenario_2_note_full ""
    general.scenario_2_note_full_2 ""
    general.domain_name "What is the Active Directory NetBIOS Domain Name used for your Citrix servers?"
    general.domain_name_full ""

    apm "BIG-IP Access Policy Manager"
    apm.smartcard "Should the BIG-IP APM support smart card authentication for Citrix access?"
    apm.smartcard_full ""
    apm.smartcard_yes_full "IMPORTANT"
    apm.replace_webui_question "Do you want to replace Citrix Web Interface or StoreFront servers with the BIG-IP system?"
    apm.replace_webui_yes_full ""
    apm.replace_webui_full ""
    apm.smartcard_upn "Does the smart card UPN match the domain name of your Citrix environment?"
    apm.smartcard_upn_full ""
    apm.smartcard_realm "What is the Active Directory Kerberos Realm the smart cards use? "
    apm.smartcard_realm_full ""
    apm.smartcard_user "Which service account (in SPN format) can be used for Kerberos authentication?"
    apm.smartcard_user_full ""
    apm.smartcard_password "What is the password associated with that account?"
    apm.smartcard_password_full "IMPORTANT"
    apm.smartcard_kdc "What is the Kerberos Key Distribution Center (KDC) for the server realm?"
    apm.smartcard_kdc_full ""
    apm.aaa_profile "Create a new AAA object or select an existing one?"
    apm.aaa_profile_full ""
    apm.login_domain "What is the Active Directory FQDN for your Citrix users?"
    apm.login_domain_full ""
    apm.active_directory_server "Which Active Directory servers in your domain can this BIG-IP system contact?"
    apm.active_directory_server.host "Host name"
    apm.active_directory_server.addr "IP"
    apm.active_directory_server_full ""
    apm.allow_anonymous_binding "Does your Active Directory domain allow anonymous binding?"
    apm.allow_anonymous_binding_full ""
    apm.credentials_note "IMPORTANT"
    apm.active_directory_username "Which Active Directory user with administrative permissions do you want to use?"
    apm.active_directory_username_full ""
    apm.active_directory_password "What is the password for that user?"
    apm.ad_monitor "Which monitor do you want to use?"
    apm.ad_monitor_help ""
    apm.ad_user "Which Active Directory user name should the monitor use?"
    apm.ad_user_critical "CRITICAL"
    apm.ad_password "What is the associated password?"
    apm.ad_password_important "IMPORTANT"
    apm.ad_tree "What is the LDAP tree for this user account?"
    apm.ad_tree_info ""
    apm.ad_secure "Does your Active Directory domain require a secure protocol for communication?"
    apm.ad_secure_info ""
    apm.ad_interval "How many seconds between Active Directory health checks?"
    apm.ad_interval_info ""
    apm.ad_port_ssl "Which port is used for Active Directory communication?"
    apm.ad_port_not_ssl "Which port is used for Active Directory communication?"
    apm.ad_port_info ""
    apm.rsa "Do you want the BIG-IP system to proxy RSA SecurID for two factor authentication?"
    apm.non_admin_rsa "Do you want the BIG-IP system to proxy RSA SecurID for two factor authentication?"
    apm.rsa_no_full ""
    apm.rsa_yes_full ""
    apm.rsa_aaa "Which AAA Server object do you want to use for SecurID?"
    apm.rsa_aaa_full ""
    apm.rsa_token_field "What do you want to call the form field for the RSA SecurID token?"
    apm.rsa_token_field_full ""
    apm.logging "Which APM logging profile do you want to use?"
    apm.logging_inline_help ""

    afm "Advanced Firewall Manager (BIG-IP AFM)"
    afm.non_admin_afm "Section Disabled"
    afm.policy "Do you want to use BIG-IP AFM to protect your application?"
    afm.policy_full ""
    afm.restrict_by_addr "Do you want to restrict access to your application by network or IP address?"
    afm.restrict_full ""
    afm.allowed_addr "What IP or network addresses should be allowed to access your application?"
    afm.allowed_addr_full_1 ""
    afm.allowed_addr_full_2 ""
    afm.security_logging "Which logging profile would you like to use?"
    afm.security_logging_full ""
    afm.security_logging1_full ""
    afm.restrict_by_reputation "How do you want to control access to your application from sources with a low reputation score?"
    afm.restrict_by_reputation_full ""
    afm.restrict_by_reputation_log ""
    afm.restrict_by_reputation_warn "IMPORTANT"
    afm.staging_policy "Would you like to stage a policy for testing purposes?"
    afm.staging_policy_full ""
    afm.staging_policy1_full "CRITICAL"

    webui_virtual "Virtual Server for Web Interface or StoreFront servers"
    webui_virtual.logged_out_irule "Should the iApp remove the APM session when users log out of the Web Interface or StoreFront servers?"
    webui_virtual.logged_out_irule_full ""
    webui_virtual.datagroup_uri "If not using the default PNAgent URI, what is the custom PNAgent URI?"
    webui_virtual.datagroup_uri_full ""
    webui_virtual.addr "What IP address will clients use to access the Web Interface or StoreFront servers, or the F5 Webtop?"
    webui_virtual.addr_webui_full ""
    webui_virtual.cloud "Did you deploy Citrix StoreFront?"
    webui_virtual.cloud_info ""
    webui_virtual.sta "What are the URLs of the Citrix Secure Ticket Authority Servers (if required)?"
    webui_virtual.sta.url "URL"
    webui_virtual.sta_full ""
    webui_virtual.custom_uri "What is the URI used on StoreFront or Web Interface servers for XenApp or XenDesktop?"
    webui_virtual.https_port "Which port do you want to use for this HTTPS virtual server?"
    webui_virtual.https_port_webui_full ""
    webui_virtual.clientssl_profile "Which Client SSL profile do you want to use?"
    webui_virtual.clientssl_profile_full ""
    webui_virtual.custom_uri_full ""
    webui_virtual.create_redir_vs "Do you want to redirect inbound HTTP traffic to HTTPS?"
    webui_virtual.create_redir_vs_full ""
    webui_virtual.redir_port "From which port should HTTP traffic be redirected?"
    webui_virtual.redir_port_full ""
    webui_virtual.cert "Which certificate do you want to use for authentication?"
    webui_virtual.cert_webui_full ""
    webui_virtual.key "Which key do you want to use for encryption?"
    webui_virtual.key_webui_full ""
    webui_virtual.key_cert_critical "CRITICAL"
    webui_virtual.ssl_warn "NOTE:"
    webui_virtual.cert_chain "Which intermediate certificate do you want to use?"
    webui_virtual.cert_chain_full ""
    webui_virtual.cert_bundle "Which CA certificate bundle do you want to use for your trusted and advertised certificate authorities?"
    webui_virtual.cert_bundle_full ""
    webui_virtual.reencrypt_traffic "How should the BIG-IP system handle encrypted traffic to Web Interface or StoreFront servers?"
    webui_virtual.reencrypt_traffic_webui_full ""
    webui_virtual.serverssl_profile "Which Server SSL profile do you want to use?"
    webui_virtual.serverssl_profile_full ""
    webui_virtual.location "Where will your BIG-IP virtual servers be in relation to your Web Interface or StoreFront servers?"
    webui_virtual.location_same_full ""
    webui_virtual.location_diff_full ""
    webui_virtual.snat "How have you configured routing on your Web Interface or StoreFront servers?"
    webui_virtual.snat_do_not_use_bigip_as_default_gw_full ""
    webui_virtual.snat_use_bigip_as_default_gw_full ""
    webui_virtual.automap_or_pool "How many connections do you expect to each Web Interface or StoreFront server?"
    webui_virtual.snatpool_message_2 ""
    webui_virtual.snatpool_members "Which IP addresses do you want to use for the SNAT Pool?"
    webui_virtual.snatpool_members_full ""
    webui_virtual.snatpool_members.addr "IP"
    webui_virtual.lan_or_wan "Which network optimization profile do you want to use?"
    webui_virtual.lan_or_wan_full ""

    webui_virtual.irules_full ""
    webui_virtual.irules_note "CRITICAL"
    webui_virtual.rules "Do you want to add any custom iRules to this configuration?"

    webui_pool "Web Interface or StoreFront servers"
    webui_pool.webui_dns_name "What DNS name will clients use to reach the Web Interface or StoreFront servers?"
    webui_pool.webui_dns_name_full ""
    webui_pool.pool "Which pool do you want to use?"
    webui_pool.pool_full    ""
    webui_pool.http_port "Which port have you configured for Web Interface or StoreFront HTTP traffic?"
    webui_pool.https_port "Which port have you configured for Web Interface or StoreFront HTTPS traffic?"
    webui_pool.http_port_full ""
    webui_pool.https_port_full ""
    webui_pool.lb_method_choice "Which load balancing method do you want to use?"
    webui_pool.lb_method_full ""
    webui_pool.slow_ramp_enable "Use a Slow Ramp time for newly added servers?"
    webui_pool.slow_ramp_note ""
    webui_pool.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
    webui_pool.slow_ramp_time_note ""
    webui_pool.enable_pga "Do you want to enable Priority Group Activation?"
    webui_pool.pga_note ""
    webui_pool.min_active_members "What is the minimum number of active members in a group?"
    webui_pool.pga_members_note ""
    webui_pool.servers "What are the IP addresses of your Web Interface or StoreFront servers?"
    webui_pool.servers.addr "Address"
    webui_pool.servers.ratio "Ratio"
    webui_pool.servers.connection_limit "Connection Limit"
    webui_pool.servers.priority "Priority"
    webui_pool.servers_full ""
    webui_pool.monitor "Which monitor do you want to use?"
    webui_pool.monitor_full ""
    webui_pool.monitor_interval "How many seconds should pass between health checks?"
    webui_pool.monitor_interval_full ""
    webui_pool.pool_afm "Which AFM Network Firewall Policy did you create to secure the XML Brokers?"
    webui_pool.pool_afm_full ""
    webui_pool.pool_afm_warning "IMPORTANT"

    xml_broker_virtual "Virtual Server for XML Broker or Desktop Delivery Controller (DDC) Servers"
    xml_broker_virtual.xml_farms "How many unique XML Broker or DDC farms are you using?"
    xml_broker_virtual.xml_farms_warning "WARNING"
    xml_broker_virtual.xml_farms_full ""
    xml_broker_virtual.xml_farms_full_11_3 ""
    xml_broker_virtual.addr "What IP address do you want to use for the XML Broker or DDC farm virtual server?"
    xml_broker_virtual.addr_full ""
    xml_broker_virtual.addr_2 "What IP address do you want to use for the second XML Broker or DDC farm virtual server?"
    xml_broker_virtual.addr_3 "What IP address do you want to use for the third XML Broker or DDC farm virtual server?"
    xml_broker_virtual.addr_4 "What IP address do you want to use for the fourth XML Broker or DDC farm virtual server?"
    xml_broker_virtual.addr_5 "What IP address do you want to use for the fifth XML Broker or DDC farm virtual server?"
    xml_broker_virtual.encrypted "How will requests from the Web Interface or StoreFront servers arrive?"
    xml_broker_virtual.encrypted_full ""
    xml_broker_virtual.unencrypted_full ""
    xml_broker_virtual.https_port "Which port do you want to use for this HTTPS traffic?"
    xml_broker_virtual.https_port_full ""
    xml_broker_virtual.http_port "Which port do you want to use for this HTTP traffic?"
    xml_broker_virtual.http_port_full ""
    xml_broker_virtual.cert "Which certificate do you want the BIG-IP XML Broker or DDC virtual server to use for authentication?"
    xml_broker_virtual.cert_full ""
    xml_broker_virtual.key "Which key do you want this BIG-IP system to use for encryption?"
    xml_broker_virtual.key_full ""
    xml_broker_virtual.key_cert_critical "CRITICAL"
    xml_broker_virtual.ssl_warn "NOTE:"
    xml_broker_virtual.client_bundle "Which Citrix Client Bundle do you want to use?"
    xml_broker_virtual.client_bundle_full ""
    xml_broker_virtual.client_bundle_url "Where do you want to direct users when a Receiver client is not detected on their host?"
    xml_broker_virtual.client_bundle_url_full ""
    xml_broker_virtual.ica_parameters "What are the ICA parameters you want to use for each published resource?"
    xml_broker_virtual.ica_parameters.name "Resource Name"
    xml_broker_virtual.ica_parameters.parameter "ICA Parameter"
    xml_broker_virtual.ica_parameters.value "ICA Parameter Value"
    xml_broker_virtual.ica_parameters_inline_help ""
    xml_broker_virtual.location "Where will your BIG-IP virtual server be in relation to your XML Broker or DDC servers?"
    xml_broker_virtual.location_same_full ""
    xml_broker_virtual.location_diff_full ""
    xml_broker_virtual.snat "How have you configured routing on your XML Broker or DDC servers?"
    xml_broker_virtual.snat_bigip_is_default_gw_full ""
    xml_broker_virtual.snat_no_bigip_gw_full ""
    xml_broker_virtual.automap_or_pool "What is the maximum number of connections you expect for each XML Broker or DDC server?"
    xml_broker_virtual.automap_or_pool_automap_message ""
    xml_broker_virtual.snatpool_members "Which IP addresses do you want to use for the SNAT Pool?"
    xml_broker_virtual.snatpool_members_full ""
    xml_broker_virtual.snatpool_members.addr "IP"
    xml_broker_virtual.xml_vlans "Which VLANs should accept XML Broker or DDC traffic?"
    xml_broker_virtual.xml_vlans_all_full ""
    xml_broker_virtual.xml_allowed_vlans "Which VLANs should be allowed?"
    xml_broker_virtual.xml_vlans_enabled_full ""
    xml_broker_virtual.xml_denied_vlans "Which VLANs should be denied?"
    xml_broker_virtual.xml_vlans_disabled_full ""
    xml_broker_virtual.irules_full ""
    xml_broker_virtual.irules_note "CRITICAL"
    xml_broker_virtual.rules "Do you want to add any custom iRules to this configuration?"

    
    xml_broker_pool "XML Broker or DDC Servers "
    xml_broker_pool.pool "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool.pool_full ""
    xml_broker_pool.caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool.non_admin_caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool.caption_full ""
    xml_broker_pool.pool_alt "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool.pool_alt_full ""
    xml_broker_pool.lb_method_choice "Which load balancing method do you want to use?"
    xml_broker_pool.lb_method_full ""
    xml_broker_pool.slow_ramp_enable "Use a Slow Ramp time for newly added servers?"
    xml_broker_pool.slow_ramp_note ""
    xml_broker_pool.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
    xml_broker_pool.slow_ramp_time_note ""
    xml_broker_pool.enable_pga "Do you want to enable Priority Group Activation?"
    xml_broker_pool.pga_note ""
    xml_broker_pool.min_active_members "What is the minimum number of active members in a group?"
    xml_broker_pool.pga_members_note ""
    xml_broker_pool.servers "What are the IP addresses of your XML Broker or DDC servers?"
    xml_broker_pool.servers_full ""
    xml_broker_pool.servers.addr "Address"
    xml_broker_pool.servers.port "Port"
    xml_broker_pool.servers.port_secure "Port"
    xml_broker_pool.servers.ratio "Ratio"
    xml_broker_pool.servers.connection_limit "Connection Limit"
    xml_broker_pool.servers.priority "Priority"
    xml_broker_pool.monitor "Which monitor do you want to use?"
    xml_broker_pool.monitor_full ""
    xml_broker_pool.monitor_interval "How many seconds should pass between health checks? "
    xml_broker_pool.monitor_interval_full ""
    xml_broker_pool.monitor_note_full ""
    xml_broker_pool.monitor_username "What user name should the monitor use?"
    xml_broker_pool.monitor_username_critical "CRITICAL"
    xml_broker_pool.monitor_password "What is the password associated with that account?"
    xml_broker_pool.monitor_password_important "IMPORTANT"
    xml_broker_pool.monitor_app "What published application should the BIG-IP system expect in the monitor response?"
    xml_broker_pool.monitor_app_critical "CRITICAL" 
    
    xml_broker_pool_2 "XML Broker or DDC Servers 2"
    xml_broker_pool_2.pool "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_2.pool_full ""
    xml_broker_pool_2.caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_2.non_admin_caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_2.caption_full ""
    xml_broker_pool_2.pool_alt "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_2.pool_alt_full ""
    xml_broker_pool_2.lb_method_choice "Which load balancing method do you want to use?"
    xml_broker_pool_2.lb_method_full ""
    xml_broker_pool_2.slow_ramp_enable "Use a Slow Ramp time for newly added servers?"
    xml_broker_pool_2.slow_ramp_note ""
    xml_broker_pool_2.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
    xml_broker_pool_2.slow_ramp_time_note ""
    xml_broker_pool_2.enable_pga "Do you want to enable Priority Group Activation?"
    xml_broker_pool_2.pga_note ""
    xml_broker_pool_2.min_active_members "What is the minimum number of active members in a group?"
    xml_broker_pool_2.pga_members_note ""
    xml_broker_pool_2.servers "What are the IP addresses of your XML Broker or DDC servers?"
    xml_broker_pool_2.servers_full ""
    xml_broker_pool_2.servers.addr "Address"
    xml_broker_pool_2.servers.port "Port"
    xml_broker_pool_2.servers.port_secure "Port"
    xml_broker_pool_2.servers.ratio "Ratio"
    xml_broker_pool_2.servers.connection_limit "Connection Limit"
    xml_broker_pool_2.servers.priority "Priority"
    xml_broker_pool_2.monitor "Which monitor do you want to use?"
    xml_broker_pool_2.monitor_full ""
    xml_broker_pool_2.monitor_interval "How many seconds should pass between health checks? "
    xml_broker_pool_2.monitor_interval_full ""
    xml_broker_pool_2.monitor_note_full ""
    xml_broker_pool_2.monitor_username "What user name should the monitor use?"
    xml_broker_pool_2.monitor_username_critical "CRITICAL"
    xml_broker_pool_2.monitor_password "What is the password associated with that account?"
    xml_broker_pool_2.monitor_password_important "IMPORTANT"
    xml_broker_pool_2.monitor_app "What published application should the BIG-IP system expect in the monitor response?"
    xml_broker_pool_2.monitor_app_critical "CRITICAL" 
    
    xml_broker_pool_3 "XML Broker or DDC Servers 3"
    xml_broker_pool_3.pool "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_3.pool_full ""
    xml_broker_pool_3.caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_3.non_admin_caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_3.caption_full ""
    xml_broker_pool_3.pool_alt "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_3.pool_alt_full ""
    xml_broker_pool_3.lb_method_choice "Which load balancing method do you want to use?"
    xml_broker_pool_3.lb_method_full ""
    xml_broker_pool_3.slow_ramp_enable "Use a Slow Ramp time for newly added servers?"
    xml_broker_pool_3.slow_ramp_note ""
    xml_broker_pool_3.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
    xml_broker_pool_3.slow_ramp_time_note ""
    xml_broker_pool_3.enable_pga "Do you want to enable Priority Group Activation?"
    xml_broker_pool_3.pga_note ""
    xml_broker_pool_3.min_active_members "What is the minimum number of active members in a group?"
    xml_broker_pool_3.pga_members_note ""
    xml_broker_pool_3.servers "What are the IP addresses of your XML Broker or DDC servers?"
    xml_broker_pool_3.servers_full ""
    xml_broker_pool_3.servers.addr "Address"
    xml_broker_pool_3.servers.port "Port"
    xml_broker_pool_3.servers.port_secure "Port"
    xml_broker_pool_3.servers.ratio "Ratio"
    xml_broker_pool_3.servers.connection_limit "Connection Limit"
    xml_broker_pool_3.servers.priority "Priority"
    xml_broker_pool_3.monitor "Which monitor do you want to use?"
    xml_broker_pool_3.monitor_full ""
    xml_broker_pool_3.monitor_interval "How many seconds should pass between health checks? "
    xml_broker_pool_3.monitor_interval_full ""
    xml_broker_pool_3.monitor_note_full ""
    xml_broker_pool_3.monitor_username "What user name should the monitor use?"
    xml_broker_pool_3.monitor_username_critical "CRITICAL"
    xml_broker_pool_3.monitor_password "What is the password associated with that account?"
    xml_broker_pool_3.monitor_password_important "IMPORTANT"
    xml_broker_pool_3.monitor_app "What published application should the BIG-IP system expect in the monitor response?"
    xml_broker_pool_3.monitor_app_critical "CRITICAL" 
    
    xml_broker_pool_4 "XML Broker or DDC Servers 4"
    xml_broker_pool_4.pool "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_4.pool_full ""
    xml_broker_pool_4.caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_4.non_admin_caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_4.caption_full ""
    xml_broker_pool_4.pool_alt "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_4.pool_alt_full ""
    xml_broker_pool_4.lb_method_choice "Which load balancing method do you want to use?"
    xml_broker_pool_4.lb_method_full ""
    xml_broker_pool_4.slow_ramp_enable "Use a Slow Ramp time for newly added servers?"
    xml_broker_pool_4.slow_ramp_note ""
    xml_broker_pool_4.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
    xml_broker_pool_4.slow_ramp_time_note ""
    xml_broker_pool_4.enable_pga "Do you want to enable Priority Group Activation?"
    xml_broker_pool_4.pga_note ""
    xml_broker_pool_4.min_active_members "What is the minimum number of active members in a group?"
    xml_broker_pool_4.pga_members_note ""
    xml_broker_pool_4.servers "What are the IP addresses of your XML Broker or DDC servers?"
    xml_broker_pool_4.servers_full ""
    xml_broker_pool_4.servers.addr "Address"
    xml_broker_pool_4.servers.port "Port"
    xml_broker_pool_4.servers.port_secure "Port"
    xml_broker_pool_4.servers.ratio "Ratio"
    xml_broker_pool_4.servers.connection_limit "Connection Limit"
    xml_broker_pool_4.servers.priority "Priority"
    xml_broker_pool_4.monitor "Which monitor do you want to use?"
    xml_broker_pool_4.monitor_full ""
    xml_broker_pool_4.monitor_interval "How many seconds should pass between health checks? "
    xml_broker_pool_4.monitor_interval_full ""
    xml_broker_pool_4.monitor_note_full ""
    xml_broker_pool_4.monitor_username "What user name should the monitor use?"
    xml_broker_pool_4.monitor_username_critical "CRITICAL"
    xml_broker_pool_4.monitor_password "What is the password associated with that account?"
    xml_broker_pool_4.monitor_password_important "IMPORTANT"
    xml_broker_pool_4.monitor_app "What published application should the BIG-IP system expect in the monitor response?"
    xml_broker_pool_4.monitor_app_critical "CRITICAL" 
    
    xml_broker_pool_5 "XML Broker or DDC Servers 5"
    xml_broker_pool_5.pool "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_5.pool_full ""
    xml_broker_pool_5.caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_5.non_admin_caption "What custom caption do you want to use for the XML Broker or DDC farm?"
    xml_broker_pool_5.caption_full ""
    xml_broker_pool_5.pool_alt "Should the iApp create a new pool or use an existing one?"
    xml_broker_pool_5.pool_alt_full ""
    xml_broker_pool_5.lb_method_choice "Which load balancing method do you want to use?"
    xml_broker_pool_5.lb_method_full ""
    xml_broker_pool_5.slow_ramp_enable "Use a Slow Ramp time for newly added servers?"
    xml_broker_pool_5.slow_ramp_note ""
    xml_broker_pool_5.slow_ramp_setvalue "How many seconds should Slow Ramp time last?"
    xml_broker_pool_5.slow_ramp_time_note ""
    xml_broker_pool_5.enable_pga "Do you want to enable Priority Group Activation?"
    xml_broker_pool_5.pga_note ""
    xml_broker_pool_5.min_active_members "What is the minimum number of active members in a group?"
    xml_broker_pool_5.pga_members_note ""
    xml_broker_pool_5.servers "What are the IP addresses of your XML Broker or DDC servers?"
    xml_broker_pool_5.servers_full ""
    xml_broker_pool_5.servers.addr "Address"
    xml_broker_pool_5.servers.port "Port"
    xml_broker_pool_5.servers.port_secure "Port"
    xml_broker_pool_5.servers.ratio "Ratio"
    xml_broker_pool_5.servers.connection_limit "Connection Limit"
    xml_broker_pool_5.servers.priority "Priority"
    xml_broker_pool_5.monitor "Which monitor do you want to use?"
    xml_broker_pool_5.monitor_full ""
    xml_broker_pool_5.monitor_interval "How many seconds should pass between health checks? "
    xml_broker_pool_5.monitor_interval_full ""
    xml_broker_pool_5.monitor_note_full ""
    xml_broker_pool_5.monitor_username "What user name should the monitor use?"
    xml_broker_pool_5.monitor_username_critical "CRITICAL"
    xml_broker_pool_5.monitor_password "What is the password associated with that account?"
    xml_broker_pool_5.monitor_password_important "IMPORTANT"
    xml_broker_pool_5.monitor_app "What published application should the BIG-IP system expect in the monitor response?"
    xml_broker_pool_5.monitor_app_critical "CRITICAL" 

    ica_traffic "ICA Traffic"
    ica_traffic.traffic "How will ICA traffic travel between the clients and the ICA servers?"
    ica_traffic.traffi_no_ica_full ""
    ica_traffic.traffi_ica_gw_full ""
    ica_traffic.traffi_ica_gw2_full ""
    ica_traffic.ica_port "Which TCP port does your ICA traffic use?"
    ica_traffic.ica_port_full ""
    ica_traffic.ica_multi_stream_ports_info ""
    ica_traffic.multi_stream "Which ports are assigned to Multi-Stream ICA? (optional)"
    ica_traffic.multi_stream.port "Port Number"
    ica_traffic.ica_subnet "What is the network address of your ICA server subnet?"
    ica_traffic.ica_subnet_full ""
    ica_traffic.ica_netmask "What is the netmask for your ICA server subnet?"
    ica_traffic.ica_netmask_full ""
    ica_traffic.ica_vlans "Which VLANs should accept ICA traffic?"
    ica_traffic.ica_vlans_all_full ""
    ica_traffic.ica_allowed_vlans "Which VLANs should be allowed?"
    ica_traffic.ica_vlans_enabled_full ""
    ica_traffic.ica_denied_vlans "Which VLANs should be denied?"
    ica_traffic.ica_vlans_disabled_full ""
    ica_traffic.traffic_routedomain_full ""
    ica_traffic.ica_traffic_routedomain_full ""
    ica_traffic.route_domains_note "CRITICAL"
    ica_traffic.ica_servers "What are the IP addresses of your ICA application servers?"
    ica_traffic.ica_address_full ""
    ica_traffic.ica_servers.addr "IP"
    ica_traffic.virtual_route_domain "What is your public-facing route domain?"
    ica_traffic.virtual_route_domain_full ""
    ica_traffic.ica_route_domain "What is the route domain of your ICA application servers?"
    ica_traffic.ica_route_domain_full ""
    ica_traffic.ica_route_domain_note "IMPORTANT"
    ica_traffic.irules_full ""
    ica_traffic.ica_irules_note "CRITICAL"
    ica_traffic.rules "Do you want to add any custom iRules to this configuration?"

    postreq "Additional Steps"
    postreq.dns "Configure DNS"
    postreq.troubleshooting "Troubleshooting"
}

            }
            role-acl { admin manager resource-admin }
            run-as none
        }
    }
    requires-bigip-version-max none
    requires-bigip-version-min 11.4.0
    requires-modules { }
[END]
