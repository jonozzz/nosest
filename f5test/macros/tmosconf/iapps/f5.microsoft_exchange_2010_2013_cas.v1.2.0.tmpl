#TMSH-VERSION: 12.1.0

cli admin-partitions {
    update-partition Common
}
cli script f5.iapp.1.1.0.cli [BEGIN]
#  Initialization proc for all templates.
#  Parameters "start" and "stop" or "end".
proc iapp_template { action } {
    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    switch $action {
        start {
            set ::clock_clicks [clock clicks]
            if { $lev eq {debug} } {
                puts "\nStarting iApp $tmsh::app_template_name [clock format \
                    [clock seconds] -format {%m/%d/%Y %T}]\n"
            }
            tmsh::log_level $lev
            tmsh::log info "Starting iApp template $tmsh::app_template_name"
        }
        stop -
        end {
            if { $lev eq {debug} } {
                if { [info exists ::substa_debug] } {
                    puts $::substa_debug 
                }
                puts "\nEnding iApp $tmsh::app_template_name [clock format \
                    [clock seconds] -format {%m/%d/%Y %T}]\nRun time [expr \
                    { ([clock clicks] - $::clock_clicks) / 1000 }] msec\n"
            }
            tmsh::log info "Ending iApp template $tmsh::app_template_name"
        }
    }
    set ::HTTP_CONTENT_TYPES {\
    text/css text/html text/javascript text/json text/postscript text/plain\
        text/richtext text/rtf text/vnd.wap.wml text/vnd.wap.wmlscript\
        text/x-vcalendar text/wap text/wml text/x-component text/x-vcard\
        text/xml\
    image/photoshop image/psd image/x-photoshop image/x-vsd\
    application/msaccess\
        application/vnd.msaccess application/vnd.ms-access application/mdb\
        application/x-mdb\
    application/css\
        application/css-stylesheet\
    application/excel\
        application/msexcel application/ms-excel application/vnd.excel\
        application/vnd.msexcel application/vnd.ms-excel application/x-excel\
        application/x-msexcel application/x-ms-excel application/x-xls\
        application/xls\
    application/javascript\
        application/x-javascript application/x-java-jnlp-file\
    application/json\
        application/x-json\
    application/lotus123\
        application/x-lotus123\
    application/x-mscardfile\
    application/x-msclip\
    application/powerpoint\
        application/mspowerpoint application/ms-powerpoint application/mpp\
        application/vnd.ms-pps application/vnd.ms-powerpoint\
        application/vnd.mspowerpoint application/vnd.powerpoint\
        application/x-powerpoint application/x-mspowerpoint\
    application/photoshop\
        application/x-photoshop\
    application/msproject\
        application/vnd.ms-project application/x-msproject\
        application/x-ms-project\
    application/postscript\
        application/ps application/psd application/x-postscript\
        application/x-ps\
    application/quarkexpress\
        application/x-quark-express\
    application/rtf\
        application/x-rtf\
    application/txt\
    application/word\
        application/doc application/msword application/ms-word\
        application/winword application/vnd.ms-word application/x-word\
        application/x-msword application/vnd.msword application/vnd.word\
    application/vnd.ms-works\
        application/vnd.ms-works-db application/x-wks application/x-msworks-db\
        application/x-msworks-wps application/wks\
    application/visio\
        application/vnd.visio application/vsd application/x-visio\
        application/x-vsd\
    application/x-vermeer-rpc\
    application/vnd.wap.wmlc\
        application/vnd.wap.cmlscriptc application/vnd.wap.xhtml+xml\
    application/xml\
        application/x-xml application/xhtml+xml}
}

proc iapp_is { args } {
    set up_var [lindex $args 0]
    upvar $up_var var 
    if { [info exists var] } {
        foreach val [lrange $args 1 end] {
            if { [subst $var] eq $val } {
                return 1
            }
        }
    }
    return 0
}

proc iapp_substa { args } {
    upvar substa_in  argx \
          substa_out rval
    set   argx $args

    # check the explicit value first.
    # multiple layers of variable substitution requires multiple subst.
    # error occurs here if any of the substituted variables do not exist
    # valid wildcard (*) array entries will fail here first.
    uplevel {
        append ::substa_debug "\n$substa_in"
        if { [info exists [set substa_in]] } {
            set substa_out [subst $$substa_in]
            set substa_out [subst $substa_out]
        } else {
            # since explicit value did not exist, try a wildcard value.
            # substitute "*" as the array key and repeat.
            set substa_tmp [split $substa_in "()"]
            set substa_in "[lindex $substa_tmp 0](*)"
            append ::substa_debug "*"
            if { [info exists [set substa_in]] } {
                set substa_out [subst $$substa_in]
                set substa_out [subst $substa_out]
            } else {
                error "substa \"$substa_in\" array value not found"
            }
        }
    }
    return $rval
}

proc iapp_conf { args } {

    # Return value $object_name is set to the first word in $arg that
    # contains an underscore, since the position of the object name in
    # tmsh syntax is not consistent.
    set args [join $args]
    set object_name [lindex $args [lsearch -glob $args "*_*"]]

    # Global array ::tmsh_history persists between calls to iapp_conf
    # in order to suppress duplicate commands.
    if { ![info exists ::tmsh_history($args)] } {
        set ::tmsh_history($args) 1
        iapp_debug $args
        switch -exact -- [string range $args 0 5] {
            create { tmsh::create [string range $args 7 end] }
            modify { tmsh::modify [string range $args 7 end] }
            delete { tmsh::delete [string range $args 7 end] }
            default { error "iapp_conf illegal parameter" }
        }
    }
    return $object_name
}

proc iapp_make_safe_password { password } {
    return [string map { \' \\\\\\\' \# \\\\\\\# \\ \\\\\\\\ } $password]
}

proc iapp_pull { loc items_list } {
    upvar $items_list items
    if { [set item [lindex $items $loc]] != "" } {
        set items [lreplace $items $loc $loc]
    }
    return $item
}

proc iapp_process_flags { flags_array args_list } {
    upvar $flags_array flags
    upvar $args_list args

    if { [set dubdash [lsearch $args "--"]] != -1 } {
        set args [lreplace $args $dubdash $dubdash];
    } else {
        set dubdash end
    }

    foreach flag [array names flags] {
        while { [set ptr [lsearch [lrange $args 0 $dubdash] $flag]] != -1 } {
            set args [lreplace $args $ptr $ptr];

            # we want to run the code in the flags_array at the calling
            # proc's level so that the variables that it sets up are
            # available there.
            set access_var [format "$%s(%s)" $flags_array $flag]
            set command [subst -nocommands { set ptr $ptr ; subst $access_var }]

            uplevel 1 $command
        }
    }
    return $args
}

proc iapp_tmos_version { args } {
    # if $::version equals "", it might just mean that it hasn't been
    # initialized yet - use a global variable so that subsequent comparisons
    # don't have to fetch this from the MCP
    if { ![info exists ::version] || $::version eq "" } {
        if { [catch { set version_blob [tmsh::show sys version] } err] } {
            tmsh::log err "unable to retrieve TMOS version"
            error "unable to retrieve TMOS version"
        }
        # the first and last few lines of this output can be skipped because
        # they are either blank or don't represent key/value pairs
        # TODO: this won't work for hotfixes
        foreach line [string trim [lrange [split $version_blob "\n"] 3 end-2]] {
            set key [lindex $line 0]
            if { $key eq "Version" } {
                set ::cversion [lindex $line 1]
                break
            }
        }
    }

    if { $::cversion eq "" } {
        tmsh::log err "unable to determine TMOS version"
        error "unable to determine TMOS version"
    }

    # if no op+version was specified, just return the version
    if { $args eq "" } { return $::cversion }
    if { [llength $args] > 2 } {
        error "Too many arguments"
    }

    set op [lindex $args 0]; # operator
    set NOTFOUND -1
    # constrain to valid operators - adding more is fine as long as
    # they're supported by [expr] (and makes sense)
    if { [lsearch -exact { < > <= >= == != } $op] == $NOTFOUND } {
        tmsh::log err "illegal operator: $op"
        error "illegal operator: $op"
    }

    set tversion [lindex $args 1]; # target version
    # one or two decimal digits, optionally followed by 0-2 complete groups of
    # dots followed by one or two decimal digits with nothing before or after
    set regex {^\d{1,2}(\.\d{1,2}){0,2}$}
    if { ! [regexp -- $regex $tversion] } {
        tmsh::log err "cannot parse version from: $tversion"
        error "cannot parse version from: $tversion"
    }

    set cversion $::cversion; # current version
    # p=>prefix, c=>current, t=>target
    foreach p { c t } {
        # extract major/minor/point components
        scan [set [set p]version] "%d.%d.%d" [set p]mjr [set p]mnr [set p]pnt
        # ensure that these are each set to at least 0
        foreach level { mjr mnr pnt } {
            if { ! [info exists [set p]${level}] } { set [set p]${level} 0 }
        }
        # turn them into one big number that we can compare
        # leave room in-between just to be safe
        set [set p]num [expr {
            [set [set p]mjr]*1000000 +
            [set [set p]mnr]*10000 +
            [set [set p]pnt]*100
        }]
    }
    # a simple numeric comparison is all that is needed at this point
    return [eval expr $cnum $op $tnum ]
}

proc iapp_get_items { args } {

    # Set default values.
    set error_msg  "iapp_get_items $args:"
    set do_binary  0
    set nocomplain 0
    set items      ""
    set join_char  "\n"
    set recursive  "recursive"
    set com_dir    "/Common"
    set loc_dir    "[tmsh::pwd]"

    # Set up flag-related work.
    array set flags  {
        -exists      { [set do_binary 1] }
        -nocomplain  { [set nocomplain 1] }
        -list        { [set join_char " "] }
        -norecursive { [set recursive ""] }
        -local       { [set com_dir   ""] }
        -dir         { [set loc_dir      [iapp_pull $ptr args]] }
        -filter      { [set filter_field [iapp_pull $ptr args]] \
                       [set filter_op    [iapp_pull $ptr args]] \
                       [set filter_value [iapp_pull $ptr args]] }
    }
    iapp_process_flags flags args

    # Get system object names in all requested directories.
    set save_dir [tmsh::pwd]
    foreach dir [lsort -unique "$com_dir $loc_dir"] {
        tmsh::cd $dir
        set tmsh_rval [catch {
            foreach obj [tmsh::get_config $args $recursive] {

                if { [info exists filter_field] } {
                    if { $filter_field eq "NAME" } {
                        set val [tmsh::get_name $obj]
                    } else {
                        # If get_field_value throws error, assume "none" value
                        if { [catch {
                            set val [tmsh::get_field_value $obj $filter_field]
                        }]} { set val none }
                    }
                    # Non-Tcl operators =~ and !~ added for extra flexibility
                    if { $filter_op eq "=~" } {
                        set filter "\[regexp \"$filter_value\" \"$val\"\]"
                    } elseif { $filter_op eq "!~" } {
                        set filter "!\[regexp \"$filter_value\" \"$val\"\]"
                    } else {
                        set filter "\\\"$val\\\" $filter_op \\\"$filter_value\\\""
                    }
                    # If filter fails, skip to next object
                    if { ![eval expr $filter] } {
                        continue
                    }
                }
                # string map catches /Common added by ltm profile ntlm,
                # which is unlike all other ltm profile return values.
                lappend items $dir/[string map {/Common/ ""} [tmsh::get_name $obj]]
            }
        } err ]
    }
    tmsh::cd $save_dir

    # array keys: $do_binary,$tmsh_rval,$nocomplain. Do not insert whitespace.
    array set rval {
        0,0,0 {[join $items $join_char]}
        0,0,1 {[join $items $join_char]}
        0,1,0 {[error "$error_msg $err"]}
        0,1,1 {}
        1,0,0 {[llength $items]}
        1,0,1 {[llength $items]}
        1,1,0 {0}
        1,1,1 {0}
    }

    return [subst $rval($do_binary,$tmsh_rval,$nocomplain)]
}

proc iapp_get_provisioned { args } {

    array set lnum {
        none      0
        minimum   1
        nominal   2
        dedicated 3
    }

    # Set defaults.
    set required minimum
    set do_binary 1

    # Set up flag-related work.
    array set flags  {
        -is          { [set required [iapp_pull $ptr args]] }
        -level       { [set do_binary 0] }
    }
    iapp_process_flags flags args
    if { [llength $args] > 1 } {
        error "Too many arguments"
    }

    # If checking for AM provisioning on TMOS < 11.4,
    # check for WAM provisioning instead.
    if { $args eq "am" && [iapp_tmos_version < 11.4] } {
        set args "wam"
    }

    # Get the provisioning level. If blank, assume none.
    # Proc only checks 1 module at a time, so only 1 object is returned.
    set obj [tmsh::get_config sys provision $args]
    if { [catch {
        set level [tmsh::get_field_value [lindex $obj 0] level]
    }]} { set level none }

    if { $do_binary } {
        return [expr { $lnum($level) >= $lnum($required) }]
    } else {
        return $level
    }
}

proc iapp_destination { args } {
    # Set defaults. Flag actions may overwrite defaults later.
    set route_domain    0
    set do_mask         0
    set port            0

    # Set up flag-based actions.
    array set flags  {
        -route_domain { [set route_domain [iapp_pull $ptr args]] }
        -mask         { [set do_mask 1] }
        -length       { [set cidr_bits [iapp_pull $ptr args]] }
    }

    if { [llength [set non_switches [iapp_process_flags flags args]]] > 2 } {
        error "Too many arguments"
    }
    if { [llength $non_switches] == 2 } { set port [lindex $non_switches 1] }
    set addr [lindex $non_switches 0]

    # Pull the route-domain off the addr string, but only use it as the 
    # route domain if it wasn't overridden by -route_domain flag.
    if { [string first "%" $addr] != -1 } {
        if { $route_domain == 0 } {
            # route-domain is still default, so use value from addr string
            set route_domain [lindex [split $addr "%"] 1]
        }
        set addr [lindex [split $addr "%"] 0]
    }

    if { $do_mask } { ;# calculate a mask

        # Define the delta between ipv4 and ipv6.
        # length: ipv4 mask is 32 bits, ipv6 is 128 bits.
        # group: ipv4 is grouped in octets, ipv6 as 16 bit words.
        # format: ipv4 is decimal notation, ipv6 is hex.
        # format1 also has the delimiter, format2 does not.
        array set v {
            0,length  32
            0,group   8
            0,format1 d.
            0,format2 d
            1,length  128
            1,group   16
            1,format1 .4x:
            1,format2 .4x
        }

        # Detect a node name and convert it to an ip address, then detect IPv6.
        if { [string first / $addr] != -1 } {
            set node [lindex [tmsh::get_config ltm node $addr] 0]
            set addr [tmsh::get_field_value $node address]
        }
        set is_ipv6 [string match "*:*:*" $addr]

        # Soften result of an illegal -length parameter.
        if { ![info exists cidr_bits] || $cidr_bits > $v($is_ipv6,length) } {
            set cidr_bits $v($is_ipv6,length)
        } elseif { $cidr_bits < 0 } {
            set cidr_bits 0
        }

        # Loop on the full length of the mask: 32 bits for ipv4, 128 for ipv6
        for { set octet 0; set i 0 } { $i < $v($is_ipv6,length) } { incr i } {

           # Take a break at intervals to save the grouping and add delimiter.
           # Interval is 8 bits for ipv4 and 16 bits for ipv6.
           if { $i && ![expr {$i % $v($is_ipv6,group)}] } {

               # Add the grouping and delimiter to the mask, then reset.
               append mask [format %$v($is_ipv6,format1) $octet]
               set octet 0
           }
           # Shift the prior bits left by multiplying by 2.
           # Then add the current bit, which is 1 if part of the mask, 0 if not.
           # Current bit is part of the mask if $i < number of bits in the mask.
           set octet [expr { 2 * $octet + [expr {$i < $cidr_bits}] }]
        }
        # Add the final grouping, then return the finished mask.
        set ret_val [format $mask%$v($is_ipv6,format2) $octet]

    } else { ;# calculate a destination
        # the route domain might be a name and we need a number.
        if { ![string is integer $route_domain] } {
            set route_domains [tmsh::get_config "/ net route-domain $route_domain"]
            if { [llength $route_domains] != 1 } {
                error "no such route domain: $route_domain"
            }
            # since we have already determined that the list is 1 long,
            # this explicit reference to element 0 is safe
            set route_domain [tmsh::get_field_value [lindex $route_domains 0] "id"]
        }

        set route_domain [expr { $route_domain == 0 ? "" : "%$route_domain" }]

        # 0 and * represent wildcard port assignments in the GUI,
        # but TMSH requires the string 'any' to specify a wildcard.
        if { $port == 0 || $port == "*" } {
            set port any
        }

        # Detect addresses that match node definitions
        set nodes [tmsh::get_config ltm node recursive]
        foreach node $nodes {
            if { $addr eq [tmsh::get_field_value $node address] } {
                set addr [tmsh::get_name $node]
                break
            }
        }

        # Build the final destination. Use ":" for node names even if ipv6.
        set is_ipv6_literal [string match "*:*:*" $addr]
	    set addr_delimiter  [expr { $is_ipv6_literal ? "." : ":" }]
        set ret_val ${addr}${route_domain}${addr_delimiter}${port}
    }
    return $ret_val
}

proc iapp_pool_members { args } {

    # Set defaults.
    array set fields {
        address          addr
        port             port
        port-secure      port_secure
        connection-limit connection_limit
        priority-group   priority
        ratio            ratio
    }
    set route_domain ""
    set port_override -1
    set aaa_domain 0
    set aaa_priority -1

    # Set up flag-related work.
    array set flags {
        -fields       { [array set fields  [iapp_pull $ptr args]] }
        -route_domain { [set route_domain  [iapp_pull $ptr args]] }
        -port         { [set port_override [iapp_pull $ptr args]] }
        -aaa_domain   { [set aaa_domain    1] }
        -aaa_pool     { [set aaa_priority  0] }
    }
    iapp_process_flags flags args

    # Identify the non-address/non-port fields. These go inside braces in tmsh.
    set nonport_fields [lsearch -all -not -inline -regexp \
        [array names fields] {address|port|port-secure}]

    set members ""
    foreach row [join $args] { 

        # Skip invalid table rows.
        if { [llength [join $row]] %2 == 1 } {
            continue
        }

        # Import APL table into an array for processing.
        array unset columns 
        array set columns [join $row] 
        set addr $columns($fields(address))

        # Identify the port number, either from table columns or by -port flag.
        if { $port_override != -1 } {
            set port $port_override
        } elseif { [info exists columns($fields(port))] } {
            set port $columns($fields(port))
        } elseif { [info exists columns($fields(port-secure))] } {
            set port $columns($fields(port-secure))
        } else {
            set port 80
        }

        # If specified, strip entered route domain and append the flag value.
        if { $route_domain != "" } {
            set addr [lindex [split $addr "%"] 0]
            set addr "$addr%$route_domain"
        }

        # If -aaa_domain, use domain controller format, otherwise use pool format
        if { $aaa_domain } {
            append members " $columns($fields(host)) \{ ip $addr \}"
        } else {
            append members " [iapp_destination $addr $port] \{"

            # Transfer non-port fields from the table to the tmsh string.
            foreach name $nonport_fields {
                if { [info exists columns($fields($name))] } {
                    append members " $name $columns($fields($name))"
                }
            }

            # If -aaa_pool, add priority field with incrementing value.
            # This is required by APM.
            if { $aaa_priority >= 0 } {
                append members " priority-group [incr aaa_priority]"
            }
            append members " \}"
        }
    }

    return "[expr { $aaa_domain ? "" : "members " }][expr { $members eq "" \
        ? "none" : "replace-all-with \{ $members \}" }]"
}

proc iapp_debug { args } {

    # Passwords should be obscured in all logs. Fields shown here are handled
    # in this proc, but the global variable may be overwritten if alternate
    # fields should be obscured.
    if { ![info exists ::SENSITIVES] } {
        set ::SENSITIVES {
            account-password
            admin-encrypted-password
            password
            passwd
            secret
        }
    }

    # look for any of the sensitive words, and replace the word that follows it
    set regex "(\\m([join $::SENSITIVES |])\\M)\\s+\[^\\s\]*"
    regsub -all $regex [join $args] {\1 -OBSCURED-} args

    set lev [tmsh::get_field_value [lindex [tmsh::get_config sys scriptd \
        log-level] 0] log-level]
    if { $lev eq {debug} } {
        puts $args
    }
}

# The apm_config proc provides a tmsh pre-processor for APM
# configuration, which in most cases will drastically reduce
# implementation code. To configure APM with this proc, pass
# it an array of object names and associated meta-tag substitutions.
# Each object must be categorized as a profile, a resource, or
# a policy-item. APM agents and customization-groups are derived
# from these 3 categories as needed.
#
# apm_config's return value is a list of the APM profiles defined
# in the argument and instantiated by the proc. This allows the
# procedure call to be embedded directly into a virtual server
# definition.
#
# These universal meta-tags may be placed anywhere in the array:
# <ITEM> The object name, eg. apm_access
# <PREFIX> The app name, including folder, eg. /Common/my_app.app/my_app
#
# Profile objects require the following meta-tags:
# <PROFILE_TYPE> The tmsh object type, eg. "apm profile access"
# <PROFILE_DEF>  The body of the object, eg.:
#     "access-policy <PREFIX>_apm
#      defaults-from /Common/access
#      eps-group <PREFIX>_apm_access_eps
#      errormap-group <PREFIX>_apm_access_errormap
#      general-ui-group <PREFIX>_apm_access_general_ui"
#
# apm_config will automatically create default customization-groups
# for the "-group" lines specified in access profile definitions.
# In the above example, there is no need to additionally specify a
# customization-group for errormap and general-ui.
#
# <PROFILE_TYPE> is a catch-all for other APM types, eg:
#      apm_sso {
#          <PROFILE_TYPE> {apm sso kerberos}
#          <PROFILE_DEF>  "account-name <USER>
#                          account-password <PASS>
#                          realm <REALM>" }
#
# In the example above, <PROFILE_TYPE> and <PROFILE_DEF> are
# apm_config meta-tags, while <USER>, <PASS>, and <REALM> must
# be substituted before calling apm_config, eg. if these tags are
# defined in $pre_proc_map, they may be substituted with:
# array set apm_map [string map [subst $pre_proc_map] [array get apm_map]]
#
# Resource objects require the following meta-tags:
# <RESOURCE_TYPE> The apm resource object type, eg. "webtop"
# <RESOURCE_DEF>  The body of the object, eg.:
#     "customization-group <ITEM>
#      minimize-to-tray false
#      webtop-type full"
#
# In the above example, a customization-group is specified. Any
# customization-group is assumed to be blank unless further defined by the
# <GROUP_DEF> meta-tag, eg. <GROUP_DEF> {type webtop}
#
# Policy-item objects are defined by the following meta-tags:
# <AGENT_TYPE>   default "resource-assign"
# <AGENT_DEF>    default "customization-group <ITEM>"
# <ITEM_AGENT>   default "agents { <ITEM>_ag { type <AGENT_TYPE> }}"
# <ITEM_CAPTION> default "<ITEM>"
# <ITEM_COLOR>   default "1"
# <ITEM_TYPE>    default "action"
# <ITEM_RULES>   defaults to a set of expressions/next-items where specified
# <RULE_CAPTION_0> default "fallback"
# <RULE_CAPTION_1> default "Successful"
# <RULE_CAPTION_2> default "successful"
#
# apm_config generates the APM agent and customization-group definitions
# as required for each policy-item, but specific objects may be defined
# by using the <AGENT_DEF> and <GROUP_DEF> meta-tags.
# To suppress the formation of an APM agent, specify <ITEM_AGENT> {}.

proc iapp_apm_config { map_array_name } {
    upvar $map_array_name map_array

    # Pull $prefix from the array
    set prefix $map_array(prefix)
    unset map_array(prefix)

    # Stencils for creating apm objects
    set access_form \
       "<TMSH_CREATE> apm policy access-policy <PREFIX>_apm {\n   \
          caption general\n   \
          start-item <ACCESS_START_ITEM>\n   \
          default-ending <ACCESS_ENDING>\n   \
          items replace-all-with {\n<ACCESS_ITEMS>    }\n}"

    set profile_form "<TMSH_CREATE> <PROFILE_TYPE> <ITEM> {\n   \
        <PROFILE_DEF>\n}"

    set resource_form "<TMSH_CREATE> apm resource <RESOURCE_TYPE> <ITEM> {\n   \
        <RESOURCE_DEF>\n}"

    set agent_form "<TMSH_CREATE> apm policy agent <AGENT_TYPE> <ITEM>_ag {\n   \
        <AGENT_DEF>\n}"

    set group_form "<TMSH_CREATE> apm policy customization-group <ITEM> {\
        <GROUP_DEF>}"

    set policy_item_form "<TMSH_CREATE> apm policy policy-item <ITEM> {
    <ITEM_AGENT>caption <ITEM_CAPTION>
    color <ITEM_COLOR>
    <ITEM_TYPE>
    <ITEM_RULES>\n}"

    # 1st round apm string map
    set default_map_1 {
        <ACCESS_ITEM> {}
        <AGENT_DEF> "customization-group <ITEM>"
        <ITEM_AGENT> "agents replace-all-with {
        <ITEM>_ag { type <AGENT_TYPE> }}\n    "
        <ITEM_CAPTION> <ITEM>
        <ITEM_COLOR> {1}
        <ITEM_TYPE> "item-type action"
        <ITEM_RULES> "rules
        {[expr {[string first <RULE_NEXT_2> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_2>
            expression <RULE_EXPR_2>
            next-item ${prefix}_<RULE_NEXT_2>
        }":""}][expr {[string first <RULE_NEXT_1> $map_array($item)] != -1 ? "{
            caption <RULE_CAPTION_1>
            expression <RULE_EXPR_1>
            next-item ${prefix}_<RULE_NEXT_1>
        }":""}]{
            caption <RULE_CAPTION_0>
            next-item ${prefix}_<RULE_NEXT_0>
        }}"
    }

    # 2nd round apm string map
    set default_map_2 {
        <ITEM> ${prefix}_$item
        <PREFIX> ${prefix}
        <LOCAL_PATH> [string map {/ :} $prefix]
        <GROUP_DEF> ""
        <AGENT_TYPE> "resource-assign"
        <RULE_CAPTION_2> "successful"
        <RULE_CAPTION_1> "Successful"
        <RULE_CAPTION_0> "fallback"
    }

    # Build APM access profile and access-policy from the access_form.
    # Tags <ACCESS_ITEM> and <ACCESS_ENDING> are picked up from
    # $map_array items. <ITEM> and <GROUP_DEF> are picked up from
    # $default_map_2.
    foreach item [lsort [array names map_array]] {

        # Pick up the <ACCESS_ENDING> tag. There should be just 1.
        set access_form [string map $map_array($item) $access_form]

        # Filter out items that do not belong in the access-policy.
        # Anything with an ITEM_xxx tag belongs
        if { [string first <ITEM_ $map_array($item)] == -1 } {
            continue
        }

        # Add to the items list for the access-policy
        append access_items "        ${prefix}_$item {<ACCESS_ITEM>}\n"
        set access_items [string map $map_array($item) $access_items]
        set access_items [string map [subst $default_map_1] $access_items]
    }
    set def [string map "<ACCESS_ITEMS> {$access_items}" $access_form]
    set cmds "[string map [subst $default_map_2] $def]\n"

    # Build APM resources, policy-items, agents, and customization-groups from 
    # the policy_item_form and resource_form.
    foreach item [lsort [array names map_array]] {

        # Each item starts as a profile, a resource, or a policy-item.
        # Profiles are free-form, so other apm objects can use the profile form.
        # In most cases, a policy-item spawns an agent.
        # Any definition specifying a customization-group will spawn that group.
        if { [string first "<PROFILE_DEF>" $map_array($item)] != -1 } {

            # Collect profile names for attachment to the virtual server
            if { [string first " profile " $map_array($item)] != -1 } {
                append profiles "${prefix}_$item "
            }
            set def $profile_form
        } elseif { [string first "<RESOURCE_DEF>" $map_array($item)] != -1 } {
            set def $resource_form
        } else {
            set def $policy_item_form
            if { [string first "<ITEM_AGENT> {}" $map_array($item)] == -1 } {
                append def $agent_form
            }
        }

        # Apply 1st pass of string maps
        set def [string map $map_array($item) $def]
        set def [string map [subst $default_map_1] $def]

        # If a customization-group is specified, add its definition
        if { [string first "customization-group" $def] != -1 } {
            append def $group_form
        }

        # Default general-ui customization group is of the wrong type.
        # Forcing the type in a create statement avoids this error.
        if { [string first "general-ui-group" $def] != -1 } {
            append def "<TMSH_CREATE> apm policy customization-group <PREFIX>_apm_access_general_ui type general-ui"
        }

        # Apply 2nd pass of string maps
        set def [string map $map_array($item) $def]
        append cmds [string map [subst $default_map_2] $def]
    }

    # Divide and execute tmsh commands
    set last [expr {[string first <TMSH_CREATE> $cmds] + 13}]
    while { [set pos [string first <TMSH_CREATE> $cmds $last]] != -1 } {
        incr pos -1
        iapp_conf create [string range $cmds $last $pos]
        set last [expr {$pos + 14}]
    }
    iapp_conf create [string range $cmds $last end]
    return $profiles
}

proc iapp_upgrade_template { upgrade_var upgrade_trans } {
    upvar $upgrade_var   upgrade_var_arr
    upvar $upgrade_trans upgrade_trans_arr

    # create the new variables from the old
    foreach { var } [array names upgrade_var_arr] {

        # substitute old variable name for abbreviation "##"
        regsub -all {##} $upgrade_var_arr($var) \$$var map_cmd

        # run the mapping command from inside the array
        if { [catch { subst $map_cmd } err] } {
            if { [string first "no such variable" $err] == -1 } {
                puts "ERROR $err"
            }
        }
    }

    # move variables over and apply translations
    set var_mods ""
    set var_adds ""
    foreach var [array names vx] {

        # if the APL variable name is in the translation array,
        # then use the custom translation built for that variable.
        if { [info exists upgrade_trans_arr($var)] } {
            array set sub_arr [subst $upgrade_trans_arr($var)]
            if { [info exists sub_arr($vx($var))] } {
                set vx($var) $sub_arr($vx($var))
            }
            array unset sub_arr
        # else, if the APL variable value is in the translation array,
        # then use the generic translation of that value.
        } elseif { [info exists upgrade_trans_arr($vx($var))] } {
            set vx($var) [subst $upgrade_trans_arr($vx($var))]
        }

        # add to tmsh command string
        if { [info exists ::$var] } {
            append var_mods "\n $var \{ value \"$vx($var)\" \} "
        } else {
            append var_adds "\n $var \{ value \"$vx($var)\" \} "
        }
    }

    # move tables over
    set tbl_mods ""
    set tbl_adds ""
    foreach tbl [array names tx] {

        # convert table from APL format to TMSH format
        if { ![llength $tx($tbl)] } {
            set tbl_def "column-names none"
        } else {
            set rows_def ""
            foreach apl_row $tx($tbl) {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            set tbl_def \
            "\n  column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        }

        # add to tmsh command string
        if { [info exists ::$tbl] } {
            append tbl_mods "\n $tbl \{ $tbl_def \} "
        } else {
            append tbl_adds "\n $tbl \{ $tbl_def \} "
        }
    }

    # construct the "tmsh modify" command
    set cmd "sys application service $tmsh::app_name "
    if { [llength $var_mods] } {
        append cmd "\nvariables modify { $var_mods }"
    }
    if { [llength $var_adds] } {
        append cmd "\nvariables add { $var_adds }"
    }
    if { [llength $tbl_mods] } {
        append cmd "\ntables modify { $tbl_mods }"
    }
    if { [llength $tbl_adds] } {
        append cmd "\ntables add { $tbl_adds }"
    }

    # Execute with debug output. This conversion takes place within the
    # existing ASO, so tmsh modify is used instead of tmsh create.
    iapp_debug "TEMPLATE UPGRADE"
    iapp_conf modify $cmd
    return
}

proc iapp_downgrade_template { pivot_var upgrade_var downgrade_table } {
    upvar $downgrade_table downgrade_tbl_arr

    # The ASO variable "offload_history" is used to recover the legacy
    # choice a user made about SSL offload. It should be present in all cases.
    # This conditional only handles the case where a user has deliberately
    # deleted it by manipulating the ASO directly from tmsh.
    if { ![info exists ::offload_history] } {
        set ::offload_history "No"
    }

    # BIG-IP erases table contents when the APL optional hides the table.
    # Since the prior data is not available, this downgrade must back-convert
    # existing table data. Unlike tables, variables remain intact from the
    # legacy ASO.
    set tbl_def ""
    foreach tbl [array names downgrade_tbl_arr] {
        # Check for existence of each table in the current context.
        # If not, skip to next.
        if { ![info exists [set tbl]] } {
            continue
        }
        # Check for existence of each table in the legacy context.
        # If not, add an empty table so "tmsh tables modify" does not fail.
        if { ![info exists ::$downgrade_tbl_arr($tbl)] } {
            iapp_conf modify sys app ser $tmsh::app_name tables add \{ $downgrade_tbl_arr($tbl) \}
        }
        append tbl_def "$downgrade_tbl_arr($tbl) \{ "
        if { [llength [subst $$tbl]] } {
            set rows_def ""
            foreach apl_row [subst $$tbl] {
                array set row_arr [join $apl_row]
                append rows_def "\n  \{ row \{ "
                foreach apl_col [array names row_arr] {
                    append rows_def "$row_arr($apl_col) "
                }
                append rows_def "\}\}"
            }
            append tbl_def \
            "column-names \{ [array names row_arr] \} rows \{ $rows_def \}"
            array unset row_arr
        } else {
            append tbl_def "rows none"
        }
        append tbl_def " \} "
    }
    regsub -all "\n" $tbl_def {} tbl_def
    set cmd "sys app ser $tmsh::app_name \
        variables modify \{ \
            $pivot_var \{ value $::offload_history \} \
            $upgrade_var \{ value No \} \
        \} \
        tables modify \{ $tbl_def \}"
    iapp_debug "TEMPLATE DOWNGRADE"
    iapp_conf modify $cmd
    return
}
    app-service none
    description none
    ignore-verification false
    script-checksum none
    script-signature none
    signing-key none
[END]
sys application template %(key)s [BEGIN]
    actions {
        definition {
            html-help {
                <p><b>Exchange 2010 and 2013 Client Access Server Template</b></p>

<p>This template creates a complete configuration optimized for managing traffic associated with Microsoft Exchange 2010 and 2013 SP1 Client Access Server (CAS) implementations. <br> Before you start: </p>
<ul>
    <li>For detailed information and help using this iApp, including any updates, see http://www.f5.com/pdf/deployment-guides/microsoft-exchange2010-iapp-dg.pdf</li>
    <li>Check System :: Resource Provisioning to ensure that LTM (Local Traffic Manager) is provisioned.</li>
    <li>Set up VLANs and Self-IP addresses on the networks you will use for client-side and server-side traffic.</li>
    <li>Import the proper SSL certificates that correspond to the DNS names used by the clients.</li>
    <li>If deploying BIG-IP APM (Access Policy Manager) features, including Edge Gateway, you must fully license and provision APM before starting the template.</li>
    <li>For BIG-IP APM, you must configure this BIG-IP device to use a DNS server that is able to resolve names in your Active Directory domain(s). You must also configure an NTP time source for this BIG-IP device and your domain controller(s) so their times are closely synchronized. See the Deployment Guide for specific instructions.  </li>
</ul>
            }
            implementation {
                tmsh::include f5.iapp.1.1.0.cli
iapp_template start

# CONSTANTS
set YES_ANSWER "Yes"
set LAN_OPTION "LAN"
set WAN_OPTION "WAN"
set EDGE_DEPLOYMENT_SCENARIO \
    "BIG-IP Edge Gateway or APM will provide secure remote access to CAS"
set ALL_ON_LTM_SCENARIO "LTM will load balance and optimize CAS traffic"
set LTM_BEHIND_EDGE \
    "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM"
set EXCHANGE_2010_ANSWER "Exchange Server 2010"
set STATIC_ANSWER "Static"
set SINGLE_POOL_OPTION \
    "All services will be handled by the same set of Client Access Servers"
set SINGLE_IP_ANSWER "Single IP address"
set CREDENTIALS_REQUIRED_FOR_BINDING_ANSWER \
    "Credentials are required for binding"
set ENCRYPTED_ANSWER "Encrypted"
set REENCRYPT_SSL_BRIDGING_ANSWER "Re-encrypt (SSL Bridging)"
set ENCRYPT_SSL_BRIDGING_ANSWER "Encrypt (SSL Bridging)"
set SELF_SIGNED_OR_DEFAULT_CERT_AND_KEY_ANSWER \
    "Self-signed or default certificate and key"
set USE_DEFAULT_PROFILE_ANSWER "Use Default Profile"
set NEED_SNATPOOL_ANSWER "More than 6000"
set SAME_SUBNET_ANSWER \
    "Same subnet for BIG-IP virtual servers and Client Access Servers"
set NOT_DEFAULT_GATEWAY_ANSWER \
    "Client Access Servers do NOT use BIG-IP as their default gateway"
set ADVANCED_POOL_SETTINGS_ANSWER "Customize pool settings"
set SECOND_MAILBOX_ANSWER "Monitor a second mailbox (recommended)"
set USING_SINGLE_DOMAIN_ANSWER "One FQDN for all HTTP services"
set QUEUE_TCP_REQUESTS_ANSWER "Queue TCP requests"
set USE_ADVANCED_MONITOR_ANSWER "Use advanced monitors"
set DEFAULT_FORMS_BASED_ANSWER "OWA uses the default Forms-Based authentication"
set HOST_HEADER_ANSWER "Use the Outlook Anywhere host header"

# UTILITY PROCEDURES

# Most of the snatpool irule is stored in $::forms. This routine inserts
# a list of snatpool members and returns the complete irule text.
# Variable names must not have dash characters per BZ419922.
proc create_snatpool_irule { } {
    set no_dash [string map {- _} $::app]
    set map "_SNATPOOL_MEMBERS \{"
    set count 0
    # This string map effectively extracts the address values from the APL
    # table by purging the column header "addr" and all of the braces.
    set snat_addrs [string map { addr {} \{ {} \} {} } \
        $::deployment__snatpool_members] 
    foreach snat_addr $snat_addrs {
        append map "    set static::snat_ips_${no_dash}($count) $snat_addr\n"
        set count [expr {$count + 1}]
    }
    append map "\} _APP_NAME {$no_dash}"
    # This string map pulls the static irule out of the forms array and
    # adds in the list of snatpool members as entered by the template user.
    return [string map $map $::forms(snatpool_irule)]
}

# Writes the external monitor for the autodiscover service.
proc create_eav_script { script_name } {
    set eav_script_name /config/monitors/${::app}_$script_name
    set map "_APP_NAME $::app 
        _HTTP_OR_HTTPS [expr { $::do_server_ssl ? "https" : "http" }]
        _CURL [expr { [file exists /usr/bin/curl-apd] ? "curl-apd" : "curl" }]"
    set fn [open "$eav_script_name" "w" "0755"]
    # This string map pulls the static bash script out of the forms array and
    # customizes it for http or https based on the user's SSL selections.
    puts $fn [string map $map $::forms($script_name)]
    close $fn
    return $eav_script_name
}

# STATIC FORMS
# Text-heavy forms for bash scripts and irules
array set forms {
ad_monitor_eav_script {#!/bin/sh
# These arguments supplied automatically for all external monitors:
# $1 = IP (nnn.nnn.nnn.nnn notation)
# $2 = port (decimal, host byte order)
#
# This script expects the following Name/Value pairs:
#  USER  = the username associated with a mailbox
#  PASSWORD = the password for the user account
#  DOMAIN = the Windows domain in which the account lives
#  EMAIL = the email address associated with the user mailbox
#
# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)

NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
    # node is v4
    NODE=${NODE}
else
    # node is v6
    NODE=[${NODE}]
fi
PORT=${2}
DIR="http://schemas.microsoft.com/exchange/autodiscover/outlook"
PIDFILE="/var/run/`basename ${0}`.my_new_iapp_test_2010_${USER}_${NODE}_ad.pid"
XML1=$( cat<<EOF
<?xml version="1.0"?><Autodiscover xmlns="${DIR}/requestschema/2006"><Request><EMailAddress>
EOF
)
XML2=$( cat<<EOF
</EMailAddress><AcceptableResponseSchema>${DIR}/responseschema/2006a</AcceptableResponseSchema></Request></Autodiscover>
EOF
)
XMLFULL=${XML1}${EMAIL}${XML2}
RECV='</Autodiscover>'
ADSURI='/Autodiscover/Autodiscover.xml'
# kill of the last instance of this monitor if hung and log current pid
if [ -f $PIDFILE ]
then
   echo "EAV exceeded runtime needed to kill ${NODE}:${PORT}" | logger -p local0.error
   kill -9 `cat $PIDFILE` > /dev/null 2>&1
fi
echo "$$" > $PIDFILE
_CURL -g -s --ntlm -k -X POST -H 'Content-Type: text/xml; charset=utf-8' -d "${XMLFULL}" -u ${DOMAIN}\\${USER}:${PASSWORD} _HTTP_OR_HTTPS://${NODE}${ADSURI} | grep -i "${RECV}" 2>&1 > /dev/null
STATUS=$?
rm -f $PIDFILE
if [ $STATUS -eq 0 ]
then
    echo "UP"
fi
exit
}

ews_monitor_eav_script {#!/bin/sh
# These arguments supplied automatically for all external monitors:
# $1 = IP (nnn.nnn.nnn.nnn notation)
# $2 = port (decimal, host byte order)
#
# This script expects the following Name/Value pairs:
#  USER  = the username associated with a mailbox
#  PASSWORD = the password for the user account
#  DOMAIN = the Windows domain in which the account lives
#  EMAIL = the email address associated with the user mailbox
#
# Remove IPv6/IPv4 compatibility prefix (LTM passes addresses in IPv6 format)
NODE=`echo ${1} | sed 's/::ffff://'`
if [[ $NODE =~ ^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}$ ]]; then
    # node is v4
    NODE=${NODE}
else
    # node is v6
    NODE=[${NODE}]
fi
PORT=${2}
PIDFILE="/var/run/`basename ${0}`.my_new_iapp_test_2010_${USER}_${NODE}_ews.pid"
DIR="http://schemas.microsoft.com/exchange/services/2006"
XML1=$( cat<<EOF
<?xml version="1.0" encoding="UTF-8"?><soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/" xmlns:t="${DIR}/types" xmlns:m="${DIR}/messages"><soap:Header></soap:Header><soap:Body><GetFolder xmlns="${DIR}/messages"><FolderShape><t:BaseShape>IdOnly</t:BaseShape></FolderShape><FolderIds><t:DistinguishedFolderId Id="inbox"><t:Mailbox><t:EmailAddress>
EOF
)
XML2=$( cat<<EOF
</t:EmailAddress></t:Mailbox></t:DistinguishedFolderId></FolderIds></GetFolder></soap:Body></soap:Envelope>
EOF
)
XMLFULL=${XML1}${EMAIL}${XML2}
EWSURI='/EWS/Exchange.asmx'
RECV='<m:GetFolderResponseMessage ResponseClass="Success">'
# kill of the last instance of this monitor if hung and log current pid
if [ -f $PIDFILE ]
then
   echo "EAV exceeded runtime needed to kill ${NODE}:${PORT}" | logger -p local0.error
   kill -9 `cat $PIDFILE` > /dev/null 2>&1
fi
echo "$$" > $PIDFILE
_CURL -g -s --ntlm -k -X POST -H 'Content-Type: text/xml; charset=utf-8' -d "${XMLFULL}" -u ${DOMAIN}\\${USER}:${PASSWORD} _HTTP_OR_HTTPS://${NODE}${EWSURI} | grep -i "${RECV}" 2>&1 > /dev/null
STATUS=$?
rm -f $PIDFILE
if [ $STATUS -eq 0 ]
then
    echo "UP"
fi
exit
}

owa_redirect_irule {
when HTTP_REQUEST {
    if { ([HTTP::uri] == "/") } {
        HTTP::redirect https://[HTTP::host]/owa/
    }
}}

select_sso_irule {
when ACCESS_ACL_ALLOWED {
    set req_uri [HTTP::uri]
    if { $req_uri contains "_SSO_URI" } {
        WEBSSO::select [set foo _PREFIX_forms_sso]
    }  _SSO_11_1
    unset req_uri
}}

restrict_eac_source_irule {
when HTTP_REQUEST {
    if { [HTTP::uri] contains "/ecp" } {
        set response "<html><head><title>EAC Access Denied</title></head><body>
        We are sorry, but access to the Exchange Administration Center is
        restricted to approved client IP addresses. Your IP address, 
        [IP::client_addr], is not approved.</body></html>"
        if { [HTTP::header exists "Referer"] } {
            if { [HTTP::header "Referer"] contains "rfr=owa" } {
                _OWA_POOL
            }
        } elseif { [class match [IP::client_addr] equals "_APP_NAME_trustedAddresses"]} {
            _OWA_POOL
        } else {
            HTTP::respond 200 content $response
        }
        unset response
    }
}}

trustedAddresses { internal /Common/_APP_NAME_trustedAddresses {
    records replace-all-with { _TRUSTED _ETRUSTED }
    type ip
}}

edge_base_irule {
when ACCESS_ACL_ALLOWED {
    set sessionid [ACCESS::session data get "session.user.sessionid"]
    HTTP::header insert APM_session $sessionid
}
when HTTP_RESPONSE {
    if { [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate"} {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
    }
    if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
    }
}}

snatpool_irule {
when RULE_INIT {
    # Use a local array to configure SNAT addresses.
    # These addresses do not need to be defined in a SNAT pool or elsewhere.
_SNATPOOL_MEMBERS
}
when CLIENT_ACCEPTED {
    # Calculate the crc32 checksum of the client IP
    # Use the modulo of the checksum and number of SNAT IPs to pick a SNAT IP
    snat $static::snat_ips__APP_NAME([expr {[crc32 [IP::client_addr]] % [array size static::snat_ips__APP_NAME]}])
}}

oa_persist_irule {
when HTTP_REQUEST {
    switch -glob -- [string tolower [HTTP::path]] {
        "/ews*" {
            ## Exchange Web Services.
            if { [HTTP::header exists "APM_session"] } {
                persist uie [HTTP::header "APM_session"] 7200
            } else {
                persist source_addr
            }
        }
        "/rpc/rpcproxy.dll" {
            if { [HTTP::header exists "APM_session"] } {
                persist uie [HTTP::header "APM_session"] 7200
            } elseif { [string tolower [HTTP::header "Authorization"]]
                starts_with "basic" } {
                persist uie [HTTP::header "Authorization"] 7200
            } else {
                persist source_addr
            }
        }
    }
}
when HTTP_RESPONSE {
    if { [string tolower [HTTP::header values "WWW-Authenticate"]] 
        contains "negotiate"} {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
    }
    if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
    }
}}

ews_persist_irule {
when HTTP_REQUEST {
    switch -glob -- [string tolower [HTTP::path]] {
        "/ews*" {
            ## Exchange Web Services.
            if { [HTTP::header exists "APM_session"] } {
                persist uie [HTTP::header "APM_session"] 7200
            } else {
                persist source_addr
            }
        }
    }
}
when HTTP_RESPONSE {
    if { [string tolower [HTTP::header values "WWW-Authenticate"]] 
        contains "negotiate"} {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
    }
    if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
    }
}}

accept_encoding_irule {
when HTTP_REQUEST {
        _ACCEPT_ENCODING
}}

combined_pool_irule {
## Exchange 2013 iRule to select pool without persistence when all Exchange
## HTTP-based services are accessed through the same virtual server.
when HTTP_REQUEST {
    switch -glob -- [string tolower [HTTP::path]] {
        "/microsoft-server-activesync" {
            _AS_POOL
            _COMPRESS
            _CACHE
            return
        }
        "/owa*" {
            _ACCEPT_ENCODING
            _OWA_POOL
            return
        }
        "/ecp*" {
            ## Exchange Control Panel.
            _ACCEPT_ENCODING
            _OWA_POOL
            return
        }
        "/ews*" {
            ## Exchange Web Services.
            _OA_POOL_EWS_POOL
            _COMPRESS
            _CACHE
            return
        }
        "/oab*" {
            ## Offline Address Book.
            _OA_POOL_EWS_POOL
            persist none
            return
        }
        "/rpc/rpcproxy.dll" {
            ## Outlook Anywhere.
            _OA_POOL
            _COMPRESS
            _CACHE
            return
        }
        "/autodiscover*" {
            ## Requests for Autodiscovery information.
            _AD_POOL
            persist none
            return
        }
        default {
            _OWA_POOL
        }
    }
}
when HTTP_RESPONSE {
    if { [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate"} {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
    }
        if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
    }
}}

combined_persist_irule {
## iRule to select pool and persistence method when all HTTP-based services are
## accessed through the same virtual server. This iRule uses an HTTP header
## inserted by a BIG-IP Edge Gateway for persistence (if that header is present)
## Otherwise it will set persistence according to traditional methods.
when HTTP_REQUEST {
    switch -glob -- [string tolower [HTTP::path]] {
    "/microsoft-server-activesync" {
        ## Direct all ActiveSync clients to a common pool; use Auth
        ## header value if it exists (Basic auth only, which is the
        ## default); otherwise we fall back to client IP
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } elseif { [HTTP::header exists "Authorization"] } {
            persist uie [HTTP::header "Authorization"] 7200
        } else {
            persist source_addr
        }
        _AS_POOL
        _COMPRESS
        _CACHE
        return
    }
    "/owa*" {
        ## Outlook Web Access
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist cookie insert 0
        }
        _ACCEPT_ENCODING
        _OWA_POOL
        return
    }
    "/ecp*" {
        ## Exchange Control Panel.
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist cookie insert 0
        }
        _ACCEPT_ENCODING
        _OWA_POOL
        return
    }
    "/ews*" {
        ## Exchange Web Services.
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist source_addr
        }
        _OA_POOL_EWS_POOL
        _COMPRESS
        _CACHE
        return
    }
    "/oab*" {
        ## Offline Address Book. Persistence is not required for OAB
        _OA_POOL_EWS_POOL
        persist none
        return
    }
    "/rpc/rpcproxy.dll" {
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } elseif { [string tolower [HTTP::header "Authorization"]] starts_with "basic" } {
            persist uie [HTTP::header "Authorization"] 7200
        } else {
            persist source_addr
        }
        ## Outlook Anywhere.
        _OA_POOL
        _COMPRESS
        _CACHE
        return
    }
    "/autodiscover*" {
        ## Autodiscovery. No Persistence.
        _AD_POOL
        persist none
        return
    }
    default {
        ## This final section takes all traffic that has not otherwise
        ## been accounted for and sends it to the pool for Outlook Web App
        if { [HTTP::header exists "APM_session"] } {
            persist uie [HTTP::header "APM_session"] 7200
        } else {
            persist source_addr
        }
        _OWA_POOL
    }}
}
when HTTP_RESPONSE {
    if { [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate"} {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
    }
        if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
    }
}}

apm_combined_pool_irule {
when ACCESS_ACL_ALLOWED {
    set sessionid [ACCESS::session data get "session.user.sessionid"]
    switch -glob -- [string tolower [HTTP::path]] {
        "/microsoft-server-activesync" {
            _AS_POOL
            _PERSIST
            _COMPRESS
            _CACHE
            return
        }
        "/owa*" {
            _ACCEPT_ENCODING
            _OWA_POOL
            _PERSIST
            return
        }
        "/ews*" {
            _OA_POOL_EWS_POOL
            _PERSIST
            _COMPRESS
            _CACHE
            return
        }
        "/ecp*" {
            _ACCEPT_ENCODING
            _OWA_POOL
            _PERSIST
            return
        }
        "/oab*" {
            _OA_POOL_EWS_POOL
            persist none
            return
        }
        "/rpc/rpcproxy.dll" {
            _OA_POOL
            _COMPRESS
            _CACHE
            _PERSIST
            return
        }
        "/autodiscover*" {
            _AD_POOL
            persist none
            return
        }
        default {
            ## This final section takes all traffic that has not otherwise
            ## been accounted for and sends it to the pool for Outlook Web
            ## App
            _OWA_POOL
            _PERSIST
        }
    }
}
when HTTP_RESPONSE {
    if { [string tolower [HTTP::header values "WWW-Authenticate"]] contains "negotiate"} {
        ONECONNECT::reuse disable
        ONECONNECT::detach disable
        NTLM::disable
    }
    if {[HTTP::header exists "Transfer-Encoding"]} {
        HTTP::payload rechunk
    }
}}

oa_auth_irule {
# This becomes a system irule in v11.2, so the next 400 lines of code are only
# used for BIG-IP running v11.1 and earlier.
when RULE_INIT {
    # Please set the following global variables for customized responses.
    set static::actsync_401_http_body "<html><title>Authentication Failured</title><body>Error: Authentication Failure</body></html>"
    set static::actsync_503_http_body "<html><title>Service is not available</title><body>Error: Service is not available</body></html>"
    set static::ACCESS_LOG_PREFIX                 "01490000:7:"

    # Second Virtual Server name for 401 NTLM responder
    set static::ACCESS_SECOND_VIRTUAL_NAME   "_ACCESS_401_NTLM_responder_HTTPS"
    set static::POLICY_INPROGRESS            "policy_inprogress"
    set static::POLICY_AUTHFAILED            "policy_authfailed"
    # The request with huge content length cannot be used for starting ACCESS.
    # This kind of request will be put on hold, and this iRule will use another
    # request to start the session. The following value is used for OA:
    set static::OA_MAGIC_CONTENT_LEN          1073741824

    # Similar with OutlookAnywhere case, ACCESS can not use the request which is
    # larger then following size. This becomes an issue with application using
    # Exchange Web Service as its main protocol such as Mac OS X applications
    # (e.g. Mail app, Microsoft Entourage, etc)
    # This kind of request will be put on hold, and this iRule will try to use
    # another request to start the session.
    set static::FIRST_BIG_POST_CONTENT_LEN    640000

    # Set it into 1 if the backend EWS handler accepts HTTP Basic Authentication
    set static::EWS_BKEND_BASIC_AUTH          0
    # The following variable controls the polling mechanism.
    set static::POLICY_RESULT_POLL_INTERVAL       250
    set static::POLICY_RESULT_POLL_MAXRETRYCYCLE  600

    # Set this global variable to 1 for caching authentication failure
    # Useful for avoiding account locked out.
    set static::POLICY_RESULT_CACHE_AUTHFAILED    0

    # set this global variable to set alternative timeout for particular session
    set static::POLICY_ALT_INACTIVITY_TIMEOUT     120
    set static::ACCESS_USERKEY_TBLNAME     "_access_userkey"
    set static::ACCESS_DEL_COOKIE_HDR_VAL  "MRHSession=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/"
    log -noname accesscontrol.local1.debug "01490000:7: EWS_BKEND_BASIC_AUTH = $static::EWS_BKEND_BASIC_AUTH"
}

when ACCESS_ACL_ALLOWED {
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX [HTTP::method] [HTTP::uri] [HTTP::header Content-Length]"

    # MSFT Exchange's EWS request handler always requests NTLM even when the
    # connection has been already authenticated if it contains HTTP Basic Auth
    if { [ info exists f_exchange_web_service ] && $f_exchange_web_service  == 1 }  {
        if { $static::EWS_BKEND_BASIC_AUTH == 0 } {
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Removing HTTP Basic Authorization header"
            HTTP::header remove Authorization
        }
    }
}

when HTTP_REQUEST {
    set http_path                       [ string tolower [HTTP::path] ]
    set f_clientless_mode               0
    set f_alt_inactivity_timeout        0
    set f_rpc_over_http                 0
    set f_exchange_web_service          0
    set f_auto_discover                 0
    set f_activesync                    0
    set f_offline_address_book          0
    set f_availability_service          0

    #  Here put appropriate pool when necessary.
    switch -glob $http_path {
        "/rpc/rpcproxy.dll" {
            # Supports for RPC over HTTP. (Outlook Anywhere)
            set f_rpc_over_http 1
            # Does not include User-Agent into hash generation
            set f_no_include_uagent  1
        }
        "/autodiscover/autodiscover.xml" {
            # Supports for Auto Discover protocol.
            set f_auto_discover 1
            # This request does not require long inactivity timeout.
            # Don't use this for now
            set f_alt_inactivity_timeout 0
            # Does not include User-Agent into hash generation
            set f_no_include_uagent  1
        }
        "/microsoft-server-activesync" {
            # Supports for ActiveSync
            set f_activesync 1
        }
        "/oab/*" {
            # Supports for Offline Address Book
            set f_offline_address_book 1
            # Does not include User-Agent into hash generation
            set f_no_include_uagent  1
            # Don't use this for now
            set f_alt_inactivity_timeout 0
        }
        "/ews/*" {
            # Support for Exchange Web Service
            # Outlook's Availability Service borrows this protocol.
            set f_exchange_web_service 1
            # Does not include User-Agent into hash generation
            set f_no_include_uagent  1
        }
        "/as/*" {
            # Support for Availability Service.
            # do nothing for now. (Untested)
            set f_availability_service 1
            # Does not include User-Agent into hash generation
            set f_no_include_uagent  1
        }
        default {
            return
        }
    }

    set f_reqside_set_sess_id           0
    set f_has_cookie                    0
    set f_valid_cookie                  0
    set http_method                     [HTTP::method]
    set http_hdr_host                   [HTTP::host]
    set http_hdr_uagent                 [HTTP::header User-Agent]
    set src_ip                          [IP::remote_addr]
    set http_uri                        [HTTP::uri]
    set http_content_len                [HTTP::header Content-Length]
    set MRHSession_cookie               [HTTP::cookie value MRHSession]
    set auth_info_b64enc                ""

    if { ! [ info exists PROFILE_POLICY_TIMEOUT ] } {
        set PROFILE_POLICY_TIMEOUT      [PROFILE::access access_policy_timeout]
    }
    if { ! [ info exists PROFILE_MAX_SESS_TIMEOUT ] } {
        set PROFILE_MAX_SESS_TIMEOUT    [PROFILE::access max_session_timeout]
    }

    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX method: $http_method"
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Src IP: $src_ip"
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX User-Agent: $http_hdr_uagent"
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX HTTP uri: $http_uri"
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX HTTP len: $http_content_len"

    # First, do we have valid MRHSession cookie.
    if { $MRHSession_cookie != "" } {
        set f_has_cookie 1
        if { [ACCESS::session exists -state_allow -sid $MRHSession_cookie] } {
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX HTTP *VALID* MRHSession cookie: $MRHSession_cookie"
            set f_valid_cookie 1
        } else {
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX HTTP *INVALID* MRHSession cookie: $MRHSession_cookie"
            set MRHSession_cookie ""
            HTTP::cookie remove MRHSession
        }
    }

    set http_hdr_auth [HTTP::header Authorization]
    if { [ string first Basic $http_hdr_auth ] == -1 } {
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Not basic authentication. Ignore received auth header"
        set http_hdr_auth ""
    }

    if { $http_hdr_auth == "" } {
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX No/Empty Auth header"
        if { $f_has_cookie == 1 } {
            # clean up the cookie
            if { $f_valid_cookie == 0 } {
                HTTP::respond 401 content  $static::actsync_401_http_body WWW-Authenticate "Basic realm=\"[HTTP::header Host]\"" Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close
            }
            # Do nothing if we have a valid MRHSession cookie.
        } else {
            HTTP::respond 401 content  $static::actsync_401_http_body WWW-Authenticate "Basic realm=\"[HTTP::header Host]\"" Connection Close
        }
        return
    }

    set apm_username [HTTP::username]
    set apm_password [HTTP::password]
    if { [ info exists f_no_include_uagent ] && $f_no_include_uagent == 1 } {
        binary scan [md5 "$apm_password$src_ip"] H* user_hash
    } else {
        binary scan [md5 "$apm_password$http_hdr_uagent$src_ip"] H* user_hash
    }
    set user_key    "$apm_username.$user_hash"
    unset user_hash

    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX HTTP Hdr Auth: $http_hdr_auth"
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX apm_username: $apm_username"
    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX user_key = $user_key"

    if { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 } {
        # Optimization for EWS client since many of them supported cookie.
        if { $f_has_cookie == 1 && $f_valid_cookie == 1 } {
            return
        }
    }

    set f_release_request           0
    set apm_cookie_list             [ ACCESS::user getsid $user_key ]
    if { [ llength $apm_cookie_list ] != 0 } {
        set apm_cookie [ ACCESS::user getkey [ lindex $apm_cookie_list 0 ] ]
        if { $apm_cookie != "" } {
            HTTP::cookie insert name "MRHSession" value $apm_cookie
            set f_release_request 1
        }
    }


    if { $http_content_len ==  $static::OA_MAGIC_CONTENT_LEN } {
        set f_oa_magic_content_len 1
    }

    set f_sleep_here 0
    set retry 1

    while { $f_release_request == 0 && $retry <=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {

        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Trying #$retry for $http_method $http_uri $http_content_len"

        # This is also going to touch the table entry timer.
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Reading $user_key from table $static::ACCESS_USERKEY_TBLNAME"

        set apm_cookie [table lookup -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key]
        if { $apm_cookie != "" } {
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Verifying table cookie = $apm_cookie"

            # Accessing SessionDB is not that cheap. Here we are trying to check known value.
            if { $apm_cookie == "policy_authfailed" || $apm_cookie == "policy_inprogress"} {
                # Do nothing
            } elseif  { ! [ ACCESS::session exists $apm_cookie ] } {
                log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX table cookie = $apm_cookie is out-of-sync"
                # Table value is out of sync. Ignores it.
                set apm_cookie ""
            }
        }

        switch $apm_cookie {
            "" {
                log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX NO APM Cookie found"

                if { [ info exists f_oa_magic_content_len ] && $f_oa_magic_content_len == 1 } {
                    # Outlook Anywhere request comes in pair. The one with 1G payload is not usable
                    # for creating new session since 1G content-length is intended for client to upload
                    # the data when needed.
                    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for request with magic content-len"
                    set f_sleep_here 1
                } elseif { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 && $http_content_len > $static::FIRST_BIG_POST_CONTENT_LEN } {
                    # Here we are getting large EWS request, which can't be used for starting new session
                    # in clientless-mode. Have it here waiting for next smaller one.
                    # We are holding the request here in HTTP filter, and HTTP filter automatically
                    # clamping down the TCP window when necessary.
                    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Start to wait $static::POLICY_RESULT_POLL_INTERVAL ms for big EWS request"
                    set f_sleep_here 1
                } else {
                    set apm_cookie               "policy_inprogress"
                    set f_reqside_set_sess_id    1
                    set f_release_request        1
                }
            }
            "policy_authfailed" {
                log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Found $user_key with AUTH_FAILED"
                HTTP::respond 401 content  $static::actsync_401_http_body
                set f_release_request 1
            }
            "policy_inprogress" {
                set f_sleep_here 1
            }
            default {
                log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Using MRHSession = $apm_cookie"
                HTTP::header insert Cookie "MRHSession=$apm_cookie"
                set f_release_request 1
            }
        }

        if { $f_reqside_set_sess_id == 1 } {
            set f_reqside_set_sess_id 0
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Setting $user_key=$apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT"
            set f_clientless_mode 1
            HTTP::header insert "clientless-mode" 1
            HTTP::header insert "username" $apm_username
            HTTP::header insert "password" $apm_password
            table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $apm_cookie $PROFILE_POLICY_TIMEOUT $PROFILE_MAX_SESS_TIMEOUT
        }

        if { $f_sleep_here == 1 } {
            set f_sleep_here 0
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Waiting  $static::POLICY_RESULT_POLL_INTERVAL ms for $http_method $http_uri"
            after  $static::POLICY_RESULT_POLL_INTERVAL
        }

        incr retry
    }

    if { $f_release_request == 0 && $retry >=  $static::POLICY_RESULT_POLL_MAXRETRYCYCLE } {
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Policy did not finish in [expr $static::POLICY_RESULT_POLL_MAXRETRYCYCLE * $static::POLICY_RESULT_POLL_INTERVAL] ms. Close connection for $http_method $http_uri"

        table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key
        ACCESS::disable
        TCP::close
        return
    }

    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Releasing request $http_method $http_uri"
}

when ACCESS_SESSION_STARTED {
    if { [ info exists user_key ] } {
        ACCESS::session data set "session.user.uuid" $user_key
        ACCESS::session data set "session.user.microsoft-exchange-client" 1

        if { [ info exists f_activesync ] && $f_activesync == 1 } {
            ACCESS::session data set "session.user.microsoft-activesync" 1
        }
        if { [ info exists f_auto_discover ] && $f_auto_discover == 1 } {
            ACCESS::session data set "session.user.microsoft-autodiscover" 1
        }
        if { [ info exists f_availability_service ] && $f_availability_service == 1 } {
            ACCESS::session data set "session.user.microsoft-availabilityservice" 1
        }
        if { [ info exists f_rpc_over_http ] && $f_rpc_over_http == 1 } {
            ACCESS::session data set "session.user.microsoft-rpcoverhttp" 1
        }
        if { [ info exists f_offline_address_book ] && $f_offline_address_book == 1 } {
            ACCESS::session data set "session.user.microsoft-offlineaddressbook" 1
        }
        if { [ info exists f_exchange_web_service ] && $f_exchange_web_service == 1 } {
            ACCESS::session data set "session.user.microsoft-exchangewebservice" 1
        }
    }
    if { [ info exists f_alt_inactivity_timeout ] && $f_alt_inactivity_timeout == 1 } {
        ACCESS::session data set "session.inactivity_timeout"  $static::POLICY_ALT_INACTIVITY_TIMEOUT
    }
}

when ACCESS_POLICY_COMPLETED {
    if { ! [ info exists user_key ] } {
        return
    }

    set user_key_value ""
    set f_delete_session 0
    set policy_result [ACCESS::policy result]
    set sid [ ACCESS::session sid ]

    log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX ACCESS_POLICY_COMPLETED: policy_result = \"$policy_result\" user_key = \"$user_key\" sid = \"$sid\""

    set inactivity_timeout [ACCESS::session data get "session.inactivity_timeout"]
    set max_sess_timeout [ACCESS::session data get "session.max_session_timeout"]
    if { $max_sess_timeout == "" } {
        set max_sess_timeout $PROFILE_MAX_SESS_TIMEOUT
    }

    switch $policy_result {
        "allow" {
            # We depends on this table record self-cleanup capability in order to
            # indirectly sync with session DB.
            set user_key_value $sid

            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Result: Allow: $user_key => $sid $inactivity_timeout $max_sess_timeout"
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX user_key_value = $user_key_value"
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX sid = $sid"
        }
        "deny" {
            # When necessary the admin here can check appropriate session variable
            # and decide what response more appropriate then this default response.
            ACCESS::respond 401 content  $static::actsync_401_http_body Set-Cookie $static::ACCESS_DEL_COOKIE_HDR_VAL Connection Close
            if {  $static::POLICY_RESULT_CACHE_AUTHFAILED == 1 } {
                set user_key_value  $static::POLICY_AUTHFAILED
            } else {
                set f_delete_session  1
            }
        }
        default {
            ACCESS::respond 503 content  $static::actsync_503_http_body Connection Close
            log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Got unsupported policy result for $user_key ($sid)"
            set f_delete_session  1
        }
    }
    if { $user_key_value != "" } {
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Setting $user_key => $user_key_value $inactivity_timeout $max_sess_timeout in table $static::ACCESS_USERKEY_TBLNAME"

        table set -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key $user_key_value $inactivity_timeout $max_sess_timeout
    } else {
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Deleting $user_key in table $static::ACCESS_USERKEY_TBLNAME"

        table delete -subtable  $static::ACCESS_USERKEY_TBLNAME $user_key
    }

    if { $f_delete_session == 1 } {
        ACCESS::session remove
        set f_delete_session 0
        log -noname accesscontrol.local1.debug "$static::ACCESS_LOG_PREFIX Removing the session for $user_key."
    }
}}}

# STATIC APM POLICIES
# Text-heavy APM configurations are stored here.
# See BZ395989 before touching the sso form-based configs.
array set apm_forms {
    {aaa,active-directory,aaa_pool} {
        [expr { $::apm__allow_anonymous_binding == \
            $CREDENTIALS_REQUIRED_FOR_BINDING_ANSWER \
        ? "admin-name \"$::apm__ad_username\" admin-encrypted-password \
            [iapp_make_safe_password $::apm__ad_password]" \
        : "" }] \
        domain $::apm__login_domain
        [expr { $is_bigip_11_2 \
        ? "domain-controllers [iapp_pool_members -aaa_domain -fields \
            { host fqdn } $::apm__active_dir_servers] \
            pool [iapp_conf create ltm pool ${app}_active_directory_pool \
            [iapp_pool_members -aaa_pool -port any \
            $::apm__active_dir_servers] \
            min-active-members 1 \
            monitor [iapp_substa aaa_monitor($::apm__ad_monitor)]]" \
        : "domain-controller $::apm__active_directory_server" }]
    }
    {sso,form-basedv2,forms_sso} {
        forms replace-all-with {
            owa {
                controls add {
                    password {
                        secure true value "%{session.sso.token.last.password}"
                    }
                }
                controls add {
                    username {
                        secure false value "%{session.sso.token.last.username}"
                    }
                }
                request-value "/owa/auth/logon.aspx"
                submit-javascript clkLgn()
                submit-javascript-type extra
                success-match-type cookie
                success-match-value sessionid
            } 
        } 
    }
    {sso,form-based,forms_sso} {
        form-action /owa/auth/owaauth.dll
        form-field "destination https://${::apm__fqdn}/owa/
flags _SSO_FLAG
forcedownlevel 0
isUtf8 1
trusted 0"
        form-password password
        form-username username
        start-uri /owa/auth/logon.aspx?*&url=_SSO_URL
    }
    {sso,form-based,forms_sso_eac} {
        form-action /owa/auth/owaauth.dll
        form-field "destination https://${::apm__fqdn}/ecp/default.aspx
flags _SSO_FLAG
forcedownlevel 0
isUtf8 1
trusted 0"
        form-password password
        form-username username
        start-uri /owa/auth/logon.aspx?*&url=https%3a%2f%2f${::apm__fqdn}%2fecp%2fdefault.aspx&reason=0
    }
    {sso,ntlmv1,ntlm_sso} { ntlm-domain $::apm__login_domain }

    {sso,kerberos,ntlm_kerberos_sso} {
        account-name $::services__ntlm_user
        account-password $::services__ntlm_passwd
        kdc $::services__ntlm_kdc
        realm [string toupper $::services__ntlm_realm]
        spn-pattern [expr { $do_spn_pattern \
        ? "HTTP/%h@[string toupper $::services__ntlm_realm]" : "none" }]
    }
    {sso,kerberos,ntlm_kerberos_sso_edge} {
        account-name $::edge_deployment__ntlm_user
        account-password $::edge_deployment__ntlm_passwd
        kdc $::edge_deployment__ntlm_kdc
        realm [string toupper $::edge_deployment__ntlm_realm]
        spn-pattern HTTP/%h@[string toupper $::edge_deployment__ntlm_realm]
    }
    {ntlm,ntlm-auth,combined_https} {
        dc-fqdn-list replace-all-with { $ntlm_servers }
        machine-account-name $::services__ntlm_machine_account
    }
    {ntlm,ntlm-auth,oa_https} {
        dc-fqdn-list replace-all-with { $ntlm_servers }
        machine-account-name $::services__ntlm_machine_account
    }
    {ntlm,ntlm-auth,edge} {
        dc-fqdn-list replace-all-with { $ntlm_servers }
        machine-account-name $::edge_deployment__ntlm_machine_account
    }

    {profile,access,access} {
        accept-languages replace-all-with { en }
        access-policy ${prefix}_access
        customization-group ${prefix}_logout
        default-language en
        domain-cookie none
        domain-mode single-domain
        eps-group ${prefix}_eps
        errormap-group ${prefix}_errormap
        framework-installation-group ${prefix}_framework
        general-ui-group ${prefix}_ui
        generation-action increment
        logout-uri-include replace-all-with { _LOGOUT_URI }
        logout-uri-timeout 5
        persistent-cookie false
        secure-cookie true
        _MORE_ACCESS_PROFILE_ITEMS
    }

    {profile,exchange,exchange} {
        auto-discover-sso-config ${prefix}_ntlm_sso
        offline-address-book-sso-config ${prefix}_ntlm_sso
        web-service-sso-config ${prefix}_ntlm_sso
    }

    {profile,exchange,ntlm_exchange} {
        auto-discover-sso-config ${prefix}_ntlm_kerberos_sso[expr \
            { $edge_scenario ? "_edge" : "" }]
        offline-address-book-sso-config ${prefix}_ntlm_kerberos_sso[expr \
            { $edge_scenario ? "_edge" : "" }]
        web-service-sso-config ${prefix}_ntlm_kerberos_sso[expr \
            { $edge_scenario ? "_edge" : "" }]
        ntlm-auth-name [tmsh::pwd]/exch_ntlm_${app}_combined_https
        rpc-over-http-auth-type ntlm
        rpc-over-http-sso-config ${prefix}_ntlm_kerberos_sso[expr \
            { $edge_scenario ? "_edge" : "" }]
    }

    {policy,access-policy,access} {
        default-ending ${prefix}_deny
        items replace-all-with {
            ${prefix}_auth { }
            ${prefix}_logon { }
            ${prefix}_credentials { }
            ${prefix}_allow { }
            ${prefix}_deny { }
            ${prefix}_ent { }
            _MORE_ACCESS_POLICY_ITEMS
        }
        start-item ${prefix}_ent
    }

    {policy,customization-group,logon}     { }
    {policy,customization-group,eps}       { type eps }
    {policy,customization-group,errormap}  { type errormap }
    {policy,customization-group,framework} { type framework-installation }
    {policy,customization-group,ui}        { type general-ui }
    {policy,customization-group,deny}      { type logout }
    {policy,customization-group,logout}    { type logout }

    {policy,agent,aaa-active-directory,auth} {
        server ${prefix}_aaa_pool
        type auth
    }
    {policy,agent,aaa-active-directory,query} {
        query-filter "sAMAccountName=%{session.logon.last.username}"
        server ${prefix}_aaa_pool
        type query
    }
    {policy,agent,logon-page,logon} {
        customization-group ${prefix}_logon
        split-username true
    }
    {policy,agent,variable-assign,credentials} {
        type sso-cred-mapping
        variables {
            {
                expression "mcget {session.logon.last.username}"
                varname session.sso.token.last.username
            }
            {
                expression "mcget {session.logon.last.password}"
                varname session.sso.token.last.password
            }
        }
    }
    {policy,agent,ending-allow,allow} { }
    {policy,agent,ending-deny,deny} {
        customization-group ${prefix}_deny
    }

    {policy,policy-item,auth} {
        agents replace-all-with {
            ${prefix}_auth {
                type aaa-active-directory
            }
        }
        caption "AD Auth"
        color 1
        item-type action
        rules {
            {
                caption Successful
                expression "expr {\[mcget {session.ad.last.authresult}\] == 1}"
                _AUTH_NEXT_ITEM
            }
            {
                caption fallback
                next-item ${prefix}_deny
            }
        }
    }
    {policy,policy-item,query} {
        agents replace-all-with {
            ${prefix}_query {
                type aaa-active-directory
            }
        }
        caption "AD Query"
        color 1
        item-type action
        rules {
            {
                caption "Organization Management"
                expression "expr {\[mcget {session.ad.last.attr.memberOf}\] \
                    contains \\\"CN=Organization Management,OU=Microsoft\
                    Exchange Security Groups,DC=[join \
                    [split $::apm__login_domain .] ,DC=]\\\" }"
                _QUERY_NEXT_ITEM
            }
            {
                caption fallback
                next-item ${prefix}_deny
            }
        }
    }
    {policy,policy-item,msft_exch} {
        caption "Client for MS Exchange"
        color 1
        item-type action
        rules {
            {
                caption "Client for MS Exchange"
                expression "expr {\[mcget \
                    {session.user.microsoft-exchange-client}\] == 1}"
                next-item ${prefix}_auth_check
            }
            {
                caption fallback
                next-item ${prefix}_logon_1
            }
        }
    }
    {policy,policy-item,empty} {
        caption "URI Check"
        color 1
        item-type action
        rules {
            {
                caption "EAC URI"
                expression "expr {\[mcget {session.server.landinguri}\] == \\\"/ecp/default.aspx\\\" }"
                next-item ${prefix}_query
            }
            {
                caption fallback
                _EMPTY_NEXT_ITEM
            }
        }
    }
    {policy,policy-item,logon} {
        agents replace-all-with {
            ${prefix}_logon {
                type logon-page
            }
        }
        caption "Logon Page"
        color 1
        item-type action
        rules {
            {
                caption fallback
                _LOGON_NEXT_ITEM
            }
        }
    }
    {policy,policy-item,auth_check} {
        caption "NTLM Auth Result Check"
        color 1
        item-type action
        rules {
            {
                caption Successful
                expression "expr {\[mcget {session.ntlm.last.result}\] == 1}"
                next-item ${prefix}_credentials
            }
            {
                caption fallback
                next-item ${prefix}_logon
            }
        }
    }
    {policy,policy-item,credentials} {
        agents replace-all-with {
            ${prefix}_credentials {
                type variable-assign
            }
        }
        caption "SSO Credential Mapping"
        color 1
        item-type action
        rules {
            {
                caption fallback
                next-item ${prefix}_allow
            }
        }
    }
    {policy,policy-item,allow} {
        agents replace-all-with {
            ${prefix}_allow {
                type ending-allow
            }
        }
        caption Allow
        color 1
        item-type ending
    }
    {policy,policy-item,deny} {
        agents replace-all-with {
            ${prefix}_deny {
                type ending-deny
            }
        }
        caption Deny
        color 2
        item-type ending
    }
    {policy,policy-item,ent} {
        caption Start
        color 1
        rules {
            {
                caption fallback
                _ENT_NEXT_ITEM
            }
        }
    }
}

##############
#    MAIN    #
##############

set app $tmsh::app_name
set prefix [tmsh::pwd]/exchange

# DEPLOYMENT SCENARIOS
set lb_scenario \
    [iapp_is ::deployment_scenario__scenario $ALL_ON_LTM_SCENARIO]
set edge_scenario \
    [iapp_is ::deployment_scenario__scenario $EDGE_DEPLOYMENT_SCENARIO]

set ltm_provisioned [iapp_get_provisioned ltm]
set apm_provisioned [iapp_get_provisioned apm]
set avr_provisioned [iapp_get_provisioned avr]

if { !$ltm_provisioned } {
    tmsh::log err "The template failed because LTM is required."
    error         "The template failed because LTM is required."
}
if { $edge_scenario && !$apm_provisioned } {
    tmsh::log err \
          "The template failed because APM is required for this scenario."
    error "The template failed because APM is required for this scenario."
}

set is_bigip_11_2 [iapp_tmos_version >= 11.2.0]
set is_bigip_11_3 [iapp_tmos_version >= 11.3.0]
set is_bigip_11_4 [iapp_tmos_version >= 11.4.0]

set is_exchange_2010 [iapp_is ::deployment_scenario__version $EXCHANGE_2010_ANSWER]
set do_combined_vs [expr { \
    [iapp_is ::deployment_scenario__scenario $LTM_BEHIND_EDGE] || \
    ( [iapp_is ::deployment_scenario__scenario $ALL_ON_LTM_SCENARIO] && \
      [iapp_is ::deployment__combined_or_seperate_ips $SINGLE_IP_ANSWER] ) }]

# Support for RPC was discontinued in Exchange 2013.
if { $is_exchange_2010 } {
    set allowed_services { owa oa as ad rpc pop3 imap4 }
} else {
    set allowed_services { owa oa as ad pop3 imap4 }
    set do_rpc 0
}

# Build a list of services to be deployed by this app.
foreach svc $allowed_services {
    set [set svc]_pool_name none
    append service_list [expr { \
        [set do_${svc} [iapp_is ::services__deploying_$svc $YES_ANSWER]] \
        ? "$svc " : "" }]
}
# EWS is a special case of OA.
if { [set do_ews [iapp_is ::services__deploying_oa "ews"]] } {
    append service_list "ews "
}
# Deploying RPC forces the deployment of associated objects.
if { $do_rpc } {
    if { [iapp_is ::services__dynamic_static_ports $STATIC_ANSWER] } {
        append service_list "rpc_mapi rpc_address_book "
    } else {
        append service_list "rpc_wildcard "
    }
}
if { $edge_scenario } {
    set service_list edge
}

# APM (ACCESS POLICY)

# APM is deployed according to the following complicated guidelines.
#
#   Exchange 2010 + EAC is not allowed.
#   Exchange 2010 + No NLTM Auth => Standard APM
#   Exchange 2010 + NTLM Auth + separate virtuals =>
#       Add NTLM policy and NTLM system irule to OA virtual
#   Exchange 2010 + NTLM Auth + combined virtual =>
#       Add NTLM policy and NTLM system irule to combined virtual
#   Exchange 2013 + No EAC Restrict => Same as Exchange 2010
#   Exchange 2013 + EAC Restrict + No NTLM Auth + separate virtuals =>
#       Add EAC policy and EAC custom irule to OWA virtual
#   Exchange 2013 + EAC Restrict + No NTLM Auth + combined virtual =>
#       Add EAC policy and EAC custom irule to combined virtual
#   Exchange 2013 + EAC Restrict + NLTM Auth + separate virtuals =>
#       Add EAC policy and EAC custom irule to OWA virtual
#       Add NTLM policy and NTLM system irule to OA virtual
#   Exchange 2013 + EAC Restrict + NLTM Auth + combined virtual =>
#       Add EAC policy and EAC custom irule to combined virtual
#       Add SPECIAL COMBINED NTLM policy to combined virtual
#       Add NTLM system irule to combined virtual
#
# Edge scenario is treated like the combined virutal server case.

# Unlike most of the arrays in this template, this one is dynamically keyed.
# Any variable can be used to execute modifications to the APM configuration.
# In many cases, the [string map] is used to alter copies of an existing
# object in the APM configuration array, avoiding code duplication.
# The tactic is to start with the most common set of policies, and then
# tweak them according to various combinations of sys version, EAC, NTLM, etc.
#
# array keys: generalized name,value
array set apm_mods {
    is_bigip_11_2,0 {
        [set prefix /Common/$app]
        [unset -nocomplain apm_forms(sso,form-basedv2,forms_sso)]
    }
    is_bigip_11_2,1 {
        [unset -nocomplain apm_forms(sso,form-based,forms_sso)]
        [unset -nocomplain apm_forms(sso,form-based,forms_sso_eac)]
    }
    is_bigip_11_4,0 {
        [unset -nocomplain apm_forms(profile,exchange,exchange)]
        [unset -nocomplain apm_forms(profile,exchange,ntlm_exchange)]
    }
    is_fqdn_null,1 {
        [unset -nocomplain apm_forms(sso,form-based,forms_sso)]
        [unset -nocomplain apm_forms(sso,form-based,forms_sso_eac)]
    }
    is_exchange_2010,1 {
        [unset -nocomplain apm_forms(sso,form-based,forms_sso_eac)]
    }
    edge_scenario,0 {
        [unset -nocomplain apm_forms(sso,kerberos,ntlm_kerberos_sso_edge)]
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,edge)]
    }
    edge_scenario,1 {
        [unset -nocomplain apm_forms(sso,kerberos,ntlm_kerberos_sso)]
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,combined_https)]
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,oa_https)]
    }
    do_combined_vs,0 {
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,combined_https)]
    }
    do_combined_vs,1 {
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,oa_https)]
    }
    do_eac_apm,0 {
        [unset -nocomplain apm_forms(policy,agent,aaa-active-directory,query)]
        [unset -nocomplain apm_forms(policy,policy-item,query)]
        [unset -nocomplain apm_forms(policy,policy-item,empty)]
    }
    do_eac_apm,1 {
        [set apm_forms(policy,agent,variable-assign,credentials_1) \
            $apm_forms(policy,agent,variable-assign,credentials)]
        [set apm_forms(policy,policy-item,credentials_1) [string map \
        {credentials credentials_1} $apm_forms(policy,policy-item,credentials)]]
    }
    do_ntlm_auth,0  {
        [unset -nocomplain apm_forms(profile,exchange,ntlm_exchange)]
        [unset -nocomplain apm_forms(sso,kerberos,ntlm_kerberos_sso)]
        [unset -nocomplain apm_forms(sso,kerberos,ntlm_kerberos_sso_edge)]
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,combined_https)]
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,oa_https)]
        [unset -nocomplain apm_forms(ntlm,ntlm-auth,edge)]
        [unset -nocomplain apm_forms(policy,policy-item,msft_exch)]
        [unset -nocomplain apm_forms(policy,policy-item,auth_check)]
    }
    do_ntlm_auth,1 {
        [unset -nocomplain apm_forms(profile,exchange,exchange)]
        [set apm_forms(policy,agent,aaa-active-directory,auth_1) \
            $apm_forms(policy,agent,aaa-active-directory,auth)]
        [set apm_forms(policy,policy-item,auth_1) [string map \
        { _auth _auth_1 _AUTH _AUTH_1 } $apm_forms(policy,policy-item,auth)]]
        [set apm_forms(policy,customization-group,logon_1) \
            $apm_forms(policy,customization-group,logon)]
        [set apm_forms(policy,agent,logon-page,logon_1) [string map \
        { _logon _logon_1 } $apm_forms(policy,agent,logon-page,logon)]]
        [set apm_forms(policy,policy-item,logon_1) [string map \
        { _logon _logon_1 _LOGON _LOGON_1 } $apm_forms(policy,policy-item,logon)]]
        [set apm_forms(policy,agent,variable-assign,credentials_2) \
            $apm_forms(policy,agent,variable-assign,credentials)]
        [set apm_forms(policy,policy-item,credentials_2) [string map \
        {credentials credentials_2} $apm_forms(policy,policy-item,credentials)]]
        [set apm_forms(policy,agent,variable-assign,credentials_3) \
            $apm_forms(policy,agent,variable-assign,credentials)]
        [set apm_forms(policy,policy-item,credentials_3) [string map \
        {credentials credentials_3} $apm_forms(policy,policy-item,credentials)]]
    }
    * { [set noop 0] }
}

# Changes in syntax between 2010 and 2013 are handled here.
# array key $is_exchange_2010. See BZ404029,  BZ401151.
array set ms_version_tags {
    0  {  _SSO_URL "https%3a%2f%2f${::apm__fqdn}%2fowa%2fdefault.aspx&reason=0"
          _SSO_FLAG 4
          _LOGOUT_URI { /owa/logoff.owa /ecp/logoff.aspx }
       }
    1  {  _SSO_URL "https://${::apm__fqdn}/owa/&reason=0"
          _SSO_FLAG 0
          _LOGOUT_URI { /owa/auth/logoff.aspx }
       }
}

# Profile alterations for EAC, NTLM, and EAC+NTLM are handled here.
# array keys $is_bigip_11_4,$do_eac_apm,$do_ntlm_auth
array set apm_profile_tags {
    0,0,0 { _MORE_ACCESS_PROFILE_ITEMS
            { sso-name ${prefix}_ntlm_sso }}
    0,0,1 { _MORE_ACCESS_PROFILE_ITEMS
            { sso-name ${prefix}_ntlm_kerberos_sso[expr \
                  { $edge_scenario ? "_edge" : "" }] }}
    0,1,0 { _MORE_ACCESS_PROFILE_ITEMS
            { httponly-cookie false
              inactivity-timeout 900
              sso-name ${prefix}_ntlm_sso }}
    0,1,1 { _MORE_ACCESS_PROFILE_ITEMS
            { sso-name ${prefix}_ntlm_kerberos_sso[expr \
                  { $edge_scenario ? "_edge" : "" }] }}
    1,0,0 { _MORE_ACCESS_PROFILE_ITEMS  
            { httponly-cookie false
              inactivity-timeout 900
              exchange-profile ${prefix}_exchange
              sso-name none }}
    1,1,0 { _MORE_ACCESS_PROFILE_ITEMS  
            { httponly-cookie false
              inactivity-timeout 900
              exchange-profile ${prefix}_exchange
              sso-name none }}
    *     { _MORE_ACCESS_PROFILE_ITEMS  
            { httponly-cookie false
              inactivity-timeout 900
              exchange-profile ${prefix}_ntlm_exchange
              sso-name none }}
}

# Policy alterations for EAC, NTLM, and EAC+NTLM are handled here.
# array keys $do_eac_apm,$do_ntlm_auth
array set apm_policy_tags {
    0,0 { _MORE_ACCESS_POLICY_ITEMS {}
          _AUTH_NEXT_ITEM  { next-item ${prefix}_credentials }
          _LOGON_NEXT_ITEM { next-item ${prefix}_auth }
          _ENT_NEXT_ITEM   { next-item ${prefix}_logon }
        }
    0,1 { _MORE_ACCESS_POLICY_ITEMS {
              ${prefix}_auth_1 { }
              ${prefix}_msft_exch { }
              ${prefix}_logon_1 { }
              ${prefix}_auth_check { }
              ${prefix}_credentials_2 { }
              ${prefix}_credentials_3 { }
          }
          _AUTH_NEXT_ITEM    { next-item ${prefix}_credentials_2 }
          _AUTH_1_NEXT_ITEM  { next-item ${prefix}_credentials_3 }
          _LOGON_NEXT_ITEM   { next-item ${prefix}_auth }
          _LOGON_1_NEXT_ITEM { next-item ${prefix}_auth_1 }
          _ENT_NEXT_ITEM     { next-item ${prefix}_msft_exch }
        }
    1,0 { _MORE_ACCESS_POLICY_ITEMS {
              ${prefix}_query { }
              ${prefix}_empty { }
              ${prefix}_credentials_1 { }
          }
          _AUTH_NEXT_ITEM  { next-item ${prefix}_empty }
          _QUERY_NEXT_ITEM { next-item ${prefix}_credentials_1 }
          _EMPTY_NEXT_ITEM { next-item ${prefix}_credentials }
          _LOGON_NEXT_ITEM { next-item ${prefix}_auth }
          _ENT_NEXT_ITEM   { next-item ${prefix}_logon }
        }
    1,1 { _MORE_ACCESS_POLICY_ITEMS {
              ${prefix}_auth_1 { }
              ${prefix}_query { }
              ${prefix}_msft_exch { }
              ${prefix}_empty { }
              ${prefix}_logon_1 { }
              ${prefix}_auth_check { }
              ${prefix}_credentials_1 { }
              ${prefix}_credentials_2 { }
              ${prefix}_credentials_3 { }
          }
          _AUTH_NEXT_ITEM    { next-item ${prefix}_credentials_1 }
          _AUTH_1_NEXT_ITEM  { next-item ${prefix}_empty }
          _QUERY_NEXT_ITEM   { next-item ${prefix}_credentials_2 }
          _EMPTY_NEXT_ITEM   { next-item ${prefix}_credentials_3 }
          _LOGON_NEXT_ITEM   { next-item ${prefix}_auth }
          _LOGON_1_NEXT_ITEM { next-item ${prefix}_auth_1 }
          _ENT_NEXT_ITEM     { next-item ${prefix}_msft_exch }
        }
}

# array keys: $::apm__ad_monitor
array set aaa_monitor {
    ad_create { [iapp_conf create ltm monitor ldap ${app}_ldap \
                base \"$::apm__ad_monitor_tree\" \
                chase-referrals yes \
                debug no \
                defaults-from ldap \
                mandatory-attributes no \
                destination *:[expr { $::apm__ad_monitor_secure eq "ssl" \
                    ? "636" : "389" }] \
                filter cn=\"$::apm__ad_monitor_user\" \
                password $::apm__ad_monitor_password \
                security $::apm__ad_monitor_secure \
                time-until-up 0 \
                interval $::apm__ad_monitor_interval \
                timeout [expr {$::apm__ad_monitor_interval * 3 + 1}] \
                username \"$::apm__ad_monitor_user\"] }
    ad_select { $::apm__ad_monitor_choice }
    ad_icmp   { [iapp_conf create ltm monitor gateway-icmp ${app}_icmp \
                defaults-from gateway_icmp \
                interval 5 \
                timeout 16] }
}

set do_apm [expr { $apm_provisioned && ( $edge_scenario || \
        ( $lb_scenario && [iapp_is ::apm__deploying_apm $YES_ANSWER] )) }]
set do_eac_apm     [expr { $do_apm && !$is_exchange_2010 && \
    (($lb_scenario && $do_owa && [iapp_is ::services__restrict_eac_apm $YES_ANSWER]) || \
    ( $edge_scenario && [iapp_is ::edge_deployment__restrict_eac_apm $YES_ANSWER]))}]
set do_eac_source  [expr { $do_apm && !$is_exchange_2010 && \
  (($lb_scenario && $do_owa && [iapp_is ::services__restrict_eac_source $YES_ANSWER]) || \
  ( $edge_scenario && [iapp_is ::edge_deployment__restrict_eac_source $YES_ANSWER]))}]
set do_spn_pattern [iapp_is ::services__ntlm_spn_pattern $HOST_HEADER_ANSWER]
set is_fqdn_null   [iapp_is ::apm__fqdn ""]
set do_ntlm_auth   [expr { $do_apm && $is_bigip_11_3 && \
    (( !$edge_scenario && [iapp_is ::services__oa_ntlm_auth $YES_ANSWER] ) ||
    ( $edge_scenario && [iapp_is ::edge_deployment__oa_ntlm_auth $YES_ANSWER] )) }]
if { $do_ntlm_auth } {
    # re-use the active directory fqdn values for ntlm
    foreach item $::apm__active_dir_servers {
        array set server [lindex $item 0]
        append ntlm_servers "$server(fqdn) "
    }
}

if { $do_apm } {
    # Make APM adjustments by reading instructions from the apm_mods array.
    set apm_history(*) 1
    foreach var [array names apm_mods] {
        # Truncate the variable value from the array key.
        set var [lindex [split $var ,] 0]
        if { ![info exists apm_history($var)] } {
            # Execute the apm_mods array code according to the variable value.
            iapp_substa apm_mods($var,[set [set var]])
        }
        # Store the variable name to avoid duplicate apm policy attempts.
        set apm_history($var) 1
    }

    # Create APM policies and other APM-related objects.
    foreach key [lsort [array names apm_forms]] {

        # Reassemble the array key into APM keywords and an APM object name.
        set component   [lrange [split $key ,] 0 end-1]
        set object_name "${prefix}_[subst [lindex [split $key ,] end]]"

        # Apply substitutions to each policy based on EAC and NTLM choices.
        # Apply further substitutions to differentiate Exchange 2010 from 2013.
        set policy_def  [subst [string map \
            "[iapp_substa apm_profile_tags($is_bigip_11_4,$do_eac_apm,$do_ntlm_auth)]
            $apm_policy_tags($do_eac_apm,$do_ntlm_auth)" \
            [string map $ms_version_tags($is_exchange_2010) $apm_forms($key)]]]

        # Ntlm-auth requires a specially-named prefix to match a system irule.
        if { $key == "ntlm,ntlm-auth,combined_https" ||
             $key == "ntlm,ntlm-auth,oa_https" ||
             $key == "ntlm,ntlm-auth,edge" } {
            regsub ".app/exchange" $object_name \
                   ".app/exch_ntlm_${app}" object_name
        }

        iapp_conf create apm $component $object_name \{ $policy_def \}
    }

    # WebSSO and RBA are always associated with APM.
    set apm_profile_names "${prefix}_access /Common/websso /Common/rba"
} else {
    set apm_profile_names ""
}

# AVR (ANALYTICS)
# array keys: $do_analytics,$new_analytics
array set analytics_arr {
    1,1 { [iapp_conf create ltm profile analytics ${app}_analytics_profile \
        defaults-from analytics] }
    1,0 $::analytics__analytics_profile
    *   { }
}
set do_analytics  [expr { $avr_provisioned && \
    [iapp_is ::analytics__add_analytics $YES_ANSWER] }]
set new_analytics \
    [iapp_is ::analytics__create-new_analytics $USE_DEFAULT_PROFILE_ANSWER]
set analytics_profile_name \
    [iapp_substa analytics_arr($do_analytics,$new_analytics)]

# SSL (ENCRYPTION)
# array keys $do_client_ssl,$new_client_ssl,$edge_scenario
array set client_ssl_arr {
    1,1,0  { [iapp_conf create ltm profile client-ssl ${app}_clientssl \
             defaults-from clientssl \
             key $::deployment__key \
             cert $::deployment__cert] \
             \{ context clientside \} }
    1,1,1  { [iapp_conf create ltm profile client-ssl ${app}_clientssl \
             defaults-from clientssl \
             key $::edge_deployment__key \
             cert $::edge_deployment__cert] \
             \{ context clientside \} }
    1,0,0  { $::deployment__client_ssl_profile \{ context clientside \} }
    1,0,1  { $::edge_deployment__client_ssl_profile \{ context clientside \} }
    *      { }
}

# array keys $do_server_ssl,$new_server_ssl,$insecure_compatible
array set server_ssl_arr {
    1,1,0  { [iapp_conf create ltm profile server-ssl ${app}_serverssl \
             defaults-from serverssl] \
             \{ context serverside \} }
    1,1,1  { [iapp_conf create ltm profile server-ssl ${app}_serverssl \
             defaults-from serverssl-insecure-compatible] \
             \{ context serverside \} }
    1,0,0  { [expr { $edge_scenario ? "$::edge_deployment__server_ssl_profile" \
             : "$::deployment__server_ssl_profile" }] \{ context serverside \} }
    1,0,1  { $::edge_deployment__server_ssl_profile \{ context serverside \} }
    *      { }
}

# When RPC is the only service, SSL is not allowed.
# Beyond that, there are several variables that indicate the user's
# intentions with respect to SSL. Typical with APL, in order to create
# custom default values based on user input, multiple variables must
# be tracked: if the deployment_scenario is Edge, then the ssl config
# is found in $edge_deployment__reencrypt. If not, then it is found in
# $deployment__reencrypt, and so forth.

# array keys are $edge_scenario,$is_rpc_only,$do_apm
array set client_ssl_decision {
    0,0,0 {[iapp_is ::deployment__incoming_encrypted $ENCRYPTED_ANSWER]}
    0,1,0 {0}
    0,1,1 {0}
    *     {1}
}

# array keys are $edge_scenario,$is_rpc_only,$do_client_ssl,$is_exchange_2010
array set server_ssl_decision {
    0,0,0,0 {[iapp_is ::deployment__encrypt $ENCRYPT_SSL_BRIDGING_ANSWER]}
    0,0,0,1 {[iapp_is ::deployment__encrypt $ENCRYPT_SSL_BRIDGING_ANSWER]}
    0,0,1,0 {[iapp_is ::deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    0,0,1,1 {[iapp_is ::deployment__reencrypt_2010 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,0,0,0 {[iapp_is ::edge_deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,0,0,1 {[iapp_is ::edge_deployment__reencrypt_2010 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,0,1,0 {[iapp_is ::edge_deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,0,1,1 {[iapp_is ::edge_deployment__reencrypt_2010 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,1,0,0 {[iapp_is ::edge_deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,1,0,1 {[iapp_is ::edge_deployment__reencrypt_2010 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,1,1,0 {[iapp_is ::edge_deployment__reencrypt_2013 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    1,1,1,1 {[iapp_is ::edge_deployment__reencrypt_2010 $REENCRYPT_SSL_BRIDGING_ANSWER]}
    *       {0}
}

set is_rpc_only [expr { $service_list eq "rpc rpc_mapi rpc_address_book" || \
                        $service_list eq "rpc rpc_wildcard" }]

set do_client_ssl [iapp_substa client_ssl_decision($edge_scenario,$is_rpc_only,$do_apm)]
set do_server_ssl [iapp_substa server_ssl_decision($edge_scenario,$is_rpc_only,$do_client_ssl,$is_exchange_2010)]
set new_client_ssl [expr { (!$edge_scenario && \
    [iapp_is ::deployment__client_ssl_profile "/#create_new#"]) ||
    ($edge_scenario && [iapp_is ::edge_deployment__client_ssl_profile "/#create_new#"])}] 
set new_server_ssl [expr { (!$edge_scenario && \
    [iapp_is ::deployment__server_ssl_profile "/#create_new#"]) ||
    ($edge_scenario && [iapp_is ::edge_deployment__server_ssl_profile "/#create_new#"])}] 

set insecure_compatible [expr { $edge_scenario && \
    [iapp_is ::edge_deployment__insecure_compatible \
    $SELF_SIGNED_OR_DEFAULT_CERT_AND_KEY_ANSWER] }]
set ssl_profile_names { [iapp_substa client_ssl_arr($do_client_ssl,$new_client_ssl,$edge_scenario)] \
       [iapp_substa server_ssl_arr($do_server_ssl,$new_server_ssl,$insecure_compatible)] }

# This suffix is built as a workaround for BZ407596 that requires unique irule
# and pool names during app config changes.
set bz [expr { $do_combined_vs + (2 * $do_client_ssl) + \
          (4 * $do_server_ssl) + (8 *$edge_scenario) }]

# TCP OPTIMIZATION
# array keys $lan_or_wan
array set tcp_arr {
    LAN   { [iapp_conf create ltm profile tcp \
            ${app}_lan-optimized_tcp_profile \
            defaults-from tcp-lan-optimized] \
            \{ context all \} }
    WAN   { [iapp_conf create ltm profile tcp \
            ${app}_lan-optimized_tcp_profile \
            defaults-from tcp-lan-optimized] \
            \{ context serverside \} \
            [iapp_conf create ltm profile tcp \
            ${app}_wan-optimized_tcp_profile \
            defaults-from tcp-wan-optimized] \
            \{ context clientside \} }
}

# array keys $lan_or_wan,$do_rpc
array set rpc_tcp_arr {
    LAN,1 { [iapp_conf create ltm profile tcp \
            ${app}_rpc_lan-optimized_tcp_profile \
            idle-timeout 7200 \
            defaults-from tcp-lan-optimized] \
            \{ context all \} }
    WAN,1 { [iapp_conf create ltm profile tcp \
            ${app}_rpc_lan-optimized_tcp_profile \
            idle-timeout 7200 \
            defaults-from tcp-lan-optimized] \
            \{ context serverside \} \
            [iapp_conf create ltm profile tcp \
            ${app}_rpc_wan-optimized_tcp_profile \
            idle-timeout 7200 \
            defaults-from tcp-wan-optimized] \
            \{ context clientside \} }
    *       { }
}

set lan_or_wan $LAN_OPTION
set lan_or_wan [expr { $lb_scenario ? $::deployment__lan_or_wan : $lan_or_wan }]
set lan_or_wan [expr { $edge_scenario ? $::edge_deployment__lan_or_wan : \
                                                                  $lan_or_wan }]
# SNAT (ADDRESS TRANSLATION)
# array keys: $do_snat,$need_snatpool
# The string map effectively extracts the address values from the APL table
# by purging the column header "addr" and all of the braces.
array set snat_arr {
    1,1 { snatpool [iapp_conf create ltm snatpool ${app}_snatpool members \
          replace-all-with \{ [string map { addr {} \{ {} \} {} } \
          $::deployment__snatpool_members] \} ] }
    1,0 { snat automap }
    *   { snat none }
}

set do_snat [expr { $edge_scenario \
    || [iapp_is ::deployment__location $SAME_SUBNET_ANSWER] \
    || [iapp_is ::deployment__snat $NOT_DEFAULT_GATEWAY_ANSWER] }]
set need_snatpool [expr { !$edge_scenario \
    && [iapp_is ::deployment__automap_or_pool $NEED_SNATPOOL_ANSWER] }]
set snat [iapp_substa snat_arr($do_snat,$need_snatpool)]

# HTTP
# array keys $do_client_ssl,$do_snat
array set http_profile_arr {
    1,1   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite all \
            insert-xforwarded-for enabled \
            defaults-from http] }
    1,0   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite all \
            insert-xforwarded-for disabled \
            defaults-from http] }
    0,1   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite none \
            insert-xforwarded-for enabled \
            defaults-from http] }
    0,0   { [iapp_conf create ltm profile http ${app}_http_profile \
            redirect-rewrite none \
            insert-xforwarded-for disabled \
            defaults-from http] }
}

# array key $lan_or_wan,$do_cache_and_comp
array set cache_comp_profile_arr {
    WAN,1 { [iapp_conf create ltm profile http-compression \
            ${app}_wan-optimized-compression_profile \
            content-type-include replace-all-with \{ $content_types \} \
            defaults-from wan-optimized-compression] \
            [iapp_conf create ltm profile web-acceleration \
            ${app}_caching_profile \
            applications none \
            cache-uri-exclude replace-all-with \{ /owa/ev.owa oab.xml \} \
            defaults-from optimized-caching] }
    LAN,1 { [iapp_conf create ltm profile web-acceleration \
            ${app}_caching_profile \
            applications none \
            cache-uri-exclude replace-all-with \{ uglobal.js /owa/ev.owa oab.xml \} \
            defaults-from optimized-caching] }
    *     { }
}

set do_cache_and_comp [expr { $lb_scenario || $edge_scenario }]
set content_types "\
    text/css text/html text/javascript text/json text/postscript text/plain\
        text/richtext text/rtf text/vnd.wap.wml text/vnd.wap.wmlscript\
        text/x-vcalendar text/wap text/wml text/x-component text/x-vcard\
        text/xml\
    image/photoshop image/psd image/x-photoshop image/x-vsd\
    application/msaccess\
        application/vnd.msaccess application/vnd.ms-access application/mdb\
        application/x-mdb\
    application/css\
        application/css-stylesheet\
    application/excel\
        application/msexcel application/ms-excel application/vnd.excel\
        application/vnd.msexcel application/vnd.ms-excel application/x-excel\
        application/x-msexcel application/x-ms-excel application/x-xls\
        application/xls\
    application/javascript\
        application/x-javascript application/x-java-jnlp-file\
    application/json\
        application/x-json\
    application/lotus123\
        application/x-lotus123\
    application/x-mscardfile\
    application/x-msclip\
    application/powerpoint\
        application/mspowerpoint application/ms-powerpoint application/mpp\
        application/vnd.ms-pps application/vnd.ms-powerpoint\
        application/vnd.mspowerpoint application/vnd.powerpoint\
        application/x-powerpoint application/x-mspowerpoint\
    application/photoshop\
        application/x-photoshop\
    application/msproject\
        application/vnd.ms-project application/x-msproject\
        application/x-ms-project\
    application/postscript\
        application/ps application/psd application/x-postscript\
        application/x-ps\
    application/quarkexpress\
        application/x-quark-express\
    application/rtf\
        application/x-rtf\
    application/txt\
    application/word\
        application/doc application/msword application/ms-word\
        application/winword application/vnd.ms-word application/x-word\
        application/x-msword application/vnd.msword application/vnd.word\
    application/vnd.ms-works\
        application/vnd.ms-works-db application/x-wks application/x-msworks-db\
        application/x-msworks-wps application/wks\
    application/visio\
        application/vnd.visio application/vsd application/x-visio\
        application/x-vsd\
    application/x-vermeer-rpc\
    application/vnd.wap.wmlc\
        application/vnd.wap.cmlscriptc application/vnd.wap.xhtml+xml\
    application/xml\
        application/x-xml application/xhtml+xml"

if { $do_owa || $do_oa || $do_ews || $do_as || $do_ad || $edge_scenario } {
    set http_profile_names "[iapp_substa http_profile_arr($do_client_ssl,$do_snat)] \
        [iapp_substa cache_comp_profile_arr($lan_or_wan,$do_cache_and_comp)] \
        [iapp_conf create ltm profile one-connect ${app}_oneconnect \
        defaults-from oneconnect \
        source-mask 255.255.255.255] \
        /Common/ntlm"
}
if { $do_ntlm_auth } {
    append http_profile_names " eca"
}

# MONITORS
# Minimum number of monitors "up" to declare a service "up" differs per service.
# array keys $svc,$advanced_monitors,$is_exchange_2010
array set min_up_arr {
    ews,1,0  2
    as,1,0   2
    ad,1,0   2
    *        1
}

# String map is used heavily here to customize the monitor parameters.
# array key: $advanced_monitors,$do_second_mailbox
array set monitor_arr {
    1,0 { [iapp_conf create [string map "\
          _HTTP_OR_HTTPS $http_or_https \
          _POP3_OR_TCP   $pop3_or_tcp \
          _IMAP_OR_TCP   $imap_or_tcp \
          _MONITOR       adv_monitor \
          _EMAIL         [expr { $do_oa || $do_ews || $do_ad ? $::monitors__email : "n/a" }] \
          _DOMAIN        $::monitors__account_domain \
          _USER          $::monitors__username \
          _PASSWORD      [iapp_make_safe_password $::monitors__passwd]" \
          [iapp_substa monitor_subarr($svc,1)]]] }
    1,1 { [iapp_conf create [string map "\
          _HTTP_OR_HTTPS $http_or_https \
          _POP3_OR_TCP   $pop3_or_tcp \
          _IMAP_OR_TCP   $imap_or_tcp \
          _MONITOR       ${::monitors__username}_adv_monitor \
          _EMAIL         [expr { $do_oa || $do_ews || $do_ad ? $::monitors__email : "n/a" }] \
          _DOMAIN        $::monitors__account_domain \
          _USER          $::monitors__username \
          _PASSWORD      [iapp_make_safe_password $::monitors__passwd]" \
          [iapp_substa monitor_subarr($svc,1)]]] \
          [iapp_conf create [string map "\
          _HTTP_OR_HTTPS $http_or_https \
          _POP3_OR_TCP   $pop3_or_tcp \
          _IMAP_OR_TCP   $imap_or_tcp \
          _MONITOR       ${::monitors__second_username}_adv_monitor \
          _EMAIL         [expr { $do_oa || $do_ews || $do_ad ? $::monitors__second_email : "n/a" }] \
          _DOMAIN        $::monitors__second_account_domain \
          _USER          $::monitors__second_username \
          _PASSWORD      [iapp_make_safe_password $::monitors__second_passwd]" \
          [iapp_substa monitor_subarr($svc,1)]]] }
    *   { [iapp_conf create [string map "\
          _HTTP_OR_HTTPS $http_or_https \
          _POP3_OR_TCP   $pop3_or_tcp \
          _IMAP_OR_TCP   $imap_or_tcp" \
          [iapp_substa monitor_subarr($svc,0)]]] }
}

# Advanced and simple monitor configs are all stored here.
# array key: $svc,$advanced_monitors
array set monitor_subarr {
    owa,1 { ltm monitor _HTTP_OR_HTTPS \
          ${app}_owa__HTTP_OR_HTTPS__MONITOR \
          defaults-from _HTTP_OR_HTTPS \
        [expr {[iapp_is ::monitors__owa_auth_method $DEFAULT_FORMS_BASED_ANSWER] \
        ? "send \"GET /owa/auth/logon.aspx?url=https://[iapp_substa \
            fqdn(owa,$do_single_domain)]/owa/&reason=0 \
            HTTP/1.1\\r\\nUser-Agent: Mozilla/4.0\\r\\nHost: \
            [iapp_substa fqdn(owa,$do_single_domain)]\\r\\n\" \
          username _DOMAIN\\\\_USER" \
        : "send \"GET /owa/ HTTP/1.1\\r\\nUser-Agent: Mozilla/4.0\\r\\nHost: \
          [iapp_substa fqdn(owa,$do_single_domain)]\\r\\n\" \
          username _USER" }] \
        [expr {[iapp_is ::monitors__owa_auth_method $DEFAULT_FORMS_BASED_ANSWER] \
          && $is_exchange_2010 \
        ? "recv \"OutlookSession=\"" \
        : "recv \"200 OK\"" }] \
          password _PASSWORD \
          destination *:* \
          $interval_timeout }
    oa,1  { ltm monitor external \
          ${app}_oa__USER_eav_monitor \
          run [iapp_conf create sys file external-monitor oa_eav \
              source-path file:[create_eav_script ews_monitor_eav_script]] \
          user-defined DOMAIN _DOMAIN \
          user-defined EMAIL _EMAIL \
          user-defined USER _USER \
          user-defined PASSWORD _PASSWORD \
          $interval_timeout }
    ews,1 { ltm monitor external \
          ${app}_ews__USER_eav_monitor \
          run [iapp_conf create sys file external-monitor ews_eav \
              source-path file:[create_eav_script ews_monitor_eav_script]] \
          user-defined DOMAIN _DOMAIN \
          user-defined EMAIL _EMAIL \
          user-defined USER _USER \
          user-defined PASSWORD _PASSWORD \
          $interval_timeout }
    as,1  { ltm monitor _HTTP_OR_HTTPS \
          ${app}_as__HTTP_OR_HTTPS__MONITOR \
          defaults-from _HTTP_OR_HTTPS \
          send \"OPTIONS /Microsoft-Server-ActiveSync/ HTTP/1.1\\r\\nHost: [iapp_substa fqdn(as,$do_single_domain)]\\r\\n\" \
          recv \"MS-ASProtocolCommands: Sync,SendMail,SmartForward,SmartReply,GetAttachment,GetHierarchy,CreateCollection,DeleteCollection,MoveCollection,FolderSync\" \
          username _DOMAIN\\\\_USER \
          password _PASSWORD \
          destination *:* \
          $interval_timeout }
    ad,1  { ltm monitor external \
          ${app}_ad__USER_eav_monitor \
          run [iapp_conf create sys file external-monitor autodiscover_eav \
              source-path file:[create_eav_script ad_monitor_eav_script]] \
          user-defined DOMAIN _DOMAIN \
          user-defined EMAIL _EMAIL \
          user-defined USER _USER \
          user-defined PASSWORD _PASSWORD \
          $interval_timeout }
    *     { ltm monitor _HTTP_OR_HTTPS \
          ${app}_${svc}__HTTP_OR_HTTPS_monitor \
          defaults-from _HTTP_OR_HTTPS \
          send \"GET [iapp_substa send_uri_arr($svc,$is_exchange_2010)] HTTP/1.1\\r\\nHost: [iapp_substa fqdn($svc,$do_single_domain)]\\r\\nConnection: Close\\r\\n\\r\\n\" \
          recv \"[expr { $is_exchange_2010 ? "" : "200 OK" }]\" \
          destination *:* \
          interval 10 timeout 31 }
    rpc,0 { ltm monitor tcp ${app}_rpc_monitor \
          defaults-from tcp \
          $interval_timeout }
    rpc,1 { ltm monitor tcp ${app}_rpc__MONITOR \
          defaults-from tcp \
          $interval_timeout }
    rpc_mapi,0 { ltm monitor tcp ${app}_${svc}_monitor \
          defaults-from tcp \
          destination *:[subst $port_arr($svc,0)] \
          $interval_timeout }
    rpc_mapi,1 { ltm monitor tcp ${app}_${svc}__MONITOR \
          defaults-from tcp \
          destination *:[subst $port_arr($svc,0)] \
          $interval_timeout }
    rpc_address_book,0 { ltm monitor tcp ${app}_${svc}_monitor \
          defaults-from tcp \
          destination *:[subst $port_arr($svc,0)] \
          $interval_timeout }
    rpc_address_book,1 { ltm monitor tcp ${app}_${svc}__MONITOR \
          defaults-from tcp \
          destination *:[subst $port_arr($svc,0)] \
          $interval_timeout }
    rpc_wildcard,0 { ltm monitor tcp ${app}_${svc}_monitor \
          defaults-from tcp \
          destination *:$port_arr(rpc,0) \
          $interval_timeout }
    rpc_wildcard,1 { ltm monitor tcp ${app}_${svc}__MONITOR \
          defaults-from tcp \
          destination *:$port_arr(rpc,0) \
          $interval_timeout }
    pop3,0 { ltm monitor tcp ${app}_tcp_monitor \
          defaults-from tcp \
          $interval_timeout }
    pop3,1 { ltm monitor _POP3_OR_TCP ${app}__POP3_OR_TCP__MONITOR \
          defaults-from _POP3_OR_TCP \
          [expr { [iapp_is ::pop3_or_tcp pop3] ? \
              "username _USER password _PASSWORD" : "" }] \
          $interval_timeout }
    imap4,0 { ltm monitor tcp ${app}_tcp_monitor \
          defaults-from tcp \
          $interval_timeout }
    imap4,1 { ltm monitor _IMAP_OR_TCP ${app}__IMAP_OR_TCP__MONITOR \
          defaults-from _IMAP_OR_TCP \
          [expr { [iapp_is ::imap_or_tcp imap] ? \
              "username _USER password _PASSWORD" : "" }] \
          $interval_timeout }
    edge,0 { ltm monitor tcp ${app}_edge_monitor \
          defaults-from tcp \
          $interval_timeout }
}

# Healthcheck URI's are only available with Exchange 2013.
# array keys: $svc,$is_exchange_2010
array set send_uri_arr {
    owa,0 {/owa/healthcheck.htm}
    oa,0  {/rpc/healthcheck.htm}
    ews,0 {/EWS/healthcheck.htm}
    as,0  {/Microsoft-Server-Activesync/healthcheck.htm}
    ad,0  {/autodiscover/healthcheck.htm}
    *     {/}
}

# array key: $svc,$do_single_domain
array set fqdn {
    owa,0  $::monitors__owa_domain
    oa,0   $::monitors__oa_domain
    ews,0  $::monitors__ews_domain
    as,0   $::monitors__as_domain
    ad,0   $::monitors__ad_domain
    owa,1  $::monitors__single_domain
    oa,1   $::monitors__single_domain
    ews,1  $::monitors__single_domain
    as,1   $::monitors__single_domain
    ad,1   $::monitors__single_domain
}

set http_or_https [expr { $do_server_ssl ? "https" : "http" }]
set pop3_or_tcp   [expr { $do_server_ssl ? "tcp"   : "pop3" }]
set imap_or_tcp   [expr { $do_server_ssl ? "tcp"   : "imap" }]
set interval_timeout [expr { [info exists ::monitors__interval] \
    ? "interval $::monitors__interval \
       timeout [expr {$::monitors__interval * 3 + 1}]"
    : "interval 30 timeout 91" }]
set advanced_monitors \
    [iapp_is ::monitors__default_or_advanced $USE_ADVANCED_MONITOR_ANSWER]
set do_second_mailbox [expr { $advanced_monitors * \
    [iapp_is ::monitors__second_mailbox_account $SECOND_MAILBOX_ANSWER] }]

# POOLS
# array keys: $svc,$do_<client or server>_ssl
array set port_arr {
    edge,0             80
    edge,1             443
    combined,0         80
    combined,1         443
    owa,0              80
    owa,1              443
    oa,0               80
    oa,1               443
    ews,0              80
    ews,1              443
    as,0               80
    as,1               443
    ad,0               80
    ad,1               443
    pop3,0             110
    pop3,1             995
    imap4,0            143
    imap4,1            993
    rpc,0              135
    rpc,1              135
    rpc_mapi,0         $::services__mapi_port
    rpc_mapi,1         $::services__mapi_port
    rpc_address_book,0 $::services__address_book_port
    rpc_address_book,1 $::services__address_book_port
    rpc_wildcard,0     any
    rpc_wildcard,1     any
}

# array keys: $svc,$do_single_pool
array set server_arr {
    owa,0              $::services__owa_servers
    oa,0               $::services__oa_servers
    ews,0              $::services__ews_servers
    as,0               $::services__as_servers
    ad,0               $::services__ad_servers
    pop3,0             $::services__pop3_servers
    imap4,0            $::services__imap4_servers
    rpc,0              $::services__rpc_servers
    rpc_mapi,0         $::services__rpc_servers
    rpc_address_book,0 $::services__rpc_servers
    rpc_wildcard,0     $::services__rpc_servers
    owa,1              $::services__servers
    oa,1               $::services__servers
    ews,1              $::services__servers
    as,1               $::services__servers
    ad,1               $::services__servers
    pop3,1             $::services__servers
    imap4,1            $::services__servers
    rpc,1              $::services__servers
    rpc_mapi,1         $::services__servers
    rpc_address_book,1 $::services__servers
    rpc_wildcard,1     $::services__servers
}

# array keys: $advanced_pools,$do_pga,$do_tcp_queuing
array set pool_lb_queue_arr {
    1,1,1 { load-balancing-mode $::services__lb_method_choice \
            min-active-members $::services__min_active_members \
            queue-on-connection-limit enabled \
            queue-depth-limit $::services__tcp_request_queue_length \
            queue-time-limit  $::services__tcp_request_queue_timeout }
    1,1,0 { load-balancing-mode $::services__lb_method_choice \
            min-active-members $::services__min_active_members \
            queue-on-connection-limit disabled }
    1,0,1 { load-balancing-mode $::services__lb_method_choice \
            min-active-members 0 \
            queue-on-connection-limit enabled \
            queue-depth-limit $::services__tcp_request_queue_length \
            queue-time-limit  $::services__tcp_request_queue_timeout }
    1,0,0 { load-balancing-mode $::services__lb_method_choice \
            min-active-members 0 \
            queue-on-connection-limit disabled }
    *     { load-balancing-mode least-connections-member \
            min-active-members 0 \
            queue-on-connection-limit disabled }
}

set do_single_pool [iapp_is ::deployment__service_distribution $SINGLE_POOL_OPTION]
set do_single_domain [expr { $do_combined_vs && \
    [iapp_is ::monitors__using_single_domain $USING_SINGLE_DOMAIN_ANSWER] }]
set do_pga [iapp_is ::services__use_pga yes]
set do_tcp_queuing [iapp_is ::services__tcp_request_queuing_enable_question \
    $QUEUE_TCP_REQUESTS_ANSWER]
set advanced_pools \
    [iapp_is ::services__advanced_pool_settings $ADVANCED_POOL_SETTINGS_ANSWER]

if { $edge_scenario } {
    # $bz is added to the name as a workaround for BZ407719.
    set pool_name [iapp_conf create ltm pool ${app}_edge_pool$bz \
        members replace-all-with \{ [iapp_destination \
        $::edge_deployment__vs_addr $port_arr(edge,$do_server_ssl)] \} \
        monitor [iapp_conf create [iapp_substa monitor_subarr(edge,0)]] \
        service-down-action reset]
} else {
    foreach svc $service_list {

       # All monitors are created here.
       # Second mailboxes not allowed for RPC, but for static RPC,
       # RPC is monitored along with MAPI and Address Book ports.
       if { $svc eq "rpc" } {
           set monitor_list [iapp_substa \
               monitor_arr($advanced_monitors,0)]
       } else {
           set monitor_list [iapp_substa \
               monitor_arr($advanced_monitors,$do_second_mailbox)]
       }
       if { $svc eq "rpc" && \
           [iapp_is ::services__dynamic_static_ports $STATIC_ANSWER] } {
           set svc rpc_mapi
           append monitor_list \
           " and [iapp_substa monitor_arr($advanced_monitors,0)]"
           set svc rpc_address_book
           append monitor_list \
           " and [iapp_substa monitor_arr($advanced_monitors,0)]"
           set svc rpc
       } else {
           # Monitor_arr is used here to create an extra simple monitor if required.
           # Min required up-state monitors is 1 for all Exchange 2010 and most
           # Exchange 2013 cases.  It is 2 for EWS, AS, and AD when advanced
           # monitors and Exchange 2013 are both selected.
           set min_up [iapp_substa \
               min_up_arr($svc,$advanced_monitors,$is_exchange_2010)]
           if { $min_up > 1 } {
               append monitor_list " [iapp_substa monitor_arr(0,0)]"
           }
           set monitor_list "min $min_up of \{ $monitor_list \}"
       }

       # All pools are created here except for Edge scenario (above).
       # $bz is added to the name as a workaround for BZ407719.
       set [set svc]_pool_name \
            [iapp_conf create ltm pool ${app}_${svc}_pool$bz \
            [iapp_pool_members [iapp_substa server_arr($svc,$do_single_pool)] \
                          -port [subst $port_arr($svc,$do_server_ssl)]] \
            [iapp_substa pool_lb_queue_arr($advanced_pools,$do_pga,$do_tcp_queuing)] \
            monitor $monitor_list \
            service-down-action reset \
            slow-ramp-time 300]
    }
}

# PERSISTENCE - Exchange 2010 only
# array keys $svc,$is_exchange_2010
array set persist_arr {
    combined,1 { replace-all-with \{ \
               [iapp_conf create ltm persistence cookie \
               ${app}_cookie_persistence_profile \
               timeout 0 \
               defaults-from cookie] \} }
    owa,1      { replace-all-with \{ \
               [iapp_conf create ltm persistence cookie \
               ${app}_cookie_persistence_profile \
               timeout 0 \
               defaults-from cookie] \} }
    oa,1       { replace-all-with \{ \
               [iapp_conf create ltm persistence universal \
               ${app}_universal_persistence_profile$bz \
               defaults-from universal rule \
               [iapp_conf create ltm rule ${app}_oa_persist_irule \
               $forms(oa_persist_irule)]] \} }
    ews,1      { replace-all-with \{ \
               [iapp_conf create ltm persistence universal \
               ${app}_universal_persistence_profile$bz \
               defaults-from universal rule \
               [iapp_conf create ltm rule ${app}_ews_persist_irule \
               $forms(ews_persist_irule)]] \} }
    as,1     { replace-all-with \{ [iapp_conf create $default_source_persist] \} }
    ad,1     { replace-all-with \{ [iapp_conf create $default_source_persist] \} }
    rpc,1    { replace-all-with \{ [iapp_conf create $default_source_persist] \} }
    rpc_mapi,1         { replace-all-with \{ [iapp_conf create $default_source_persist] \} }
    rpc_address_book,1 { replace-all-with \{ [iapp_conf create $default_source_persist] \} }
    rpc_wildcard,1     { replace-all-with \{ [iapp_conf create $default_source_persist] \} }
    *        { none }
}

# FALLBACK PERSISTENCE - Exchange 2010 only
# array keys $svc,$do_rpc
array set fallback_persist_arr {
    combined,1 { [iapp_conf create $default_source_persist] }
    oa,1       { [iapp_conf create $default_source_persist] }
    *          { none }
}

set default_source_persist "ltm persistence source-addr \
               ${app}_source_address_persistence_profile \
               defaults-from source_addr \
               match-across-services enabled \
               match-across-virtuals enabled \
               timeout 7200"

# IRULES
# array keys $svc
array set irule_arr {
    combined {\{\
               [iapp_substa owa_redirect_irule_arr($do_client_ssl)] \
               [iapp_substa apm_irule_arr($do_apm,$do_ntlm_auth,$is_bigip_11_2,$is_bigip_11_4)] \
               [iapp_substa persist_irule_arr($do_apm,$is_exchange_2010)] \
               [iapp_substa sso_irule_arr($do_apm)] \
               [iapp_substa eac_irule_arr($do_eac_source)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    owa      {\{\
               [iapp_substa owa_redirect_irule_arr($do_client_ssl)] \
               [iapp_substa encoding_irule_arr($lan_or_wan)] \
               [iapp_substa sso_irule_arr($do_apm)] \
               [iapp_substa eac_irule_arr($do_eac_source)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    oa       {\{\
               [iapp_substa apm_irule_arr($do_apm,$do_ntlm_auth,$is_bigip_11_2,$is_bigip_11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    ews      {\{\
               [iapp_substa apm_irule_arr($do_apm,$do_ntlm_auth,$is_bigip_11_2,$is_bigip_11_4)] \
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    as       {\{\
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \
               [expr { $do_apm && !$is_bigip_11_4 ? "_sys_APM_activesync" : "" }] \}}
    ad       {\{\
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \
               [iapp_substa custom_irule_arr($advanced_pools)] \}}
    edge     {\{ \
               [iapp_conf create ltm rule edge_base_irule$bz $forms(edge_base_irule)] \
               [iapp_substa apm_irule_arr($do_apm,$do_ntlm_auth,$is_bigip_11_2,$is_bigip_11_4)] \
               [iapp_substa sso_irule_arr($do_apm)] \
               [iapp_substa eac_irule_arr($do_eac_source)] \
               $::edge_deployment__irules \}}
    *        {\{\
               [iapp_substa snatpool_irule_arr($do_snat,$need_snatpool)] \}}
}

# array key: $do_client_ssl
array set owa_redirect_irule_arr {
    1 { [iapp_conf create ltm rule ${app}_owa_redirect_irule$bz \
                   $forms(owa_redirect_irule)] }
    * { }
}

# array keys: $do_apm,$do_ntlm_auth,$is_bigip_11_2,$is_bigip_11_4
array set apm_irule_arr {
    1,0,0,0 { [iapp_conf create ltm rule ${app}_APM_ExchangeSupport_OA_BasicAuth_iRule \
                 $forms(oa_auth_irule)] }
    1,0,1,0 { _sys_APM_ExchangeSupport_OA_BasicAuth }
    1,1,0,0 { _sys_APM_ExchangeSupport_OA_NtlmAuth }
    1,1,1,0 { _sys_APM_ExchangeSupport_OA_NtlmAuth }
    *       { }
}

# array keys: $do_snat,$need_snatpool
array set snatpool_irule_arr {
    1,1 { [iapp_conf create ltm rule ${app}_snatpool_irule$bz \
          [create_snatpool_irule]] }
    *   { }
}

# array keys $do_apm,$is_exchange_2010
array set persist_irule_arr {
    0,0 { [iapp_conf create ltm rule ${app}_combined_pool_irule$bz \
          [string map $irule_map $forms(combined_pool_irule)]] }
    0,1 { [iapp_conf create ltm rule ${app}_combined_persist_irule$bz \
          [string map $irule_map $forms(combined_persist_irule)]] }
    1,0 { [iapp_conf create ltm rule ${app}_apm_combined_pool_irule$bz \
          [string map $irule_map $forms(apm_combined_pool_irule)]] }
    1,1 { [iapp_conf create ltm rule ${app}_apm_combined_pool_irule$bz \
          [string map $irule_map $forms(apm_combined_pool_irule)]] }
    *   { }
}

# array key $lan_or_wan
array set encoding_irule_arr {
    LAN { [iapp_conf create ltm rule ${app}_accept_encoding_irule \
          [string map $irule_map $forms(accept_encoding_irule)]] }
    *   { }
}

# array keys $do_apm
array set sso_irule_arr {
    1   { [iapp_conf create ltm rule ${app}_select_sso_irule$bz \
          [string map $irule_map $forms(select_sso_irule)]] }
    *   { }
}

# array key $do_eac_source
array set eac_irule_arr {
    1  { [iapp_conf create ltm rule ${app}_restrict_eac_source_irule$bz \
         [string map $irule_map $forms(restrict_eac_source_irule)]] \
         [format "" [iapp_conf create ltm data-group \
         [string map $irule_map $forms(trustedAddresses)]]] }
    *  { }
}

# array key $advanced_pools
array set custom_irule_arr {
    1  { [set ::services__${svc}_irules] }
    *  { }
}

# Substitutions for dynamic irules:
# This array is a string map used to customize the otherwise static irules
# stored in the forms array.
# The embedded string map on _TRUSTED effectively extracts the address values
# from the APL table by purging the column header "addr" and all of the braces.
# The string map for _SSO_11_1 supports BIG-IP v11.1 and prior releases with the
# v1 form-based apm config. It can be removed when support for v11.1 is dropped.
set irule_map [subst { \
    _APP_NAME {$app}
    _PREFIX   {$prefix}
    _OWA_POOL {[expr { $do_owa && !$edge_scenario ? "pool ${app}_owa_pool$bz" :"" }]}
    _OA_POOL  {[expr { $do_oa  ? "pool ${app}_oa_pool$bz"  :"" }]}
    _EWS_POOL {[expr { $do_ews ? "pool ${app}_ews_pool$bz" :"" }]}
    _AS_POOL  {[expr { $do_as  ? "pool ${app}_as_pool$bz"  :"" }]}
    _AD_POOL  {[expr { $do_ad  ? "pool ${app}_ad_pool$bz"  :"" }]}
    _PERSIST  {[expr { $is_exchange_2010 ? "persist uie \$sessionid 7200":"" }]}
    _COMPRESS {[expr { $lan_or_wan == $WAN_OPTION ? "COMPRESS::disable"  :"" }]}
    _CACHE    {[expr { ![iapp_is ::deployment_scenario__scenario \
               $LTM_BEHIND_EDGE] ? "CACHE::disable" : "" }]}
    _TRUSTED  {[expr { $lb_scenario && [info exists ::services__trusted] ? \
              "[string map { addr {} \{ {} \} {} } $::services__trusted]":"" }]}
    _ETRUSTED {[expr { $edge_scenario && [info exists ::edge_deployment__trusted] ? \
       "[string map { addr {} \{ {} \} {} } $::edge_deployment__trusted]":"" }]}
    _SSO_URI  {[expr { $is_bigip_11_2 ? "/owa/auth" : "owa" }]}
    _SSO_11_1 {[expr { !$is_bigip_11_2 && $do_eac_apm ? \
                "elseif \{ \$req_uri contains \"ecp\" \} \{\
                 WEBSSO::select \[set foo ${prefix}_forms_sso_eac\] \}" : "" }]}
    _ACCEPT_ENCODING {[expr { $lan_or_wan eq $LAN_OPTION \
        ? {if { [HTTP::header exists "Accept-Encoding"] } {
             HTTP::header remove "Accept-Encoding"      
         }} : "" }]}
}]

# VIRTUAL SERVERS
# Be cautious with vs names changes. The names "combined_https" and "edge" have
# dependencies within this implementation of the NTLM auth system irule.
# array key $svc
array set vs_arr {
    combined { [iapp_substa http_vs_arr($do_client_ssl)] }
    owa      { [iapp_substa http_vs_arr($do_client_ssl)] }
    oa       { [iapp_substa http_vs_arr($do_client_ssl)] }
    ews      { [iapp_substa http_vs_arr($do_client_ssl)] }
    as       { [iapp_substa http_vs_arr($do_client_ssl)] }
    ad       { [iapp_substa http_vs_arr($do_client_ssl)] }
    rpc      { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination [set ::services__rpc_addr] \
                   $port_arr($svc,$do_client_ssl)] \
               mask [iapp_destination -mask [set ::services__${svc}_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [iapp_substa rpc_tcp_arr($lan_or_wan,$do_rpc)] \} \
               rules [iapp_substa irule_arr($svc)]] }
    rpc_mapi   { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination [set ::services__rpc_addr] \
                   [subst $port_arr($svc,$do_client_ssl)]] \
               mask [iapp_destination -mask [set ::services__rpc_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [iapp_substa rpc_tcp_arr($lan_or_wan,$do_rpc)] \} \
               rules [iapp_substa irule_arr($svc)]] }
    rpc_address_book   { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination [set ::services__rpc_addr] \
                   [subst $port_arr($svc,$do_client_ssl)]] \
               mask [iapp_destination -mask [set ::services__rpc_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [iapp_substa rpc_tcp_arr($lan_or_wan,$do_rpc)] \} \
               rules [iapp_substa irule_arr($svc)]] }
    rpc_wildcard   { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination \
                   [set ::services__rpc_addr] 0] \
               mask [iapp_destination -mask [set ::services__rpc_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [iapp_substa rpc_tcp_arr($lan_or_wan,$do_rpc)] \} \
               rules [iapp_substa irule_arr($svc)]] }
    pop3     { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination \
               [set ::services__${svc}_addr] $port_arr($svc,$do_client_ssl)] \
               mask [iapp_destination -mask [set ::services__${svc}_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [subst $ssl_profile_names] \
                   [iapp_substa tcp_arr($lan_or_wan)] \
                   $analytics_profile_name \} \
               rules [iapp_substa irule_arr($svc)]] }
    imap4    { [iapp_conf create ltm virtual ${app}_${svc} \
               destination [iapp_destination \
               [set ::services__${svc}_addr] $port_arr($svc,$do_client_ssl)] \
               mask [iapp_destination -mask [set ::services__${svc}_addr]] \
               pool ${app}_${svc}_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [subst $ssl_profile_names] \
                   [iapp_substa tcp_arr($lan_or_wan)] \
                   $analytics_profile_name \} \
               rules [iapp_substa irule_arr($svc)]] }
    edge     { [iapp_conf create ltm virtual ${app}_edge \
               destination [iapp_destination \
               $edge_deployment__addr $port_arr(edge,1)] \
               mask [iapp_destination -mask $edge_deployment__addr] \
               pool ${app}_edge_pool$bz \
               $snat \
               persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
               fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)]\
               profiles replace-all-with \{ \
                   [subst $ssl_profile_names] \
                   [iapp_substa tcp_arr($lan_or_wan)] \
                   $http_profile_names \
                   $apm_profile_names \
                   $analytics_profile_name \} \
               rules [iapp_substa irule_arr(edge)]] }
}

# array keys $do_client_ssl
array set http_vs_arr {
    0 { [iapp_conf create ltm virtual ${app}_${svc}_http \
        destination [iapp_destination \
        [set ::services__${svc}_addr] $port_arr($svc,0)] \
        mask [iapp_destination -mask [set ::services__${svc}_addr]] \
        pool [expr { $do_combined_vs \
               ? [expr { $do_oa && $do_ntlm_auth \
                   ? "${app}_oa_pool$bz" \
                   : "none" }] \
               : "${app}_${svc}_pool$bz" }] \
        $snat \
        persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
        fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)] \
        profiles replace-all-with \{ \
            [subst $ssl_profile_names] \
            [iapp_substa tcp_arr($lan_or_wan)] \
            $http_profile_names \
            $apm_profile_names \
            $analytics_profile_name \} \
        rules [iapp_substa irule_arr($svc)]] }
    1 { [iapp_conf create ltm virtual ${app}_${svc}_https \
        destination [iapp_destination \
        [set ::services__${svc}_addr] $port_arr($svc,1)] \
        mask [iapp_destination -mask [set ::services__${svc}_addr]] \
        pool [expr { $do_combined_vs \
               ? [expr { $do_oa && $do_ntlm_auth \
                   ? "${app}_oa_pool$bz" \
                   : "none" }] \
               : "${app}_${svc}_pool$bz" }] \
        $snat \
        persist [iapp_substa persist_arr($svc,$is_exchange_2010)] \
        fallback-persistence [iapp_substa fallback_persist_arr($svc,$do_rpc)] \
        profiles replace-all-with \{ \
            [subst $ssl_profile_names] \
            [iapp_substa tcp_arr($lan_or_wan)] \
            $http_profile_names \
            $apm_profile_names \
            $analytics_profile_name \} \
        rules [iapp_substa irule_arr($svc)]] \
        [iapp_conf create ltm virtual ${app}_${svc}_http \
        destination [iapp_destination \
        [set ::services__${svc}_addr] $port_arr($svc,0)] \
        mask [iapp_destination -mask [set ::services__${svc}_addr]] \
        pool none \
        $snat \
        persist none \
        fallback-persistence none \
        profiles replace-all-with \{ \
            [iapp_substa http_profile_arr($do_client_ssl,$do_snat)] \} \
        rules \{ _sys_https_redirect \}] }
}

set combined_svc_done 0
foreach svc $service_list {
    if { $do_combined_vs } {
        set ::services__${svc}_addr $services__combined_addr
        if { [lsearch {owa oa ews as ad} $svc] != -1 } {
            if { $combined_svc_done } {
                continue
            }
            set svc combined 
            set combined_svc_done 1
        }
    }
    iapp_substa vs_arr($svc)
}
iapp_template stop
            }
            macro {
            }
            presentation {
                define choice yesno default "Yes" display "medium" {
    "Yes" => "Yes", 
    "No" => "No"
}
define choice noyes default "No" display "medium" {
    "No" => "No", 
    "Yes" => "Yes"
}

define choice lb_method_lcm_default default "least-connections-member" display "xxlarge" {
    "Dynamic Ratio (member)" => "dynamic-ratio-member",
    "Dynamic Ratio (node)" => "dynamic-ratio-node",
    "Fastest (application)" => "fastest-app-response",
    "Fastest (node)" => "fastest-node",
    "Least Connections (member)" => "least-connections-member",
    "Least Connections (node)" => "least-connections-node",
    "Least Sessions" => "least-sessions",
    "Observed (member)" => "observed-member",
    "Observed (node)" => "observed-node",
    "Predictive (member)" => "predictive-member",
    "Predictive (node)" => "predictive-node",
    "Round Robin" => "round-robin",
    "Ratio (member)" => "ratio-member",
    "Ratio (node)" => "ratio-node",
    "Ratio (session)" => "ratio-session",        
    "Ratio Least Connections (member)" => "ratio-least-connections-member",
    "Ratio Least Connections (node)" => "ratio-least-connections-node",
    "Weighted Least Connections (member)" => "weighted-least-connections-member",
    "Weighted Least Connections (node)" => "weighted-least-connections-node"
}

section intro {

    message hello "Use this template to configure availability, optimizations, encryption, and remote access for the Client Access Server (CAS) role in Exchange Server 2010 and 2013. This template will configure the BIG-IP Local Traffic Manager (LTM) module for all HTTP-based Client Access services, as well as MAPI/RPC (2010 only), IMAP4/IMAP4S and POP3/POP3S."
    message hello2 "You may decrypt secure HTTPS, POP3S, and IMAP4S on this BIG-IP system and optionally re-encrypt that traffic before sending it to the Client Access Servers."
    message hello3 "When used with the BIG-IP Access Policy Manager (APM) module features, including Edge Gateway, this template supports proxy authentication and secure remote access for all CAS HTTP-based protocols without requiring a VPN client. This template supports running APM on the same BIG-IP system as LTM, or using a BIG-IP APM to forward traffic to BIG-IP LTM on a different system."
    message hello4 "If you are deploying BIG-IP APM and LTM on separate BIG-IP systems, run this template on each system and select the appropriate deployment scenario."
    message check_for_updates "Ensure you are using the most recent template before continuing. This template is v1.2.0. Check for newer community versions online at DevCentral (https://devcentral.f5.com/wiki/iApp.CodeShare.ashx) and newer supported versions at the main F5 download site (https://downloads.f5.com/esd/), with instructions at the AskF5 Knowledge Base (http://support.f5.com/kb/en-us/solutions/public/13000/400/sol13422.html)."
    optional ( "HIDE" == "THIS" ) {
        choice ltm_provisioned       tcl { expr { [tmsh::run_proc \
            f5.iapp.1.1.0.cli:iapp_get_provisioned ltm] ? "yes":"no" }}
        choice analytics_provisioned tcl { expr { [tmsh::run_proc \
            f5.iapp.1.1.0.cli:iapp_get_provisioned avr] ? "yes":"no" }}
        choice apm_provisioned       tcl { expr { [tmsh::run_proc \
            f5.iapp.1.1.0.cli:iapp_get_provisioned apm] ? "yes":"no" }}
        choice is_bigip_11_2 tcl { 
            if { [catch { set version_blob [tmsh::show sys version] } err] } {
                error "unable to retrieve TMOS version"
            }
            foreach line [string trim [lrange [split $version_blob "\n"] 3 end-2]] {
                set key [lindex $line 0]
                if { $key eq "Version" } {
                    set cversion [lindex $line 1]
                    break
                }
            }
            scan [set cversion] "%d.%d.%d" cmjr cmnr cpnt
            foreach level { mjr mnr pnt } {
                if { ! [info exists c${level}] } { set c${level} 0 }
            }
            set cnum [expr {
                [set cmjr]*1000000 +
                [set cmnr]*10000 +
                [set cpnt]*100
            }]
            return [expr {$cnum >= 11020000}]
        }
        choice is_bigip_11_3 tcl {
            if { [catch { set version_blob [tmsh::show sys version] } err] } {
                error "unable to retrieve TMOS version"
            }
            foreach line [string trim [lrange [split $version_blob "\n"] 3 end-2]] {
                set key [lindex $line 0]
                if { $key eq "Version" } {
                    set cversion [lindex $line 1]
                    break
                }
            }
            scan [set cversion] "%d.%d.%d" cmjr cmnr cpnt
            foreach level { mjr mnr pnt } {
                if { ! [info exists c${level}] } { set c${level} 0 }
            }
            set cnum [expr {
                [set cmjr]*1000000 +
                [set cmnr]*10000 +
                [set cpnt]*100
            }]
            return [expr {$cnum >= 11030000}]
        }
    }

    optional ( ltm_provisioned != "yes" ) {
        message sorry "We are sorry but you must license and provision the LTM module to use this template."
    }
    optional ( analytics_provisioned != "yes" ) {
        message analytics_opportunity "Provisioning AVR will enable additional options in this template."
    }
    optional ( apm_provisioned != "yes" ) {
        message wa_opportunity "Provisioning APM will enable additional options in this template."
    }
    message prereqs_1 "If you plan on using this template to configure the BIG-IP system for processing encrypted traffic, you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for the traffic. Importing SSL certificates and keys is not a part of this template; see Local Traffic >> SSL Certificate List."
    message prereqs_2 "To ensure a successful deployment, F5 strongly recommends following the instructions in the Deployment Guide at http://www.f5.com/pdf/deployment-guides/microsoft-exchange-2010-2013-iapp-dg.pdf,  which includes important information about post-deployment configuration steps and updates."
    choice help display "xxlarge" default "hide" {
        "Yes, show all inline help" => "max",
        "No, do not show inline help" => "hide"
    }
}

optional ( intro.ltm_provisioned == "yes" ) {

    section deployment_scenario {
        choice scenario display "xxlarge" default "LTM will load balance and optimize CAS traffic" {
            "BIG-IP LTM will load balance and optimize CAS traffic" => "LTM will load balance and optimize CAS traffic",
            "BIG-IP LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP APM" => "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM",
            "BIG-IP APM will provide secure remote access to CAS" => "BIG-IP Edge Gateway or APM will provide secure remote access to CAS"
        }
        optional ( scenario == "LTM will load balance and optimize CAS traffic") {    
            optional ( intro.help != "hide" ) {
                message scenario_1_help "This selection configures the BIG-IP LTM with one or more virtual servers for Exchange Client Access traffic. You can configure the iApp for the CAS HTTP-based services, including Outlook Web App, Outlook Anywhere, Autodiscover and ActiveSync, as well as non-HTTP services such as RPC Client Access (MAPI), POP3 and IMAP4."
            }
            optional ( intro.help == "max" ) {
                message scenario_1_max_help    "Do not select this option if you intend to deploy a separate BIG-IP APM that will provide secure remote access to CAS HTTP services."
            }
        }
        optional ( scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" && intro.help != "hide" ) {
            message scenario_2_help "This selection configures BIG-IP LTM with a single virtual server that receives Exchange Client Access HTTP-based traffic that has been forwarded by a BIG-IP APM. The virtual server can also accommodate direct traffic, for example internal clients that do not use the BIG-IP APM, and non-HTTP traffic that is not handled by BIG-IP APM such as POP3 and IMAP4. Please read the Deployment Guide for specific instructions on mixed internal and external client traffic."
        }
        optional ( scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
            optional ( intro.apm_provisioned != "yes" ) {
                message apm_warning "The Access Policy Manager (APM) module is not provisioned. This scenario will not work until you provision APM."
            }
            optional ( intro.help != "hide" ) {
                message scenario_3_help "This selection configures the BIG-IP system as a BIG-IP APM that will use a single HTTPS (port 443) virtual server to provide proxy authentication and secure remote access to Exchange HTTP-based Client Access services without requiring the use of an F5 Edge Client. The traffic will be forwarded to another BIG-IP running LTM which will provide advanced load balancing, persistence, monitoring and optimizations for those services."
            }
            optional ( intro.help == "max" ) {
                message scenario_3_max_help "To use the BIG-IP system in this scenario, you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for the CAS HTTP-based traffic. See Local Traffic >> SSL Certificate List. When deploying BIG-IP APM with Outlook Web App and Forms-based Authentication, you must change the credential format required for OWA from the default domain and user name format to just the user name."
            }
        }
        choice version display "xxlarge" default "Exchange Server 2010" {
            "Exchange Server 2010", "Exchange Server 2013"
        }
        optional ( version == "Exchange Server 2010" ) {
            optional ( intro.help == "max" ) {
			message version_help_2010_1 "Select this option if you are deploying the BIG-IP system with Microsoft Exchange Server 2010."
			}
        }
        optional ( version == "Exchange Server 2013" ) {
            optional ( intro.help == "max" ) {
			message version_help_2013_1 "Select this option if you are deploying the BIG-IP system with Microsoft Exchange Server 2013"
			}
        }
    }

    optional ( intro.analytics_provisioned == "yes" ) {
        section analytics {
            choice add_analytics display "xxlarge" default "No" {
                "No, do not enable Analytics" => "No",
                "Yes, enable Analytics using AVR" => "Yes"
            }
			optional ( intro.help == "max" ) {
				message about_analytics "The Application Visibility Reporting (AVR) module allows you to view statistics specific to your Microsoft Exchange implementation. AVR is only for application-specific reporting, you can still view object-level statistics from the BIG-IP system without using AVR."
			}
            optional ( add_analytics == "Yes" ) {
                message important_analytics_profiles "Enabling Analytics may affect overall system performance. If you choose to enable Analytics, we recommend gathering statistics for a set time period, such as one week, and then re-entering this template and disabling Analytics while you process the data."
                optional ( intro.help == "max" ) {
                    message about_analytics_profiles "For full functionality and flexibility, we recommend you create a custom Analytics profile for this application service. Creating a custom profile is not a part of this template; see Local Traffic >> Profiles : Analytics. Once you have created an Analytics profile, you can select it from the list below. To select any new profiles you create, you need to restart or reconfigure this template."
                }
                choice create_new_analytics default "Select a Custom Profile" display "xxlarge" { 
                    "Select a custom Analytics profile" => "Select a Custom Profile",
                    "Use the default Analytics profile" => "Use Default Profile"
                }
                optional ( create_new_analytics == "Select a Custom Profile" ) {
                    choice analytics_profile display "xxlarge" tcl { 
                        tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items -nocomplain ltm profile analytics 
                    }
                }
            }
        }
    }

    optional ( intro.apm_provisioned == "yes" && 
            (deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" || 
                deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic") ) {
        section apm {
            message provision_warning "You must have fully licensed the BIG-IP APM module to use the APM features in this template."
            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic") {
                choice deploying_apm display "xxlarge" default "No" {
                   "Yes, provide secure authentication using BIG-IP APM" => "Yes",
                   "No, do not provide secure authentication using BIG-IP APM" => "No" }
            }
			optional ( intro.help == "max" ) {
				message about_apm_help "If you have fully licensed and provisioned the BIG-IP Access Policy Manager, you can use it to provide proxy authentication and secure remote access for the HTTP-based Client Access services. To deploy APM for Exchange, you must have information about your Active Directory implementation."
			}
            optional ( deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ||
                (deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" &&
                    deploying_apm == "Yes" )) {
                optional ( intro.is_bigip_11_2 != "1" ) {
                    string fqdn display "xxlarge" validator "FQDN"
                    string active_directory_server display "xxlarge" required validator "IpOrFqdn"
                    optional ( intro.help == "max" ) {
                        message apm_single_help "Specify the IP address of the Active Directory server you want to use for this deployment. The BIG-IP system must have a route to the Active Directory server you specify."
                    }
                }
                optional ( intro.is_bigip_11_2 == "1" ) {
                    table active_dir_servers {
                        string fqdn display "large" required validator "Fqdn"
                        string addr display "large" required validator "IpAddress"
                    }
                    optional ( intro.help == "max" ) {
                        message apm_multiple_help "Specify the fully qualified domain name AND IP address of each Active Directory server you want to use for this deployment. Click Add to include additional servers.  The BIG-IP system must have a route to the Active Directory servers you specify."
                    }
                }
                string login_domain display "xxlarge" required validator "Fqdn"
				optional ( intro.help == "max" ) {
					message login_domain_help "Specify the fully qualified domain name for the Active Directory deployment used by your Exchange users.  This is the FQDN of the entire Active Directory domain, and not of an individual Active Directory server."
				}
                choice allow_anonymous_binding display "xxlarge" default "Anonymous binding is allowed" {
                    "Anonymous binding is allowed",
                    "Credentials are required for binding"
                }
				optional ( intro.help == "max" ) {
					message apm_binding_help "Choose whether your Active Directory implementation allows anonymous binding or not. If it does not, you must provide a user name and password with administrative permissions."
				}
                optional ( allow_anonymous_binding == "Credentials are required for binding" ) {
                    string ad_username display "xxlarge" required
					optional ( intro.help == "max" ) {
						message apm_ad_username_help "You must type the user name of an Active Directory account that has administrative permissions."
					}
                    password ad_password display "xxlarge" required
                }

                optional ( intro.is_bigip_11_2 == "1" ) {
                    choice ad_monitor display "xxlarge" default "ad_icmp" {
                        "Create a new LDAP monitor for the Active Directory pool " => "ad_create", 
                        "Select an existing monitor for the Active Directory pool" => "ad_select", 
                        "Use a simple ICMP monitor for the Active Directory pool"  => "ad_icmp"
                    }
                    optional ( intro.help == "max" ) {
                        message ad_monitor_help "Specify whether you want the template to create a new LDAP monitor for your Active Directory servers, use a simple ICMP/ping monitor, or choose an existing monitor."
                    }

                    optional ( ad_monitor == "ad_select" ) {
                        choice ad_monitor_choice display "xxlarge" tcl { 
                            set choices "[tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items ltm monitor ldap]\n[tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items ltm monitor external]\n"
                            return $choices
                        }
                    }

                    optional ( ad_monitor == "ad_create" ) {
                        string ad_monitor_user required display "xxlarge"
                        message ad_monitor_user_critical "The Active Directory service account you specify here must be set to never expire. A deleted or locked account will cause the BIG-IP system to mark your Active Directory pool members as unavailable, which takes them offline."

                        password ad_monitor_password required display "xxlarge"

                        string ad_monitor_tree required display "xxlarge"
                        optional ( intro.help == "max" ) {
                            message ad_monitor_tree_info "Specify the LDAP tree for the user name you provided. ADSI editor, an administration tool for Active Directory LDAP administration, is useful for determining the correct LDAP tree value. For example, if the user name is 'user1' which is in the organizational unit 'Exchange Users' and is in the domain 'exchange.example.com', the LDAP tree would be: ou=Exchange Users, dc=Exchange, dc=example, dc=com."
                        }

                        choice ad_monitor_secure display "xxlarge" {
                            "No, a secure protocol is not required" => "none", 
                            "Yes, SSL communication is required"     => "ssl", 
                            "Yes, TLS communication is required"    => "tls"
                        }
                        optional ( intro.help == "max" ) {
                            message ad_monitor_secure_info "Select whether your Active Directory implementation requires a secure protocol (SSL or TLS) for communication, or if it does not use a secure protocol."
                        }

                        string ad_monitor_interval default "10" validator "NonNegativeNumber"
                        optional ( intro.help == "max" ) {
                            message ad_monitor_interval_info "Specify the number of seconds to use between each health monitor attempt. Members of this pool are marked down after four incorrect responses, and marked available after one correct response. "
                        }
                    }
                }
            }
        }
    }

    optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
            deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) {
        section deployment {
            optional (deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ||
                (deployment_scenario.scenario ==
                "LTM will load balance and optimize CAS traffic" && 
                (intro.apm_provisioned != "yes" || apm.deploying_apm == "No"))) {

                choice incoming_encrypted display "xxlarge" default "Encrypted" {
                    "Encrypted", "Unencrypted"
                }
				optional ( intro.help == "max" && deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ) {
					message incoming_encrypted_lb_help "In order to properly handle Client Access server traffic, the BIG-IP system needs to know whether any of the Client Access server traffic will be encrypted when it arrives on this system. In nearly all cases for this deployment scenario, traffic arriving at this BIG-IP system will be encrypted."
				}
				optional ( intro.help == "max" && deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) {
					message incoming_encrypted_rec_help "In order to properly handle Client Access server traffic, the BIG-IP system needs to know whether any of the Client Access server traffic will be encrypted when it arrives on this system. While typically Client Access Server traffic would arrive encrypted, because this BIG-IP system is receiving traffic forwarded by a separate BIG-IP APM, it may arrive unencrypted."
				}
            }

            optional ((deployment_scenario.scenario == 
                "LTM will load balance and optimize CAS traffic" && 
                (intro.apm_provisioned == "yes" && apm.deploying_apm == "Yes")) ||
                incoming_encrypted == "Encrypted" ) {

                optional (deployment_scenario.version == "Exchange Server 2010") {
                    choice reencrypt_2010 display "xxlarge"
                        default "Do not re-encrypt (SSL Offload)" {
                        "Re-encrypt (SSL Bridging)",
                        "Do not re-encrypt (SSL Offload)"
                    }
                }
                optional (deployment_scenario.version == "Exchange Server 2013") {
                    choice reencrypt_2013 display "xxlarge"
                        default "Re-encrypt (SSL Bridging)" {
                        "Re-encrypt (SSL Bridging)",
                        "Do not re-encrypt (SSL Offload)"
                    }
                    optional ( reencrypt_2013 == "Do not re-encrypt (SSL Offload)" ) {
                        message reencrypt_warning "Check Microsoft documentation for information on SSL Offload support in Exchange Server 2013." 
                    }
                }
				optional ( intro.help == "max" ) {
					message reencrypt_help "After decrypting the Client Access server traffic, the BIG-IP system can re-encrypt the traffic before sending it to the Client Access servers (SSL Bridging), or leave the traffic unencrypted (SSL Offload). If you chose re-encrypt, the Client Access servers must also perform decryption duties."
				}

                choice client_ssl_profile display "xxlarge"
                        default "/#create_new#" tcl {
                    return "Create a new Client SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items ltm profile client-ssl]"
                }

                optional ( client_ssl_profile == "/#create_new#" ) {
                    choice cert default "/Common/default.crt" display "xxlarge"
                         tcl { tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items \
                         -norecursive -filter NAME !~ ca-bundle.crt|f5-irule.crt \
                         sys file ssl-cert }
                    optional ( intro.help == "max" ) {
                        message cert_help "Select the certificate the system uses for client-side SSL processing. Importing SSL certificates and keys is not a part of this template; see Local Traffic >> SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template to have them appear in the list."
                    }
                    message incoming_encrypted_prereq1 "To configure this BIG-IP system to process encrypted Exchange traffic, you need to import an SSL certificate and key that correspond to all fully-qualified DNS names that you are using for that traffic. Any certificate that you obtain with multiple names must be in SAN format, not SNI format."

                    optional (deployment_scenario.version == "Exchange Server 2010") {
                        message incoming_encrypted_prereq2 "To configure your Client Access Servers to support SSL offloading, see http://social.technet.microsoft.com/wiki/contents/articles/how-to-configure-ssl-offloading-in-exchange-2010.aspx."
                    }
                    optional (deployment_scenario.version == "Exchange Server 2013") {
                        message incoming_encrypted_prereq3 "Consult the most recent Microsoft documentation for information about SSL offloading and Exchange Server 2013."
                    }

                    choice key default "/Common/default.key" display "xxlarge" tcl {
                        tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items \
                        -norecursive sys file ssl-key }
                    optional ( intro.help == "max" ) {
                        message key_help "Select the name of the associated SSL key."
                    }
				}
            }
            optional ((deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" && 
                incoming_encrypted == "Unencrypted") || 
                ((deployment_scenario.scenario == 
                "LTM will load balance and optimize CAS traffic" && 
                (intro.apm_provisioned != "yes" || apm.deploying_apm == "No")) && 
                incoming_encrypted == "Unencrypted") ) {

                choice encrypt display "xxlarge"
                    default "Do not encrypt (SSL Offload)" {
                    "Encrypt (SSL Bridging)", "Do not encrypt (SSL Offload)"
                }
            }
            optional ((((deployment_scenario.scenario == 
                "LTM will load balance and optimize CAS traffic" && 
                intro.apm_provisioned == "yes" && apm.deploying_apm == "Yes") ||
                incoming_encrypted == "Encrypted" ) &&
                ((deployment_scenario.version == "Exchange Server 2010" &&
                reencrypt_2010 == "Re-encrypt (SSL Bridging)") ||
                (deployment_scenario.version == "Exchange Server 2013" &&
                reencrypt_2013 == "Re-encrypt (SSL Bridging)"))) || 

                ((deployment_scenario.scenario == 
                "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ||
                (deployment_scenario.scenario == 
                "LTM will load balance and optimize CAS traffic" && 
                (intro.apm_provisioned != "yes" || apm.deploying_apm == "No")) && 
                incoming_encrypted == "Unencrypted") &&
                encrypt == "Encrypt (SSL Bridging)")) {

                choice server_ssl_profile display "xxlarge"
                        default "/#create_new#" tcl {
                    return "Create a new Server SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items ltm profile server-ssl]"
                }
            }

            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ) {
                choice lan_or_wan display "xxlarge" default "WAN" { "WAN", "LAN" }
            }
			optional ( intro.help == "max" ) {
				message wan_lan_help "In order to configure the proper TCP optimization settings, you must specify whether the majority of your Exchange clients will be connecting to the BIG-IP system over a WAN or a LAN."
			}

            choice location display "xxlarge" default "Same subnet for BIG-IP virtual servers and Client Access Servers" {
                "Same subnet for BIG-IP virtual servers and Client Access Servers",
                "Different subnet for BIG-IP virtual servers and Client Access Servers"
            }
            optional ( intro.help == "max" ) {
				message location_help "It is important to ensure that responses to client requests made using the BIG-IP virtual server address are returned through the BIG-IP system. If the client receives a response directly from the Client Access server, the connection is dropped. The way the BIG-IP system handles this depends on your network topology."
				message location_help1 "For environments in which the virtual server IP address is on a subnet different from the Client Access Servers, select different subnets. You must answer an additional question about how routing is configured on your Client Access Servers.  For environments in which the virtual server IP address is on the same subnet as the Client Access servers, select same subnet. This enables Secure Network Address Translation, which results in the BIG-IP system replacing the client IP address of an incoming connection with its self IP address (using floating addresses when available), ensuring the server response returns through the BIG-IP system."
			}
            optional ( location == "Different subnet for BIG-IP virtual servers and Client Access Servers" ) {
                choice snat display "xxlarge" default "Client Access Servers do NOT use BIG-IP as their default gateway" {
                    "Client Access Servers use the BIG-IP as their default gateway",
                    "Client Access Servers do NOT use BIG-IP as their default gateway"
                }
                optional ( intro.help == "max" ) {
					message snat_help "When the virtual servers are on a subnet different from the Client Access Servers, the system needs to know if the servers use the BIG-IP system as their default gateway. If the Client Access Servers use the BIG-IP system as their default gateway, no additional information is needed to ensure proper response handling. If the servers do not use the BIG-IP system as their default gateway, SNAT is configured to ensure proper response handling, and you must specify the number of users you expect in the next question."
				}
            }

            optional ( location == "Same subnet for BIG-IP virtual servers and Client Access Servers" || 
                    (location == "Different subnet for BIG-IP virtual servers and Client Access Servers" && 
                        snat == "Client Access Servers do NOT use BIG-IP as their default gateway") ) {
                choice automap_or_pool display "xxlarge" default "Less than 6000" {
                    "Fewer than 6000" => "Less than 6000", "More than 6000"
                }
				optional ( intro.help == "max" && automap_or_pool == "Less than 6000" ) {
					message snatpool_help "The BIG-IP system can handle approximately 6000 concurrent users (64,000 concurrent connections) for each Client Access Server using the SNAT Auto Map setting. If you expect more than 6000 simultaneous connections to each server, the system creates a SNAT pool, and additional IP addresses are needed."
				}

                optional ( automap_or_pool == "More than 6000" ) {
                    optional ( intro.help == "max" ) {
                        message snatpool_message "Because you will have more than 6000 concurrent users accessing each server, you will need to define a set of IP addresses (a SNAT pool) that will be used for address translation, rather than having the BIG-IP use its own self IP address for translation (SNAT Automap). You need at least one IP address for each 6000 users, or fraction thereof. The addresses must be unique and available on a subnet to which the BIG-IP is directly connected and to which your servers have a route; this is usually the same subnet where you have located your servers."
                    }
                    table snatpool_members {
                        string addr required validator "IpAddress" display "large"
                    }

                }
            }

            optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ) {
                choice combined_or_seperate_ips display "xxlarge" default "Single IP address" {
                    "Use a single IP address for all connections" => "Single IP address",
                    "Use different IP addresses for the different services" => "Different IP addresses for different services"
                }
				optional ( intro.help == "max" ) {
					message combined_or_seperate_ips_help "This question determines the number of virtual servers the BIG-IP system creates for your Client Access Server deployment. By choosing a single IP address, you can combine multiple functions (such as using a single FQDN and associated SSL certificate for all HTTP-based CAS services) on the same virtual server. By choosing separate virtual servers for each CAS componenet, you can manage each service independently from the others. For detailed information, see the Deployment Guide."
				}
            }

            choice service_distribution display "xxlarge" default "All services will be handled by the same set of Client Access Servers" {
                "All services will be handled by the same set of Client Access Servers",
                "Each service will be handled by a unique set of Client Access Servers"
            }
			optional ( intro.help == "max" ) {
				message service_distribution_help "The system needs to know if you are using one or multiple sets of Client Access servers. This iApp creates separate load balancing pools and monitors for each service regardless of this setting, but if you use the same set of servers for all services, you are only asked for the server IP addresses once."
			}
        }

        section services {
            choice advanced_pool_settings display "xxlarge" default "Use default pool settings" {
                "Use settings recommended by F5",
                "Customize pool settings"
            }
			optional ( intro.help == "max" ) {
				message advanced_pool_settings_help "If necessary, you can configure advanced pool settings (such as specifying the load balancing algorithm or configuring priority groups). If you do not have a need to modify these settings, use the recommended settings, which are a result of extensive testing with Microsoft Exchange Server. "
			}
            optional ( advanced_pool_settings == "Customize pool settings" ) {
                lb_method_lcm_default lb_method_choice
				optional ( intro.help == "max" ) {
					message lb_method_choice_help "Choose the load balancing method appropriate for your configuration. We recommend the default, Least Connections (member). For a description of each method, see the online help on the Pool creation page, or the BIG-IP system documentation."
				}

                choice use_pga display "xxlarge" default "no" {
                     "Do not use Priority Group Activation" => "no",
                     "Use Priority Group Activation" => "yes"
                }
				optional ( intro.help == "max" ) {
					message use_pga_help "Priority Group Activation allows you to segment your servers into priority groups. With Priority Group Activation, the BIG-IP system load balances traffic according to the priority number you assign to the pool members. A higher number indicates higher priority. Traffic is only sent to the servers with the highest priority, unless the number of available servers in that priority group falls below the value you specify as the minimum. The BIG-IP system then sends traffic to the group of servers with the next highest priority, and so on. You must specify a priorty when adding the servers. See the BIG-IP documentation for more details. "
				}
                optional ( use_pga == "yes" ) {
                    string min_active_members required validator "NonNegativeNumber"
                }
				optional ( intro.help == "max" && use_pga == "yes" ) {
					message min_active_members_help "Specify the minimum number of servers which must be available before the system sends traffic to servers with a lower priority."
				}

                choice tcp_request_queuing_enable_question display "xxlarge" default "Do not queue TCP requests" {
                    "Do not queue TCP requests",
                    "Queue TCP requests"
                }	
				optional ( intro.help == "max" ) {
					message tcp_request_queuing_enable_question_help "TCP request queuing provides the ability to queue connection requests that exceed the capacity of connections for a pool, pool member, or node, as determined by the connection limit. If you enable TCP request queuing, you must specify a queue length and timeout for queued requests based on server capability, load, and need for shared resources."
				}
                optional ( tcp_request_queuing_enable_question == "Queue TCP requests" ) {
                    message note "TCP request queuing is an advanced feature and should be used only if you understand how it will affect your deployment, including application behavior and BIG-IP performance. You must add a Connection Limit to your pool members for TCP request queuing."
                    string tcp_request_queue_length required validator "NonNegativeNumber" display "medium"
                    string tcp_request_queue_timeout required validator "NonNegativeNumber" display "medium"
                }
            }

            optional ( deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ||
                    (deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                        deployment.combined_or_seperate_ips == "Single IP address") ) {
                string combined_addr display "xxlarge" required validator "IpAddress"
				optional ( intro.help == "max" ) {
					message combined_addr_help "Specify a valid IP address to use for the single BIG-IP virtual server. This virtual server address is used as the address for all Client Access services."
				}

                optional ( advanced_pool_settings == "Customize pool settings" ) {
                    message combined_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                    multichoice combined_irules display "xxlarge" tcl { 
                        join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
                    }
                     optional ( intro.help == "max" ) {
						message combined_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                     }
                }
            }
            yesno deploying_owa
			optional ( intro.help == "max" ) {
				message deploying_owa_help "Select if you are deploying the BIG-IP system for Outlook Web App, including the Exchange Control Panel (ECP) at this time. You can always reconfigure this template at another time to add or remove Outlook Web App from the configuration."
            }
            optional ( deploying_owa == "Yes" ) {
                optional ( deployment_scenario.scenario == 
                           "LTM will load balance and optimize CAS traffic"
                           && deployment_scenario.version == "Exchange Server 2013" ) {
                    choice restrict_eac_source display "xxlarge" default "No" {
                    "Yes, restrict EAC access to specific client IP addresses or networks" => "Yes",
                    "No, allow EAC access from all client IP addresses" => "No" 
					}
					optional ( intro.help == "max" ) {
						message restrict_eac_source_help "With Exchange Server 2013, Exchange administration is performed using the Exchange Administration Center (EAC). The BIG-IP system can restrict access to the EAC to a specific group of IP addresses or networks for an additional layer of security."
					}
                    optional ( restrict_eac_source == "Yes" ) {
                        table trusted {
                            string addr display "xlarge" required
                        }
						optional ( intro.help == "max" ) {
							message trusted_help "Specify the IP addresses or networks that should be allowed access to the EAC. Click Add to include additional IP addresses or networks."
						}
                    }
                    optional ( intro.apm_provisioned == "yes" &&
                               apm.deploying_apm == "Yes" ) {
                        choice restrict_eac_apm display "xxlarge" default "No" {
                        "Yes, restrict EAC access by group membership" => "Yes",
                        "No, do not restrict EAC access by group membership" => "No" }
                    }
					optional ( intro.help == "max" ) {
						message restrict_eac_apm_help "Because you are deploying the BIG-IP APM, you can restrict Exchange Administration Center (EAC) access to members of Exchange 2013's Organizational Management group. The BIG-IP APM module queries Active Directory group membership and the BIG-IP APM policy allows or denies access based on membership."
					}
                }
                optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                        deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                    string owa_addr required display "xxlarge" validator "IpAddress"
                    optional ( intro.help == "max" ) {
						message owa_addr_help "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the Outlook Web App virtual server. This is the IP address clients will use to access OWA (or a FQDN will resolve to this address).  "
					}
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        message owa_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                        multichoice owa_irules display "xxlarge" tcl { 
                            join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
                        }
                        optional ( intro.help == "max" ) {
							message owa_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                        }
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table owa_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message owa_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Outlook Web App. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
            }
            choice deploying_oa display "xxlarge" default "Yes" { 
                "Yes, deploying Outlook Anywhere, EWS, and OAB" => "Yes",
                "Yes, deploying EWS only" => "ews",
                "No, not deploying Outlook Anywhere, EWS, or OAB" => "No"
            }
			 optional ( intro.help == "max" ) {
				message deploying_oa_help "Select whether you are deploying the BIG-IP system for Outlook Anywhere, Exchange Web Services (EWS), and Offline Address Book (OAB), or EWS only at this time. You can always reconfigure this template at another time to add or remove Outlook Anywhere or EWS from the configuration."
             }
            optional ( deploying_oa == "Yes" ) {
                optional ( intro.help == "max" ) {
					message deploying_oa_prereq1 "To prevent internal users from receiving a password prompt, your internal DNS must not have an 'A' record for the FQDN for Outlook Anywhere."
					message deploying_oa_prereq2 "You must enable Outlook Anywhere on each of your Exchange Client Access Servers before that service will be available. Outlook Anywhere is not enabled by default on Exchange Client Access Servers."
				}
                optional ( deployment_scenario.scenario ==
                    "LTM will load balance and optimize CAS traffic" && 
                    deployment.combined_or_seperate_ips ==
                    "Different IP addresses for different services" ) {
                    string oa_addr required display "xxlarge" validator "IpAddress"
					optional ( intro.help == "max" ) {
						message deploying_oa_help1 "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the Outlook Anywhere virtual server."
					}
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        message oa_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment." 

                        multichoice oa_irules display "xxlarge" tcl { 
                            join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
                        }
                        optional ( intro.help == "max" ) {
							message oa_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                        }
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table oa_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message oa_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Outlook Anywhere. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
                optional ( deployment_scenario.scenario ==
                        "LTM will load balance and optimize CAS traffic" && 
                        intro.apm_provisioned == "yes" && 
                        intro.is_bigip_11_3 == "1" &&
                        apm.deploying_apm == "Yes" ) {
                    choice oa_ntlm_auth display "xxlarge" default "No" {
                        "Outlook Anywhere clients use NTLM authentication" => "Yes",
                        "Outlook Anywhere clients use Basic authentication" => "No" 
					}
					optional ( intro.help == "max" ) {
						message oa_ntlm_auth_help "The BIG-IP APM v11.3 and later supports Outlook Anywhere clients using NTLM authentication, as well as Basic Authentication.  Choose which authentication method your Outlook Anywhere clients are using. If you select NTLM, you must answer a number of questions about your Active Directory implementation."
					}
                    optional ( oa_ntlm_auth == "Yes" ) {
                        message oa_ntlm_auth_warning1 "Before completing this section, you must create an NTLM Machine Account object on the BIG-IP system to join this system to the Active Directory domain. Creating an NTLM Machine Account is not a part of this template, see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List. You must also create a user account in the same domain that has been properly configured for NTLM delegation."
                        message oa_ntlm_auth_warning2 "To use client NTLM authentication, you must correctly configure Kerberos delegation in the Active Directory domain where Outlook Anywhere users will be authenticated. See the Deployment Guide for complete details on configuring NTLM authentication for Outlook Anywhere."
                        choice ntlm_machine_account display "xxlarge" tcl { 
                            tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items -nocomplain apm ntlm machine-account
                        }
                        optional ( intro.help == "max" ) {
                            message ntlm_machine_account_help "The Machine Account creates a computer account for this BIG-IP system in your Active Directory domain. If you do not see any items in this list, you must exit this template and create the NTLM Machine Account before it appears. See see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List."
                        }
                        string ntlm_kdc required display "xxlarge" validator "IpOrFqdn"
						optional ( intro.help == "max" ) {
							message ntlm_kdc_help "Specify the IP address or fully qualified domain name of the Kerberos Key Distribution Center (KDC). "
						}
                        message ntlm_kdc_warning "If using an FQDN, this BIG-IP system must be able to resolve the IP address of the KDC using DNS."
                        string ntlm_realm display "xxlarge" required
						optional ( intro.help == "max" ) {
							message ntlm_realm_help "Specify the Kerberos realm, such as MYDOMAIN.COM."
						}
                        string ntlm_user display "xxlarge" required
                        optional ( intro.help == "max" ) {
                            message ntlm_user_help "This is the user account in Active Directory you should have created prior to beginning the template.  This account must be correctly configured in Active Directory for Kerberos delegation.  See the Deployment Guide for more information."
                        }
                        password ntlm_passwd display "xxlarge" required
                        choice ntlm_spn_pattern display "xxlarge" default "Use DNS reverse lookups"
                                    { "Use DNS reverse lookups", "Use the Outlook Anywhere host header" }
                        optional ( intro.help == "max" ) {
                            message ntlm_spn_pattern_help "The BIG-IP APM will construct a Kerberos ticket request to the Active Directory domain controller using either DNS reverse lookups or the Outlook Anywhere host header.  See the Deployment Guide detailed information, including Active Directory configuration guideance."
                        }
						optional ( ntlm_spn_pattern == "Use DNS reverse lookups" ) {
                            message ntlm_dns_lookup_warning "To use DNS reverse lookups, you must configure a reverse lookup zone containing a PTR record for each Client Access Server on a DNS server that is accessible from this BIG-IP system."
                        }
                        optional ( ntlm_spn_pattern == "Use the Outlook Anywhere host header" ) {
                            message ntlm_host_header_warning "To use the host header value,  you must configure IIS Application Pools for Outlook Anywhere, Autodiscover, and Exchange Web Services to run using the previously created Active Directory user account for Kerberos delegation.  See the Deployment Guide for detailed information."
                        }
                    }
                }
            }
            optional ( deploying_oa == "ews" ) {
			optional ( intro.help == "max" ) {
                message deploying_ews_warning1 "This option creates a destination virtual server and associated objects for Exchange Web Services traffic only; if you are deploying EWS and Outlook Anywhere, select 'Deploy Outlook Anywhere, EWS, and OAB' above."
                message deploying_ews_warning2 "Outlook Address Book traffic will be forwarded to the Exchange Web Services pool."
				}
                optional ( deployment_scenario.scenario ==
                    "LTM will load balance and optimize CAS traffic" && 
                    deployment.combined_or_seperate_ips ==
                    "Different IP addresses for different services" ) {
                    string ews_addr required display "xxlarge" validator "IpAddress"
					optional ( intro.help == "max" ) {
						message deploying_ews_help "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the EWS virtual server."
					}
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        message ews_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."
                        multichoice ews_irules display "xxlarge" tcl { 
                            join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
                        }
						 optional ( intro.help == "max" ) {
						  message ews_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
						  }
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table ews_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message ews_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Exchange Web Services. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
            }
            yesno deploying_as
			optional ( intro.help == "max" ) {
				message deploying_as_help "Select whether you are deploying the BIG-IP system for ActiveSync at this time. You can always reconfigure this template at another time to add or remove ActiveSync from the configuration."
             }
            optional ( deploying_as == "Yes" ) {
                optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                        deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                    string as_addr required display "xxlarge" validator "IpAddress"
                    optional ( intro.help == "max" ) {
						message deploying_as_help1 "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the ActiveSync virtual server."
					}
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        message as_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                        multichoice as_irules display "xxlarge" tcl { 
                            join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
                        }
                        optional ( intro.help == "max" ) {
							message as_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                        }
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table as_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message as_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running ActiveSync. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
            }
            yesno deploying_ad
			optional ( intro.help == "max" ) {
				message deploying_ad_help "Select whether you are deploying the BIG-IP system for Autodiscover at this time. You can always reconfigure this template at another time to add or remove Autodiscover from the configuration."
             }
            optional ( deploying_ad == "Yes" )    {
                message deploying_ad_prereq1 "To deploy Autodiscover, you must either create an 'SRV' record in DNS or create 'A' records in order for external clients to be able to make use of Autodiscover. See Additional Steps at the bottom of this template for more information."
                optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                        deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                    string ad_addr required display "xxlarge" validator "IpAddress" 
					optional ( intro.help == "max" ) {
						message deploying_ad_help1 "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the Autodiscover virtual server."
					}
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        message ad_irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

                        multichoice ad_irules display "xxlarge" tcl { 
                            join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
                        }
                        optional ( intro.help == "max" ) {
                        message ad_irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                        }
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table ad_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message ad_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
            }


            optional ( deployment_scenario.version == "Exchange Server 2010" ) {
                yesno deploying_rpc
				optional ( intro.help == "max" ) {
					message deploying_rpc_help "Select whether you are deploying the BIG-IP system for RPC Client Access (MAPI) at this time. You can always reconfigure this template at another time to add or remove RPC Client Access from the configuration."
				}
                optional ( deploying_rpc == "Yes" ) {
                    message deploying_rpc_prereq1 "You must enable and configure a Client Access Array in your Exchange Server site before RPC Client Access will function."
                    optional ( deploying_oa == "No") {
                        message deploying_rpc_prereq2 "You must deploy Outlook Anywhere in addition to RPC Client Access in order for Exchange Web Services (EWS) to function. EWS is required for Free/Busy lookups."
                    }
                    choice dynamic_static_ports display "xxlarge" {
                    "Use the default dynamic port range" => "Dynamic",
                    "Set Static ports" => "Static" 
                    }
                    optional ( intro.help == "max" ) {
						message dynamic_static_ports_help "The template needs to know whether you configured RPC Client Access with the default dynamic range of ports, or if you have configured your Client Access servers to use specific ports outside the default range."
					}
                    optional ( dynamic_static_ports == "Static" ) {
                        message dynamic_static_ports_prereq1 "You must configure each of your Client Access Servers to use the static ports that you specified here. See the Microsoft documentation for information on how to configure static RPC ports on an Exchange 2010 Client Access Server (http://social.technet.microsoft.com/wiki/contents/articles/configure-static-rpc-ports-on-an-exchange-2010-client-access-server.aspx)."
                        string mapi_port required validator "PortNumber" display "medium"
						optional ( intro.help == "max" ) {
							message mapi_port_help "Specify the port you configured (or will configure) on the Client Access Servers for MAPI."
						}
                        string address_book_port required validator "PortNumber" display "medium"
						optional ( intro.help == "max" ) {
							message address_book_port_help "Specify the port you configured (or will configure) on the Client Access Servers for the Address book."
						}
                    }

                    optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                            deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                        string rpc_addr required display "xxlarge" validator "IpAddress" 
						optional ( intro.help == "max" ) {
							message deploying_rpc_help1 "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the RPC Client Access virtual server."
						}
                    }
					optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                        table rpc_servers {
                            string addr required validator "IpAddress" display "large"
                            optional ( advanced_pool_settings == "Customize pool settings" ) {
                                string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                                optional ( lb_method_choice == "ratio-member" || 
                                    lb_method_choice == "ratio-node" || 
                                    lb_method_choice == "ratio-session" || 
                                    lb_method_choice == "ratio-least-connections-member" || 
                                    lb_method_choice == "ratio-least-connections-node" || 
                                    lb_method_choice == "dynamic-ratio-member" || 
                                    lb_method_choice == "dynamic-ratio-node" ) { 
                                    string ratio default "1" validator "NonNegativeNumber" display "small" 
                                }
                                optional ( use_pga == "yes" ) {
                                    string priority default "0" required
                                        validator "NonNegativeNumber" display "small" 
                                }
                            }
                        }
						optional ( intro.help == "max" ) {
							message rpc_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
						}
                    }
                }
            }
            noyes deploying_pop3
			optional ( intro.help == "max" ) {
				message deploying_pop3_help "Select whether you are deploying the BIG-IP system for POP3 at this time. You can always reconfigure this template at another time to add or remove POP3 from the configuration."
			}
            optional ( deploying_pop3 == "Yes" ) {
                message deploying_pop3_note "You must enable POP3 on each of your Exchange Client Access Servers before that service will be available. POP3 is not enabled by default on Exchange Client Access Servers."

                optional ((deployment_scenario.version == "Exchange Server 2010" &&
                deployment.reencrypt_2010 == "Do not re-encrypt (SSL Offload)") ||
                (deployment_scenario.version == "Exchange Server 2013" &&
                deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                    message deploying_pop3_note_ssloffload "Because you are offloading SSL, you must configure the Authentication properties for POP3 on each of your Exchange Client Access Servers to allow logins using plain text. By default, POP3 is configured to only allow secure (encrypted) logins."
                }
                optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                        deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                    string pop3_addr required display "xxlarge" validator "IpAddress"
                    optional ( intro.help == "max" ) {
                        message deploying_pop3_help1 "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the POP3 virtual server."
                    }
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table pop3_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message pop3_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
            }
            noyes deploying_imap4
			optional ( intro.help == "max" ) {
				message deploying_imap4_help "Select whether you are deploying the BIG-IP system for POP3 at this time. You can always reconfigure this template at another time to add or remove POP3 from the configuration."
			}
            optional ( deploying_imap4 == "Yes" ) {
                message deploying_imap4_note "You must enable IMAP4 on each of your Exchange Client Access Servers before that service will be available. IMAP4 is not enabled by default on Exchange Client Access Servers."

                optional ((deployment_scenario.version == "Exchange Server 2010" &&
                deployment.reencrypt_2010 == "Do not re-encrypt (SSL Offload)") ||
                (deployment_scenario.version == "Exchange Server 2013" &&
                deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                    message deploying_imap4_note_ssloffload "Because you are offloading SSL, you must configure the Authentication properties for IMAP4 on each of your Exchange Client Access Servers to allow logins using plain text. By default, IMAP4 is configured to only allow secure (encrypted) logins."
                }
                optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" && 
                        deployment.combined_or_seperate_ips == "Different IP addresses for different services" ) {
                    string imap4_addr required display "xxlarge" validator "IpAddress" 
                    optional ( intro.help == "max" ) {
                        message deploying_imap4_help1 "Because you chose different IP addresses for the different CAS services, specify the IP address you want the system to use for the IMAP4 virtual server."
					}
                }
                optional ( deployment.service_distribution == "Each service will be handled by a unique set of Client Access Servers" ) {
                    table imap4_servers {
                        string addr required validator "IpAddress" display "large"
                        optional ( advanced_pool_settings == "Customize pool settings" ) {
                            string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                            optional ( lb_method_choice == "ratio-member" || 
                                lb_method_choice == "ratio-node" || 
                                lb_method_choice == "ratio-session" || 
                                lb_method_choice == "ratio-least-connections-member" || 
                                lb_method_choice == "ratio-least-connections-node" || 
                                lb_method_choice == "dynamic-ratio-member" || 
                                lb_method_choice == "dynamic-ratio-node" ) { 
                                string ratio default "1" validator "NonNegativeNumber" display "small" 
                            }
                            optional ( use_pga == "yes" ) {
                                string priority default "0" required
                                    validator "NonNegativeNumber" display "small" 
                            }
                        }
                    }
					optional ( intro.help == "max" ) {
						message imap4_servers_help "Because you indicated that each CAS service is handled by a unique set of Client Access Servers, you must specify the IP address of the servers running Autodiscover. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
					}
                }
            }

            optional ( deployment.service_distribution == 
       "All services will be handled by the same set of Client Access Servers"
                  && (deploying_owa   == "Yes"
                  ||  deploying_oa    != "No"
                  ||  deploying_as    == "Yes"
                  ||  deploying_ad    == "Yes"
                  ||  deploying_rpc   == "Yes"
                  ||  deploying_pop3  == "Yes"
                  ||  deploying_imap4 == "Yes")) {
                table servers {
                    string addr required validator "IpAddress" display "large"
                    optional ( advanced_pool_settings == "Customize pool settings" ) {
                        string connection_limit default "0" required validator "NonNegativeNumber" display "small"
                        optional ( lb_method_choice == "ratio-member" || 
                            lb_method_choice == "ratio-node" || 
                            lb_method_choice == "ratio-session" || 
                            lb_method_choice == "ratio-least-connections-member" || 
                            lb_method_choice == "ratio-least-connections-node" || 
                            lb_method_choice == "dynamic-ratio-member" || 
                            lb_method_choice == "dynamic-ratio-node" ) { 
                            string ratio default "1" validator "NonNegativeNumber" display "small" 
                        }
                        optional ( use_pga == "yes" ) {
                            string priority default "0" required
                                validator "NonNegativeNumber" display "small" 
                        }
                    }
                }
				optional ( intro.help == "max" ) {
					message servers_addr_help "Specify the IP addresses of the Client Access Servers. Because you specified all services are handled by the same set of Client Access Servers, you only have to enter the IP addresses once. If you enabled TCP request queuing, you must specify a Connection Limit. If you enabled Priority Group Activation, you must specify a Priority."
				}
            }
        }

        section monitors {
            choice default_or_advanced display "xxlarge" default "Use advanced monitors" {
                "Use simple monitors",
                "Use advanced monitors"
            }
           optional ( intro.help == "max" ) {
				message advanced_monitor_description "Advanced monitors perform logins to the HTTP-based, POP3, and IMAP4 Client Access services in order to determine health status. Simple monitors do not perform logins, so while they are able to determine the status of the Client Access services, they do not attempt to login to the service and validate the response, and thus the BIG-IP system may not be able to completely determine status of Client Access services."
            }
            optional ( default_or_advanced == "Use advanced monitors" ) {

                message advanced_monitor_prereq1 "For advanced monitors to function correctly, you must configure at least one account and mailbox to use for monitoring. F5 recommends using two accounts with mailboxes located on separate Mailbox servers in your site. F5 further recommends that the accounts for those mailboxes have no other privileges in the domain and are set to have passwords that do not expire."
            }
            optional ( default_or_advanced == "Use advanced monitors" ) {
                optional ( services.deploying_oa != "No" || services.deploying_ad == "Yes") {                
                    string email display "xxlarge" required
                }
				optional ( intro.help == "max" ) {
					message email_help "Some of the advanced health monitors require a valid email address used specifically for monitoring purposes by the BIG-IP system. Type the email address you want the BIG-IP system to use in the advanced monitors. "
				}
                string username display "xxlarge" required
				optional ( intro.help == "max" ) {
					message username_help "Specify the mailbox account for use in the advanced monitors. This name corresponds to the Account Name field in Active Directory (rather than the email address)."
				}
                password passwd display "xxlarge" required
                string account_domain display "xxlarge" required
				optional ( intro.help == "max" ) {
					message account_domain_help "Type the Domain name for the user account. This domain can be entered in either FQDN (mydomain.example.com) or NetBIOS (MYDOMAIN) format."
				}
                choice second_mailbox_account display "xxlarge" default "Monitor a second mailbox (recommended)" {
                    "Monitor a second mailbox (recommended)",
                    "Monitor only one mailbox"
                }
				optional ( intro.help == "max" ) {
					message second_mailbox_account_help "Choose whether you want to monitor a second mailbox. We strongly recommend configuring a second mailbox account to be used by a second set of monitors, using a mailbox that is configured to reside on a different Mailbox server. The system only marks a Client Access service on a specific server down if both sets of credentials fail."
				}
                optional ( second_mailbox_account == "Monitor a second mailbox (recommended)" ) {
                    optional ( services.deploying_oa != "No" || services.deploying_ad == "Yes") {                
                        string second_email display "xxlarge" required
                    }
                    string second_username display "xxlarge" required
                    password second_passwd display "xxlarge" required
                    string second_account_domain display "xxlarge" required
                }
                optional ( services.deploying_owa == "Yes" && default_or_advanced == "Use advanced monitors" ) {
                    choice owa_auth_method display "xxlarge" default "OWA uses the default Forms-Based authentication" {
                        "OWA uses the default Forms-Based authentication",
                        "OWA uses Basic or Windows Integrated authentication"
                    }
                    optional ( owa_auth_method == "OWA uses the default Forms-Based authentication" ) {
                        message owa_auth_method_note "When using Forms-Based authentication, change the credential format required for OWA on each Exchange Client Access Server from the default domain and username format to just the username."
                    }
					optional ( intro.help == "max" ) {
						message owa_auth_method_help "Choose the authentication method you have configured for Outlook Web App. The health monitors will be customized to accommodate the authentication method you are using."
					}
                }
                string interval display "medium" default "30" required 
                optional ( intro.help == "max" ) {
                    message monitor_interval_max_help    "Specify how often the system should check the health of the servers. We recommend the default of 30 seconds. The maximum value for the interval is 28799 seconds."
                }
            }
            optional ( services.deploying_owa == "Yes" || 
                    services.deploying_oa == "Yes" || 
                    services.deploying_oa == "ews" || 
                    services.deploying_as == "Yes" || 
                    services.deploying_ad == "Yes"  ) {
                optional ( deployment.combined_or_seperate_ips == "Single IP address" ) {
                    choice using_single_domain display "xxlarge" default "One FQDN for all HTTP services" {
                        "One FQDN for all HTTP services",
                        "Different FQDNs for each HTTP service"
                    }
					optional ( intro.help == "max" ) {
						message using_single_domain_help "Select whether you are using one FQDN for all HTTP-based services or separate FQDNs for each service. The FQDN values are used for HTTP 1.1-based health monitors."
					}
                }
                optional ( deployment.combined_or_seperate_ips == "Single IP address" 
                        && using_single_domain == "One FQDN for all HTTP services" ) {
                    string single_domain display "xxlarge" required validator "FQDN"
                }
                optional ( deployment.combined_or_seperate_ips != "Single IP address" ||
                        (deployment.combined_or_seperate_ips == "Single IP address" 
                        && using_single_domain == "Different FQDNs for each HTTP service") ) {
                    optional ( services.deploying_owa == "Yes" ) {
                        string owa_domain display "xxlarge" required validator "FQDN"
                    }
                    optional ( services.deploying_oa == "Yes" ) {
                        string oa_domain display "xxlarge" required validator "FQDN"
                    }
                    optional ( services.deploying_oa == "ews" ) {
                        string ews_domain display "xxlarge" required validator "FQDN"
                    }
                    optional ( services.deploying_as == "Yes" ) {
                        string as_domain display "xxlarge" required validator "FQDN"
                    }
                    optional ( services.deploying_ad == "Yes" ) {
                        string ad_domain display "xxlarge" required validator "FQDN"
                    }
                }
            }
        }
    }

    optional ( intro.apm_provisioned == "yes" &&
        deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
        section edge_deployment {
            string addr required display "xxlarge" validator "IpAddress" display "large"
            optional ( intro.help == "max" ) {
				message addr_help "Specify the IP address you want to use for the BIG-IP Access Policy Manager virtual server. This is the address clients will use to access the HTTP-based Client Access services by way of the BIG-IP Access Policy Manager."
			}

            optional (deployment_scenario.version == "Exchange Server 2010") {
                choice reencrypt_2010 display "xxlarge"
                    default "Do not re-encrypt (SSL Offload)" {
                    "Re-encrypt (SSL Bridging)",
                    "Do not re-encrypt (SSL Offload)"
                }
            }
            optional (deployment_scenario.version == "Exchange Server 2013") {
                choice reencrypt_2013 display "xxlarge"
                    default "Re-encrypt (SSL Bridging)" {
                    "Re-encrypt (SSL Bridging)",
                    "Do not re-encrypt (SSL Offload)"
                }
            }
            message reencrypt_note "If you are deploying BIG-IP APM and forwarding traffic to a separate BIG-IP LTM, we generally recommend that you do not re-encrypt traffic between your BIG-IP APM and BIG-IP LTM because both BIG-IP systems must process the SSL transactions. However, if you do choose to re-encrypt, we strongly recommend you use a valid certificate (usually SAN-enabled) rather than the default, self-signed certificate for the Client SSL profile on your BIG-IP LTM system. If not re-encrypting traffic, you do not need a certificate on your BIG-IP LTM."

            choice client_ssl_profile display "xxlarge" default "/#create_new#" tcl {
                return "Create a new Client SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items ltm profile client-ssl]"
            }

            optional ( client_ssl_profile == "/#create_new#" ) {

                choice cert default "/Common/default.crt" display "xxlarge" tcl {
                         tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items -norecursive \
                         -filter NAME !~ ca-bundle.crt|f5-irule.crt \
                         sys file ssl-cert }
                optional ( intro.help == "max" ) {
                    message cert_help "Select the certificate the system uses for client-side SSL processing. Importing SSL certificates and keys is not a part of this template; see Local Traffic >> SSL Certificate List. To select any new certificates and keys you import, you need to restart or reconfigure this template to have them appear in the list."
                }
                choice key default "/Common/default.key" display "xxlarge" tcl {
                        tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items \
                        -norecursive sys file ssl-key }
                optional ( intro.help == "max" ) {
                    message key_help "Select the name of the associated SSL key."
                }
            }

            optional ((deployment_scenario.version == "Exchange Server 2010" &&
            reencrypt_2010 == "Re-encrypt (SSL Bridging)") ||
            (deployment_scenario.version == "Exchange Server 2013" &&
            reencrypt_2013 == "Re-encrypt (SSL Bridging)")) {

                choice server_ssl_profile display "xxlarge"
                        default "/#create_new#" tcl {
                    return "Create a new Server SSL profile\t/#create_new#\n[tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items ltm profile server-ssl]"
                }

                optional ( server_ssl_profile == "/#create_new#" ) {
                    choice insecure_compatible display "xxlarge" 
                        default "Self-signed or default certificate and key" {
                        "Self-signed or default certificate and key",
                        "Certificate Authority-provided certificate and key"
                    }
                }
				optional ( intro.help == "max" ) {
				message insecure_compatible_help "In order to determine the correct Secure Renegotiation setting on the Server SSL profile, the iApp needs to know if the remote BIG-IP LTM system to which this BIG-IP APM is forwarding traffic is using a default or self-signed certificate, or a certificate signed by a Certificate Authority. This question pertains to the certificate used by the remote BIG-IP LTM, NOT the certificates present and assigned on the local BIG-IP system you are configuring."
			}
            }
            string vs_addr required display "xxlarge" validator "IpAddress"
			 optional ( intro.help == "max" ) {
				message vs_addr_help "This is the IP address of the virtual server on the remote BIG-IP LTM which receives the Client Access traffic from this BIG-IP device. This BIG-IP APM sends traffic to this address after performing authentication."
			}
            choice lan_or_wan display "xxlarge" default "WAN" { "WAN", "LAN" }
			optional ( intro.help == "max" ) {
				message wan_lan_help "In order for the template to configure the proper TCP optimization settings, you must specify whether the majority of your Exchange clients will be connecting to the BIG-IP system over a WAN or a LAN."
			}

            optional ( deployment_scenario.version == "Exchange Server 2013" ) {
                choice restrict_eac_source display "xxlarge" default "No" {
                "Yes, restrict EAC access to specific client IP addresses or networks" => "Yes",
                "No, allow EAC access from all client IP addresses" => "No" 
                }
                optional ( intro.help == "max" ) {
                    message restrict_eac_source_help "With Exchange Server 2013, Exchange administration is performed using the Exchange Administration Center (EAC). The BIG-IP system can restrict access to the EAC to a specific group of IP addresses or networks for an additional layer of security."
                }
                optional ( restrict_eac_source == "Yes" ) {
                    table trusted {
                        string addr display "xlarge" required
                    }
                    optional ( intro.help == "max" ) {
                        message trusted_help "Specify the IP addresses or networks that should be allowed access to the EAC. Click Add to include additional IP addresses or networks."
                    }
                }
                choice restrict_eac_apm display "xxlarge" default "No" {
                    "Yes, restrict EAC access by group membership" => "Yes",
                    "No, do not restrict EAC access by group membership" => "No" }
                optional ( intro.help == "max" ) {
                    message restrict_eac_apm_help "Because you are deploying the BIG-IP APM, you can restrict Exchange Administration Center (EAC) access to members of Exchange 2013's Organizational Management group. The BIG-IP APM module queries Active Directory group membership and the BIG-IP APM policy allows or denies access based on membership."
                }
            }

            optional ( intro.is_bigip_11_3 == "1" ) {
                choice oa_ntlm_auth display "xxlarge" default "No" {
                    "Outlook Anywhere clients use NTLM authentication" => "Yes",
                    "Outlook Anywhere not used or clients use Basic auth" => "No" }
				optional ( intro.help == "max" ) {
						message oa_ntlm_auth_help "The BIG-IP APM v11.3 and later supports Outlook Anywhere clients using NTLM authentication, as well as Basic Authentication.  Choose which authentication method your Outlook Anywhere clients are using.  "
				}
                optional ( oa_ntlm_auth == "Yes" ) {
                    message oa_ntlm_auth_warning1 "Before completing this section, you must create an NTLM Machine Account object on the BIG-IP system to join this system to the Active Directory domain. Creating an NTLM Machine Account is not a part of this template, see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List. You must also create a user account in the same domain that has been properly configured for NTLM delegation."
                    message oa_ntlm_auth_warning2 "To use client NTLM authentication, you must correctly configure Kerberos delegation in the Active Directory domain where Outlook Anywhere users will be authenticated. See the Deployment Guide for complete details on configuring NTLM authentication for Outlook Anywhere."
                    choice ntlm_machine_account display "xxlarge" tcl { 
                        tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items -nocomplain apm ntlm machine-account
                    }
                    optional ( intro.help == "max" ) {
						message ntlm_machine_account_help "The Machine Account creates a computer account for this BIG-IP system in your Active Directory domain. If you do not see any items in this list, you must exit this template and create the NTLM Machine Account before it appears. See see Access Policy>> Access Profiles: NTLM: NTLM Machine Account List."
                    }
                    string ntlm_kdc required display "xxlarge" validator "IpOrFqdn"
					optional ( intro.help == "max" ) {
						message ntlm_kdc_help "Specify the IP address or fully qualified domain name of the Kerberos Key Distribution Center (KDC). "
					}
                    message ntlm_kdc_warning "If using an FQDN for the Key Distribution Center, the BIG-IP system must be able to resolve the IP address of the KDC using DNS."
                    string ntlm_realm display "xxlarge" required
					optional ( intro.help == "max" ) {
						message ntlm_realm_help "Specify the Kerberos realm, such as MYDOMAIN.COM."
					}
                    string ntlm_user display "xxlarge" required
                    optional ( intro.help == "max" ) {
                        message ntlm_user_help "This is the user account in Active Directory you should have created prior to beginning the template.  This account must be correctly configured in Active Directory for Kerberos delegation.  See the Deployment Guide for more information."
                    }
                    password ntlm_passwd display "xxlarge" required
					optional ( intro.help == "max" ) {
                        message ntlm_passwd_help "Specify the password associated with the Active Directory user account."
                    }
                }
            }

            message irule_1_note "Improper use or misconfiguration of an iRule can result in unwanted application behavior and poor performance of your BIG-IP system. For this reason we recommended you verify the impact of an iRule prior to deployment in a production environment."

            multichoice irules display "xxlarge" tcl { 
                join [tmsh::run_proc f5.iapp.1.1.0.cli:iapp_get_items / ltm rule] "\n"
            }
            optional ( intro.help == "max" ) {
                message irule_2_note "The BIG-IP system supports a scripting language to allow an administrator to instruct the system to intercept, inspect, transform, direct and track inbound or outbound application traffic. An iRule contains the set of instructions the system uses to process data flowing through it, either in the header or payload of a packet."
                }

        }
    }
    section postreq {
        message postreq_1 "You must configure a DNS entry for each fully qualified host name that clients will use for Client Access services. Each DNS record must resolve to the corresponding IP address you configured for the virtual server assigned to each service."
        optional ( ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
            deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) && ( services.deploying_ad == "Yes" ) ) {
            message autodiscover_dns "In order for external clients to be able to make use of Autodiscover, you must either create an 'SRV' record in DNS or create 'A' records."
            message autodiscover_dns_srv "An SRV record must take the form '_autodiscover._tcp.example.com', port 443, and must resolve to a fully-qualified domain name that is valid for the certificate and key you have installed on the BIG-IP system and that resolves to the IP address you have configured for your virtual server."
            message autodiscover_dns_a "If you do not want to use an 'SRV' record, then you must have 'A' records for either 'autodiscover.<yourdomain>' or '<yourdomain>' that resolve to the IP address you have designated for your Autodiscover virtual server."
        }
        optional ( deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
            message autodiscover_dns_edge "If you are deploying Autodiscover, you must either create an 'SRV' record in DNS or create 'A' records in order for external clients to be able to make use of the service."
            message autodiscover_dns_srv_edge "An SRV record must take the form '_autodiscover._tcp.example.com', port 443, and must resolve to a fully-qualified domain name that is valid for the certificate and key you have installed on the BIG-IP system and that resolves to the IP address you have configured for your virtual server."
            message autodiscover_dns_a_edge "If you do not want to use an 'SRV' record, then you must have 'A' records for either 'autodiscover.<yourdomain>' or '<yourdomain>' that resolve to the IP address you have designated for your Autodiscover virtual server."
        }  
		optional ( ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
            deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) && ( services.deploying_oa == "Yes" ) ) {
            message outlookanywhere_dns "To prevent internal users from receiving a password prompt, your internal DNS must not have an 'A' record for the FQDN for Outlook Anywhere."
        }
        message configure_cas "You may have to perform additional steps before your Client Access Server become available."

        # Start of LTM, LTM+APM, and LTM behind Edge Gateway or APM postreq section.
        optional ( deployment_scenario.scenario == "LTM will load balance and optimize CAS traffic" ||
            deployment_scenario.scenario == "LTM will receive HTTP-based CAS traffic forwarded by a BIG-IP Edge Gateway or APM" ) {

                optional ((deployment_scenario.version == "Exchange Server 2010" &&
                deployment.reencrypt_2010 == "Do not re-encrypt (SSL Offload)") ||
                (deployment_scenario.version == "Exchange Server 2013" &&
                deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                    message ssloffload "You have to enable SSL Offloading on your Client Access Servers. See Microsoft's documentation at http://social.technet.microsoft.com/wiki/contents/articles/how-to-configure-ssl-offloading-in-exchange-2010.aspx."
                }
                optional ( services.deploying_oa == "Yes" ) {
                    message oa_note "You must enable Outlook Anywhere on your Client Access Servers before the service will be available. Outlook Anywhere is not enabled by default on Exchange Client Access Servers."
                }
                optional ( services.deploying_rpc == "Yes" ) {
                    message rpc_note "You must enable and configure a Client Access Array in your Exchange Server site before RPC Client Access will function. Additional information on configuring an RPC Client Access array is on the Help tab; further details are in F5's Deployment Guide for Exchange Server 2010, and more complete documentation is at Microsoft's TechNet site at http://technet.microsoft.com/en-us/library/ee332317.aspx"
                }
                optional ( services.dynamic_static_ports == "Static" ) {
                    message rpc_ports_note "You must configure each of your Client Access Servers to use the static ports you specified for RPC Client Access in this template."
                }
                optional ( services.deploying_pop3 == "Yes" ) {
                    message pop3_note "You must enable POP3 on your Client Access Servers before the service will be available."

                        optional
                ((deployment_scenario.version == "Exchange Server 2010" &&
                deployment.reencrypt_2010 == "Do not re-encrypt (SSL Offload)") ||
                (deployment_scenario.version == "Exchange Server 2013" &&
                deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                        message pop3_note_ssloffload "You must configure the Authentication properties for POP3 on each of your Exchange Client Access Servers to allow logins using plain text."
                    }
                }
                optional ( services.deploying_imap4 == "Yes") {
                    message imap4_note "You must enable IMAP4 on your Client Access Servers before the service will be available."

                        optional
                ((deployment_scenario.version == "Exchange Server 2010" &&
                deployment.reencrypt_2010 == "Do not re-encrypt (SSL Offload)") ||
                (deployment_scenario.version == "Exchange Server 2013" &&
                deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                            message imap4_note_ssloffload "You must configure the Authentication properties for IMAP4 on each of your Exchange Client Access Servers to allow logins using plain text."
                        }
                }
                optional ( monitors.default_or_advanced == "Use advanced monitors" ) {
                    optional ( monitors.second_mailbox_account == "Monitor a second mailbox (recommended)" ) {
                        message multi_mailbox_note "Until you configure user accounts and associated mailboxes that match the information you provided in this template for monitor configuration, your Client Access services will not be available. For maximum reliability, F5 recommends you configure the two mailboxes to be on separate Exchange Mailbox servers."
                    }
                    optional ( monitors.second_mailbox_account == "Monitor only one mailbox" ) {
                        message one_mailbox_note "Until you configure a user account and associated mailbox that match the information you provided in this template for monitor configuration, your Client Access services will not be available."
                    }
                }
                optional ( monitors.owa_auth_method == "OWA uses the default Forms-Based authentication" ) {
                    message owa_fba_note "Because you are using Forms-Based authentication for OWA, you must change the credential format required for OWA on each Exchange Client Access Server from the default domain and username format to just the username."
                }
                optional (deployment.cert == "/Common/default.crt" || 
                    deployment.cert == "/Common/f5-irule.crt" || 
                    deployment.cert == "/Common/ca-bundle.crt" || 
                    deployment.key == "/Common/default.key" ) {
                    message insecure_ssl_key_or_cert "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used for your Client Access Servers. See Local Traffic >> SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
                }
        }
        # end of LTM, LTM+APM and LTM behind Edge Gateway or APM postreq section

        # start of Edge Gateway postreq section
        optional ( deployment_scenario.scenario == "BIG-IP Edge Gateway or APM will provide secure remote access to CAS" ) {
            message owa_fba_edge_note "You must configure OWA to use Forms-Based authentication (the default method). However, you must change the credential format required for OWA on each Exchange Client Access Server from the default domain and username format to just the username."

            optional ((deployment_scenario.version == "Exchange Server 2010" &&
            edge_deployment.reencrypt_2010 == "Do not re-encrypt (SSL Offload)") ||
            (deployment_scenario.version == "Exchange Server 2013" &&
            edge_deployment.reencrypt_2013 == "Do not re-encrypt (SSL Offload)")) {
                message ssloffload_edge "You have to enable SSL Offloading on your Client Access Servers. See Microsoft's documentation at http://social.technet.microsoft.com/wiki/contents/articles/how-to-configure-ssl-offloading-in-exchange-2010.aspx."
            }
            optional ( edge_deployment.cert == "/Common/default.crt" || 
                edge_deployment.cert == "/Common/ca-bundle.crt" || 
                edge_deployment.cert == "/Common/f5-irule.crt" || 
                edge_deployment.key == "/Common/default.key") {
                    message insecure_ssl_key_or_cert_edge "You have selected a default BIG-IP certificate and/or key. This application service configuration is incomplete and will not be secure until you import and assign a trusted certificate and key that are valid for all fully qualified domain names used for your Client Access Servers. See Local Traffic >> SSL Certificate List for importing certificates and keys. To select any new certificates and keys you import, you need to restart or reconfigure this template."
            }    
        }
        # end of Edge Gateway postreq section

        # common section with messages for all scenarios
        message troubleshooting "You can find common troubleshooting tips on the Help tab or in the deployment guide."
    }
}
text {
    intro "Welcome to the Microsoft Exchange 2010 and 2013 Client Access template"

    intro.hello "Introduction"
    intro.hello2 ""
    intro.hello3 ""
    intro.hello4 ""
    intro.check_for_updates "Check for updates"
    intro.sorry "We're sorry"
    intro.analytics_opportunity "Additional features available"
    intro.wa_opportunity "Additional features available"
    intro.prereqs_1 "Prerequisites"
    intro.prereqs_2 ""
    intro.help "Do you want to see inline help?"

    deployment_scenario "Deployment Scenario"
    deployment_scenario.scenario "Which scenario describes how you will use the BIG-IP system?"
    deployment_scenario.scenario_1_help ""
    deployment_scenario.scenario_1_max_help ""
    deployment_scenario.scenario_2_help ""
    deployment_scenario.scenario_3_help ""
    deployment_scenario.apm_warning "CRITICAL"
    deployment_scenario.scenario_3_max_help ""
    deployment_scenario.version "Which version of Exchange are you using?"
    deployment_scenario.version_help_2010_1 ""
    deployment_scenario.version_help_2013_1 ""

    analytics "Analytics"
    analytics.add_analytics "Do you want to enable Analytics to view application statistics?"
	analytics.about_analytics ""
    analytics.about_analytics_profiles ""
    analytics.important_analytics_profiles "IMPORTANT"
    analytics.create_new_analytics "Use the default Analytics profile or select a custom profile?"
    analytics.analytics_profile "Which Analytics profile do you want to use?"

    apm "BIG-IP Access Policy Manager"
    apm.deploying_apm "Provide secure authentication to CAS HTTP-based services with BIG-IP Access Policy Manager?"
    apm.fqdn "If you are deploying Outlook Web App (OWA), what is the FQDN that will be used to access OWA? (e.g. owa.example.com)"
	apm.about_apm_help ""
    apm.active_directory_server "Which Active Directory server IP address in your domain can this BIG-IP system contact?"
    apm.active_dir_servers "Which Active Directory servers in your domain can this BIG-IP system contact?"
    apm.active_dir_servers.fqdn "FQDN"
    apm.active_dir_servers.addr "IP"
	apm.apm_single_help ""
	apm.apm_binding_help ""
	apm.apm_ad_username_help ""
	apm.apm_multiple_help ""
    apm.login_domain "What is the FQDN of the Active Directory domain for your Exchange users?"
	apm.login_domain_help ""
    apm.allow_anonymous_binding "Does your Active Directory domain allow anonymous binding?" 
    apm.ad_username "Which Active Directory user with administrative permissions do you want to use?"
    apm.ad_password "What is the password associated with that account?"
    apm.provision_warning "IMPORTANT"
    apm.ad_monitor "How do you want to handle health monitoring for this pool?"
    apm.ad_monitor_help ""
    apm.ad_monitor_choice "Which monitor do you want to use?"
    apm.ad_monitor_user "Which Active Directory user name should the monitor use?"
    apm.ad_monitor_user_critical "CRITICAL"
    apm.ad_monitor_password "What is the associated password?"
    apm.ad_monitor_tree "What is the LDAP tree for this user account?"
    apm.ad_monitor_tree_info ""
    apm.ad_monitor_secure "Does your Active Directory domain require a secure protocol for communication?"
    apm.ad_monitor_secure_info ""
    apm.ad_monitor_interval "How many seconds between Active Directory health checks?"
    apm.ad_monitor_interval_info ""

    deployment "Tell us about your deployment"
    deployment.incoming_encrypted "Will incoming traffic arrive at this BIG-IP system encrypted or unencrypted?"
    deployment.incoming_encrypted_prereq1 "IMPORTANT"
    deployment.incoming_encrypted_prereq2 ""
    deployment.incoming_encrypted_prereq3 ""
	deployment.incoming_encrypted_lb_help ""
	deployment.incoming_encrypted_rec_help ""
	deployment.cert_help ""
	deployment.key_help ""
	deployment.reencrypt_help ""
	deployment.reencrypt_warning ""
    deployment.reencrypt_2010 "Do you want to re-encrypt this traffic to your Client Access Servers?"
    deployment.reencrypt_2013 "Do you want to re-encrypt this traffic to your Client Access Servers?"
    deployment.encrypt "Do you want to encrypt the traffic to your Client Access Servers?"
    deployment.client_ssl_profile "Which Client SSL profile do you want to use?"
    deployment.server_ssl_profile "Which Server SSL profile do you want to use?"
    deployment.lan_or_wan "Will clients be connecting to this BIG-IP LTM virtual server primarily over a LAN or a WAN?"
	deployment.wan_lan_help ""
    deployment.cert "Which SSL certificate do you want to use?"
    deployment.key "Which SSL key do you want to use?"
    deployment.location "Where will your BIG-IP virtual servers be in relation to your Client Access Servers?"
	deployment.location_help ""
	deployment.location_help1 ""
    deployment.snat "How have you configured routing on your Client Access Servers?"
	deployment.snat_help ""
    deployment.automap_or_pool "What is the maximum number of concurrent users you expect per Client Access Server?"
	deployment.snatpool_help ""
    deployment.snatpool_message ""
    deployment.snatpool_members "Which IP addresses do you want to use for the SNAT pool?"
    deployment.snatpool_members.addr "IP address"    
    deployment.combined_or_seperate_ips "Do you want to use a single IP address for all Client Access Server connections?"
	deployment.combined_or_seperate_ips_help ""
    deployment.service_distribution "How are you distributing the CAS protocols between servers?"
	deployment.service_distribution_help ""

    services "Tell us about which services you are deploying"
    services.combined_addr "What IP address do you want to use for your virtual servers?"
	services.combined_addr_help ""
    services.servers "What are the IP addresses of your Client Access Servers?"
	services.servers_addr_help ""
    services.servers.addr "IP address"
    services.servers.ratio "Ratio"
    services.servers.connection_limit "Connection Limit"
    services.servers.priority "Priority"
    services.advanced_pool_settings "Do you want to customize your server pool settings?"
	services.advanced_pool_settings_help ""
    services.lb_method_choice "Which load balancing method do you want to use?"
	services.lb_method_choice_help ""
    services.use_pga "Do you want to give priority to specific groups of servers?" 
	services.use_pga_help ""
    services.min_active_members "What is the minimum number of active members in a group?"
	services.min_active_members_help ""
    services.tcp_request_queuing_enable_question "Do you want the BIG-IP system to queue TCP requests?"
	services.tcp_request_queuing_enable_question_help ""
    services.note "IMPORTANT"
    services.tcp_request_queue_length "What is the maximum number of TCP requests for the queue?"
    services.tcp_request_queue_timeout "How many milliseconds should requests remain in the queue?"
    services.restrict_eac_source "Do you want to restrict Exchange Administration Center access by IP address or network?"
	services.restrict_eac_source_help ""
    services.trusted "What IP or network addresses should be allowed EAC access?"
	services.trusted_help ""
    services.trusted.addr "IP or Network"
    services.restrict_eac_apm "Should BIG-IP APM restrict EAC access to members of the Exchange Organization Management Security Group?"
	services.restrict_eac_apm_help ""
    services.deploying_owa "Are you deploying Outlook Web App (includes ECP)?"
	services.deploying_owa_help ""
    services.owa_addr "What IP address do you want to use for the OWA virtual server?"
	services.owa_addr_help ""
    services.owa_servers "What are the IP addresses of your OWA servers?"
    services.owa_servers.addr "IP address"    
    services.owa_servers.ratio "Ratio"
    services.owa_servers.connection_limit "Connection Limit"
    services.owa_servers.priority "Priority"
	services.owa_servers_help ""
    services.deploying_oa "Are you deploying Outlook Anywhere, EWS and OAB (or EWS only)?"
	services.deploying_oa_help ""
	services.deploying_oa_help1 ""
    services.deploying_oa_prereq1 "IMPORTANT"
    services.deploying_oa_prereq2 ""
    services.oa_addr "What IP address do you want to use for the Outlook Anywhere virtual server?"
    services.oa_servers "What are the IP addresses of your Outlook Anywhere servers?"
	services.oa_servers_help ""
    services.oa_servers.addr "IP address"
    services.oa_servers.ratio "Ratio"
    services.oa_servers.connection_limit "Connection Limit"
    services.oa_servers.priority "Priority"
    services.oa_ntlm_auth "Which type of authentication do Outlook Anywhere clients use?"
	services.oa_ntlm_auth_help ""
    services.oa_ntlm_auth_warning1 "CRITICAL"
    services.oa_ntlm_auth_warning2 ""
    services.ntlm_machine_account "Which NTLM machine account should be used for Kerberos delegation?"
    services.ntlm_machine_account_help ""
    services.ntlm_kdc "What is the Kerberos Key Distribution Center IP or FQDN?"
	services.ntlm_kdc_help ""
    services.ntlm_kdc_warning "IMPORTANT"
    services.ntlm_realm "What is the name of the Kerberos Realm?"
	services.ntlm_realm_help ""
    services.ntlm_user "What is the user name for the Active Directory delegation account you created?"
    services.ntlm_user_help ""
    services.ntlm_passwd "What is the associated password?"
    services.ntlm_spn_pattern "How do  you want to construct the Kerberos ticket request?"
	services.ntlm_spn_pattern_help ""
    services.ntlm_dns_lookup_warning "IMPORTANT"
    services.ntlm_host_header_warning "IMPORTANT"
    services.deploying_ews_warning1 ""
    services.deploying_ews_warning2 ""
    services.ews_addr "What IP address do you want to use for the Exchange Web Services virtual server?"
	services.deploying_ews_help ""
    services.ews_servers "What are the IP addresses of your EWS servers?"
	services.ews_servers_help ""
    services.ews_servers.addr "IP address"
    services.ews_servers.ratio "Ratio"
    services.ews_servers.connection_limit "Connection Limit"
    services.ews_servers.priority "Priority"
    services.deploying_as "Are you deploying ActiveSync?"
	services.deploying_as_help ""
    services.as_addr "What IP address do you want to use for the ActiveSync virtual server?"
	services.deploying_as_help1 ""
    services.as_servers "What are the IP addresses of your ActiveSync servers?"
	services.as_servers_help ""
    services.as_servers.addr "IP address"
    services.as_servers.ratio "Ratio"
    services.as_servers.connection_limit "Connection Limit"
    services.as_servers.priority "Priority"
    services.deploying_ad "Are you deploying Autodiscover?"
	services.deploying_ad_help ""
    services.deploying_ad_prereq1 "CRITICAL"
    services.ad_addr "What IP address do you want to use for the Autodiscover virtual server?"
	services.deploying_ad_help1 ""
    services.ad_servers "What are the IP addresses of your Autodiscover servers?"
	services.ad_servers_help ""
    services.ad_servers.addr "IP address"
    services.ad_servers.ratio "Ratio"
    services.ad_servers.connection_limit "Connection Limit"
    services.ad_servers.priority "Priority"
    services.deploying_rpc "Are you deploying RPC Client Access (MAPI)?"
	services.deploying_rpc_help ""
    services.deploying_rpc_prereq1 "CRITICAL"
    services.deploying_rpc_prereq2 "CRITICAL"
    services.rpc_addr "What IP address do you want to use for the RPC Client Access virtual server?"
	services.deploying_rpc_help1 ""
    services.dynamic_static_ports "Use the default dynamic range of ports for RPC Client Access traffic or set static ports?"
	services.dynamic_static_ports_help ""
    services.dynamic_static_ports_prereq1 "IMPORTANT"
    services.mapi_port "Which port will you use for MAPI?"
	services.mapi_port_help ""
    services.address_book_port "Which port will you use for the Address Book?"
	services.address_book_port_help ""
    services.rpc_servers "What are the IP addresses of your RPC Client Access Servers?"
	services.rpc_servers_help ""
    services.rpc_servers.addr "IP address"
    services.rpc_servers.ratio "Ratio"
    services.rpc_servers.connection_limit "Connection Limit"
    services.rpc_servers.priority "Priority"
    services.deploying_pop3 "Are you deploying POP3?"
	services.deploying_pop3_help ""
    services.deploying_pop3_note "IMPORTANT"
    services.deploying_pop3_note_ssloffload ""
    services.pop3_addr "What IP address do you want to use for the POP3 virtual server?"
	services.deploying_pop3_help1 ""
    services.pop3_servers "What are the IP addresses of your POP3 servers?"
	services.pop3_servers_help ""
    services.pop3_servers.addr "IP address"
    services.pop3_servers.ratio "Ratio"
    services.pop3_servers.connection_limit "Connection Limit"
    services.pop3_servers.priority "Priority"
    services.deploying_imap4 "Are you deploying IMAP4?"
	services.deploying_imap4_help ""
    services.deploying_imap4_note "IMPORTANT"
    services.deploying_imap4_note_ssloffload ""
    services.imap4_addr "What IP address do you want to use the IMAP4 virtual server?"
	services.deploying_imap4_help1 ""
    services.imap4_servers "What are the IP addresses of your IMAP4 servers?"
	services.imap4_servers_help ""
    services.imap4_servers.addr "IP address"
    services.imap4_servers.ratio "Ratio"
    services.imap4_servers.connection_limit "Connection Limit"
    services.imap4_servers.priority "Priority"
    services.combined_irule_1_note "IMPORTANT"
    services.combined_irule_2_note ""
    services.combined_irules "Do you want to add any iRules to this combined virtual server?"
    services.owa_irule_1_note "IMPORTANT"
    services.owa_irule_2_note ""
    services.owa_irules "Do you want to add any custom iRules to this virtual server?"
    services.oa_irule_1_note "IMPORTANT"
    services.oa_irule_2_note ""
    services.oa_irules "Do you want to add any custom iRules to this virtual server?"
    services.ews_irule_1_note "IMPORTANT"
    services.ews_irule_2_note ""
    services.ews_irules "Do you want to add any custom iRules to this virtual server?"
    services.as_irule_1_note "IMPORTANT"
    services.as_irule_2_note ""
    services.as_irules "Do you want to add any custom iRules to this virtual server?"
    services.ad_irule_1_note "IMPORTANT"
    services.ad_irule_2_note ""
    services.ad_irules "Do you want to add any custom iRules to this virtual server?"

    monitors "Server Health Monitors"
    monitors.monitor_interval_max_help ""
    monitors.interval "How many seconds should pass between health checks?"
    monitors.default_or_advanced "Do you want to use advanced or simple server health monitors?"
    monitors.advanced_monitor_description ""
    monitors.advanced_monitor_prereq1 "IMPORTANT"
    monitors.email "What email address do you want to use for the advanced monitors?"
	monitors.email_help ""
    monitors.username "Which mailbox account should be used for monitors?"
	monitors.username_help ""
    monitors.passwd "What is the password for that mailbox account?"
    monitors.second_mailbox_account "Do you want to monitor a second mailbox?"
	monitors.second_mailbox_account_help ""
    monitors.second_email "What email address do you want to use for the second advanced monitor?"
    monitors.second_username "Which mailbox account should be used for the second monitors?"
    monitors.second_passwd "What is the password for that mailbox account?"
    monitors.account_domain "What is the domain name of the user account for the monitors?" 
	monitors.account_domain_help ""
    monitors.second_account_domain "What is the domain name of the user account for the second monitors?"
    monitors.owa_auth_method "Which authentication method have you configured for OWA?"
	monitors.owa_auth_method_help ""
    monitors.owa_auth_method_note "IMPORTANT"
    monitors.using_single_domain "Are you using the same FQDN for all HTTP-based services?"
	monitors.using_single_domain_help ""
    monitors.single_domain "What is the FQDN for your HTTP-based CAS services?"
    monitors.owa_domain "What is the FQDN for your OWA service?"
    monitors.oa_domain "What is the FQDN for your Outlook Anywhere service?"
    monitors.ews_domain "What is the FQDN for your Exchange Web Services?"
    monitors.as_domain "What is the FQDN for your ActiveSync service?"
    monitors.ad_domain "What is the FQDN for your Autodiscover service?"

    edge_deployment "Tell us about your BIG-IP Access Policy Manager deployment"
    edge_deployment.addr "What IP address do you want to use for the BIG-IP APM virtual server?"
    edge_deployment.addr_help ""
    edge_deployment.cert "Which SSL certificate do you want to use?"
	edge_deployment.cert_help ""
    edge_deployment.key "Which SSL key do you want to use?"
	edge_deployment.key_help ""
    edge_deployment.reencrypt_2010 "Do you want to re-encrypt the traffic that will be forwarded to your BIG-IP LTM?"
    edge_deployment.reencrypt_2013 "Do you want to re-encrypt the traffic that will be forwarded to your BIG-IP LTM?"
    edge_deployment.reencrypt_note "IMPORTANT"
    edge_deployment.client_ssl_profile "Which Client SSL profile do you want to use?"
    edge_deployment.server_ssl_profile "Which Server SSL profile do you want to use?"
    edge_deployment.insecure_compatible "Is the remote BIG-IP LTM receiving this traffic using a self-signed or default certificate for decryption, or is the certificate signed by a CA?"
	edge_deployment.insecure_compatible_help ""
    edge_deployment.vs_addr "What is the virtual IP address on the remote BIG-IP system to which you will forward traffic?"
	edge_deployment.vs_addr_help ""
    edge_deployment.lan_or_wan "Will clients be connecting to this BIG-IP virtual server primarily over a LAN or a WAN?"
	edge_deployment.wan_lan_help ""

    edge_deployment.restrict_eac_source "Do you want to restrict Exchange Administration Center access by IP address or network?"
	edge_deployment.restrict_eac_source_help ""
    edge_deployment.trusted "What IP or network addresses should be allowed EAC access?"
	edge_deployment.trusted_help ""
    edge_deployment.trusted.addr "IP or Network"
    edge_deployment.restrict_eac_apm "Should BIG-IP APM restrict EAC access to members of the Exchange Organization Management Security Group?"
	edge_deployment.restrict_eac_apm_help ""

    edge_deployment.oa_ntlm_auth "Which type of authentication do Outlook Anywhere clients use?"
	edge_deployment.oa_ntlm_auth_help ""
    edge_deployment.oa_ntlm_auth_warning1 "CRITICAL"
    edge_deployment.oa_ntlm_auth_warning2 ""
    edge_deployment.ntlm_machine_account "Which NTLM machine account should be used for Kerberos delegation?"
    edge_deployment.ntlm_machine_account_help ""
    edge_deployment.ntlm_kdc "What is the Kerberos Key Distribution Center IP or FQDN?"
	edge_deployment.ntlm_kdc_help ""
    edge_deployment.ntlm_kdc_warning "IMPORTANT"
    edge_deployment.ntlm_realm "What is the name of the Kerberos Realm?"
	edge_deployment.ntlm_realm_help ""
    edge_deployment.ntlm_user "What is the user name for the Active Directory delegation account you created?"
    edge_deployment.ntlm_user_help ""
    edge_deployment.ntlm_passwd "What is the associated password?"
	edge_deployment.ntlm_passwd_help ""
    edge_deployment.irules "Do you want to add any custom iRules to this configuration?"
    edge_deployment.irule_1_note "IMPORTANT"
    edge_deployment.irule_2_note ""


    postreq "Additional Steps"
    postreq.postreq_1 "Modifying your DNS Settings"
    postreq.autodiscover_dns ""
    postreq.autodiscover_dns_srv ""
    postreq.autodiscover_dns_a ""
    postreq.autodiscover_dns_edge ""
    postreq.autodiscover_dns_srv_edge ""
    postreq.autodiscover_dns_a_edge ""
	postreq.outlookanywhere_dns ""
    postreq.configure_cas "Configure your Client Access Servers"
    postreq.ssloffload ""
    postreq.ssloffload_edge ""
    postreq.oa_note ""
    postreq.rpc_note ""
    postreq.rpc_ports_note ""
    postreq.pop3_note ""
    postreq.pop3_note_ssloffload ""
    postreq.imap4_note ""
    postreq.imap4_note_ssloffload ""
    postreq.multi_mailbox_note ""
    postreq.one_mailbox_note ""
    postreq.owa_fba_note ""
    postreq.owa_fba_edge_note ""
    postreq.insecure_ssl_key_or_cert "CRITICAL"
    postreq.insecure_ssl_key_or_cert_edge "CRITICAL"
    postreq.troubleshooting "Troubleshooting"
}
            }
            role-acl { admin manager resource-admin }
            run-as none
        }
    }
    description none
    ignore-verification false
    requires-bigip-version-max none
    requires-bigip-version-min none
    requires-modules none
    signing-key none
    tmpl-checksum none
    tmpl-signature none
[END]
