'''
Created on Apr 20, 2017

@author: jono
'''
import re
import logging
import traceback
import time
from nose.plugins.skip import SkipTest
from nose.plugins.attrib import get_method_attr
from nose.suite import ContextSuite
from . import ExtendedPlugin
from ...base import AttrDict, enum
from ...interfaces.testcase import ContextHelper
from ...interfaces.testrail import TestRailInterface
from .known_issue import KnownIssueTest
from .report import nose_selector


LOG = logging.getLogger(__name__)
TC_TYPE = enum(automated=3, other=7)
TEMPLATE = enum(text=1, steps=2, exploratory=3)
PRIORITY = enum(medium=2)
PRODUCT = enum(bigip=1, bigiq=2, em=3)
STATUS = enum(passed=1, blocked=2, failed=5, skip=6)


class TestRail(ExtendedPlugin):
    """
    TestRail binding plugin.
    """
    enabled = False

    def options(self, parser, env):
        """Register commandline options."""
        parser.add_option('--with-testrail', action='store_true',
                          help="Enable testrail plugin. (default: no)")

    def configure(self, options, noseconfig):
        """ Call the super and then validate and call the relevant parser for
        the configuration file passed in """
        super(TestRail, self).configure(options, noseconfig)
        if not self.enabled:
            return

        self.context = ContextHelper()
        cfgifc = self.context.get_config()
        self.session = cfgifc.get_session()
        self.api = TestRailInterface(options.url, options.user, options.key).open()

        projects = dict((x.name, x.id) for x in self.api.get_projects())
        self.project_id = projects.get(options.project)
        assert self.project_id, "Unable to find project: %s" % options.project

        suites = dict((x.name, x.id) for x in self.api.get_suites(self.project_id))
        self.suite_id = suites.get(options.suite)
        assert self.suite_id, "Unable to find project: %s" % options.project

        # Setup local caches for cases, sections for the current project/suite.
        self.cases = dict((x.title, x.id) for x in self.api.get_cases(self.project_id,
                                                                      self.suite_id))
        self.sections = dict((x.name, x.id) for x in self.api.get_sections(self.project_id,
                                                                           self.suite_id))
        self.run_id = None  # Not yet started
        self.plan_id = None
        self.case_ids = []

    def get_or_create_section(self, test):
        """Gets or creates a section. Returns the section_id."""
        address = nose_selector(test)
        if ':' not in address:
            return
        context, _ = address.split(':')
        last_section = 0
        for s in context.split('.'):
            if s not in self.sections:
                params = AttrDict()
                params.name = s
                params.description = 'autogenerated'
                params.suite_id = self.suite_id
                if last_section:
                    params.parent_id = last_section
                section = self.api.add_section(self.project_id, params)
                last_section = section_id = section.id
                self.sections[section.name] = section_id
            else:
                last_section = section_id = self.sections[s]

        return section_id

    def get_test_metadata(self, test):
        TEST_ATTRIBUTES = ('author', 'rank')

        klass = test.context if isinstance(test, ContextSuite) else test.test
        if hasattr(klass, '_testMethodName'):
            method = getattr(klass, klass._testMethodName, None)
        else:
            method = None

        meta = AttrDict((k, get_method_attr(method, klass, k, 'N/A'))
                        for k in TEST_ATTRIBUTES)
        meta.description = klass._testMethodDoc
        return meta

    def get_or_create_case(self, test):
        """Gets or creates a test case. Returns the case_id."""
        address = nose_selector(test)
        if ':' not in address:
            return

        if address not in self.cases:
            section_id = self.get_or_create_section(test)
            params = AttrDict()
            params.title = address
            params.template_id = TEMPLATE.text
            params.type_id = TC_TYPE.automated
            params.priority_id = PRIORITY.medium
            params.custom_product_name = PRODUCT.bigip
            meta = self.get_test_metadata(test)
            params.custom_description = meta.description
            params.custom_email = meta.author
            params.custom_author_name = meta.author
            case = self.api.add_case(section_id, params)
            case_id = case.id
            self.cases[case.title] = case_id
        else:
            case_id = self.cases[address]

        return case_id

    def create_test_run(self, name=None):
        if self.options.plan:
            plans = dict((x.name, x.id) for x in self.api.get_plans(self.project_id))
            if self.options.plan not in plans:
                params = AttrDict()
                params.name = self.options.plan
                
                params.entries = []
                entry = AttrDict()
                entry.suite_id = self.suite_id
                #entry.config_ids = [59]
                entry.runs = []
                run = AttrDict()
                run.include_all = False
                #run.config_ids = [59]
                #entry.runs.append(run)
                #params.entries.append(entry)

                plan = self.api.add_plan(self.project_id, params)
                self.plan_id = plan.id
            else:
                self.plan_id = plans[self.options.plan]

            params = AttrDict()
            params.suite_id = self.suite_id
            params.name = name or self.session.name
            #params.include_all = True
            #params.case_ids = []
            params.config_ids = []
            params.runs = [{
                "include_all": False,
            #    "case_ids": [],
                "config_ids": []
            }]
            #params.entries = []
            #run = AttrDict()
            #run.case_ids = []
            #params.entries.append(run)
            pe = self.api.add_plan_entry(self.plan_id, params)
            self.plan_entry = pe
            return pe
        else:
            params = AttrDict()
            params.suite_id = self.suite_id
            params.name = name or self.session.name
            params.description = self.session.get_url()
            # test
            params.include_all = False
            params.case_ids = []
            return self.api.add_run(self.project_id, params)

    def get_or_create_test_run(self):
        if self.options.run:
            if self.options.plan:
                plans = dict((x.name, x) for x in self.api.get_plans(self.project_id))
                if self.options.plan not in plans:
                    return self.create_test_run(self.options.run)
                else:
                    self.plan_id = plans[self.options.plan].id
                    plan = self.api.get_plan(self.plan_id)
                    entries = dict((x.name, x) for x in plan.get('entries', []))
                    if self.options.run not in entries:
                        return self.create_test_run(self.options.run)
                    else:
                        self.plan_entry = entries[self.options.run]
                        return self.plan_entry
            else:
                runs = dict((x.name, x) for x in self.api.get_runs(self.project_id))
                if self.options.run in runs:
                    return runs[self.options.run]
                else:
                    return self.create_test_run(self.options.run)
        else:
            return self.create_test_run()

    def add_result(self, test, status_id, comment=None, extra=None):
        case_id = self.get_or_create_case(test)
        if not case_id:
            return
        self.case_ids.append(case_id)

        if self.plan_id:
            pe = self.plan_entry
            params = AttrDict()
            params.case_ids = self.case_ids
            #params.config_ids = [59]
            #pe.runs[0].config_ids = [59]
            #params.runs = pe.runs
            self.api.update_plan_entry(self.plan_id, self.plan_entry.id, params)
            self.run_id = pe.runs[0].id
        else:
            params = AttrDict()
            params.case_ids = self.case_ids
            params.config_ids = []
            self.api.update_run(self.run_id, params)

        params = AttrDict()
        params.status_id = status_id
        if comment:
            params.comment = comment
        if extra:
            params.update(extra)
        elapsed = int(time.time() - self.started_at)
        if elapsed:
            params.elapsed = "%ds" % elapsed
        return self.api.add_result_for_case(self.run_id, case_id, params)

    def begin(self):
        """Set the testrun start time.
        """
        #test_run = self.create_test_run()
        test_run = self.get_or_create_test_run()
        self.run_id = test_run.id
        cfgifc = self.context.get_config()
        cfgifc.api.plugins.testrail.test_run_url = test_run.url
    begin.critical = True

    def startTest(self, test, blocking_context=None):
        self.get_or_create_case(test)
        self.started_at = time.time()

    def addSuccess(self, test):
        self.add_result(test, STATUS.passed)

    def addFailure(self, test, err):
        comment = ''
        comment += ''.join(traceback.format_exception(*err))

        extra = AttrDict()
        extra.custom_results_link = self.session.get_url(test=test)
        self.add_result(test, STATUS.failed, comment, extra)

    def addBlocked(self, test, err):
        comment = str(err[1])
        self.add_result(test, STATUS.blocked, comment)

    def addError(self, test, err):
        comment = ''
        comment += ''.join(traceback.format_exception(*err))

        if issubclass(err[0], SkipTest):
            self.add_result(test, STATUS.skip, str(err[1]))
            return

        if issubclass(err[0], KnownIssueTest):
            groups = re.search('((?:BZ|BUG)\s*(\d{6}))', str(err[1]))
            if groups:
                extra = AttrDict()
                extra.defects = groups.group(2)
            else:
                extra = None
            self.add_result(test, STATUS.failed, str(err[1]), extra)
            return

        extra = AttrDict()
        extra.custom_results_link = self.session.get_url(test=test)
        self.add_result(test, STATUS.failed, comment, extra)
