---
- template:
    src: "{{ config }}"
    dest: "/tmp/bigip-{{ machine_fingerprint }}.conf"
  register: output 
  when: config is defined
  notify:
    - merge bigip.conf

- include_tasks: setup_socats.yaml
  delegate_to: "{{ item.key }}"
  become: true
  become_method: sudo
  become_user: "{{ hostvars[item.key].become_user }}"
  with_dict: "{{ dict(resources.members | groupby('docker')) }}"
  when: item.key != 'localhost'

- template:
    src: "{{ apache_config }}"
    dest: "/tmp/apache-{{ item.key }}-{{ machine_fingerprint }}.conf"
  register: output
  when: apache_config is defined
  run_once: true
  delegate_to: "{{ item.key }}"
  vars:
    members: "{{ item.value }}"
  with_dict: "{{ dict(resources.members | groupby('docker')) }}"

- shell:
    test ! -e {{ item.value.remote_dir }} && mkdir -p {{ item.value.remote_dir }}
  run_once: true
  delegate_to: "{{ item.key }}"
  ignore_errors: yes
  become: true
  become_method: sudo
  become_user: nobody
  with_dict_list: "{{ dict(resources.members | groupby('docker')) }}"

- docker_container:
    name: "apache-{{ machine_fingerprint }}"
    image: bitnami/apache:latest
    state: started
    #recreate: no
    restart: yes
    #cleanup: yes
    #auto_remove: yes
    volumes: "{{ volumes }} + {{ f5test_utils.format('{remote_dir}:{remote_dir}:ro', members)|list }}"
    ports: "{{ f5test_utils.format('{port}:{port}', members)|list }}"
  register: output
  run_once: true
  delegate_to: "{{ item.key }}"
  vars:
    members: "{{ item.value }}"
    volumes:
      - "/tmp/apache-{{ item.key }}-{{ machine_fingerprint }}.conf:/bitnami/apache/conf/vhosts/my_vhost.conf:ro"
  with_dict: "{{ dict(resources.members | groupby('docker')) }}"

- shell:
    test ! -e {{ item.local_dir }} && mkdir -p {{ item.local_dir }} &&
    chmod a+w {{ item.local_dir }} &&
    echo {{ hostvars[item.docker].ansible_ssh_pass }} |
    sshfs {{ hostvars[item.docker].ansible_user }}@{{ hostvars[item.docker].ansible_host }}:{{ item.remote_dir }}/
      {{ item.local_dir }} -o password_stdin || true

  delegate_to: localhost
  run_once: true
  with_items: "{{ resources.members }}"
  when: item.docker != 'localhost'
