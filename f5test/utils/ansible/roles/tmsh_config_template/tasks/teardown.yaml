---
#- name: Clear bigip.conf
#  file:
#    state: "{{ item }}"
#    path: /config/bigip.conf
#  notify:
#    - load tmsh config    
#  with_items:
#    - absent
#    - touch 
#- debug: var=resources

#- debug: var=_

- shell:
    test -e {{ item.local_dir }} && fusermount -u {{ item.local_dir }} &&
    rmdir {{ item.local_dir }}

  delegate_to: localhost
  run_once: true
  ignore_errors: yes
  with_items: "{{ resources.members }}"
  when: True and item.docker != 'localhost'

#- include_vars:
#    file: /tmp/pids.json
#  register: output
#  delegate_facts: True
#  delegate_to: docker-1
#  #delegate_to: "{{ item.key }}"
#  #with_dict_list: "{{ dict(resources.members | groupby('docker')) }}"

- setup:
    fact_path: /tmp/facts.d
  delegate_to: "{{ item.key }}"
  register: output
  with_dict: "{{ dict(resources.members | groupby('docker')) }}"

#- debug: var=ansible_local
#  delegate_to: docker-1

- shell: "kill {{ f5test_utils.format_list('{}', ansible_local.pids) | join(' ') }}"
  register: output
  ignore_errors: yes
  delegate_to: "{{ item._ansible_delegated_vars.ansible_delegated_host }}"
  with_items: "{{ output.results }}"

- shell:
    test -e {{ item.value.remote_dir }} && rm -rf {{ item.value.remote_dir }}

  run_once: true
  delegate_to: "{{ item.key }}"
  become: true
  become_method: sudo
  become_user: nobody
  ignore_errors: yes
  with_dict_list: "{{ dict(resources.members | groupby('docker')) }}"

- set_fact:
    _: '{{ f5test_respools.get(item) and f5test_respools[item].free_all() }}'

  delegate_to: localhost
  run_once: true
  with_items: '{{ resources }}'
